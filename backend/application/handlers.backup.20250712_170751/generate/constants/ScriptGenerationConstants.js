/**
 * Script Generation Constants
 * Centralized configuration for script generation
 */

const SCRIPT_TYPES = {
    BUILD: 'build',
    DEPLOY: 'deploy',
    TEST: 'test',
    LINT: 'lint',
    FORMAT: 'format',
    CLEAN: 'clean',
    DEV: 'dev',
    PROD: 'prod',
    CUSTOM: 'custom'
};

const VALID_SCRIPT_TYPES = Object.values(SCRIPT_TYPES);

const BUILD_TOOLS = {
    WEBPACK: 'webpack',
    VITE: 'vite',
    ROLLUP: 'rollup',
    ESBUILD: 'esbuild',
    PARCEL: 'parcel',
    GULP: 'gulp',
    GRUNT: 'grunt',
    MAKE: 'make',
    CMAKE: 'cmake',
    MAVEN: 'maven',
    GRADLE: 'gradle',
    CARGO: 'cargo',
    GO: 'go',
    PYTHON: 'python'
};

const CONFIG_FILE_MAPPING = {
    'webpack.config.js': BUILD_TOOLS.WEBPACK,
    'vite.config.js': BUILD_TOOLS.VITE,
    'rollup.config.js': BUILD_TOOLS.ROLLUP,
    'esbuild.config.js': BUILD_TOOLS.ESBUILD,
    'parcel.config.js': BUILD_TOOLS.PARCEL,
    'gulpfile.js': BUILD_TOOLS.GULP,
    'gruntfile.js': BUILD_TOOLS.GRUNT,
    'Makefile': BUILD_TOOLS.MAKE,
    'CMakeLists.txt': BUILD_TOOLS.CMAKE,
    'pom.xml': BUILD_TOOLS.MAVEN,
    'build.gradle': BUILD_TOOLS.GRADLE,
    'Cargo.toml': BUILD_TOOLS.CARGO,
    'go.mod': BUILD_TOOLS.GO,
    'requirements.txt': BUILD_TOOLS.PYTHON,
    'setup.py': BUILD_TOOLS.PYTHON
};

const SCRIPT_NAME_BASE_MAPPING = {
    [SCRIPT_TYPES.BUILD]: 'build',
    [SCRIPT_TYPES.DEPLOY]: 'deploy',
    [SCRIPT_TYPES.TEST]: 'test',
    [SCRIPT_TYPES.LINT]: 'lint',
    [SCRIPT_TYPES.FORMAT]: 'format',
    [SCRIPT_TYPES.CLEAN]: 'clean',
    [SCRIPT_TYPES.DEV]: 'dev',
    [SCRIPT_TYPES.PROD]: 'prod',
    [SCRIPT_TYPES.CUSTOM]: 'script'
};

const ESTIMATED_TIMES = {
    [SCRIPT_TYPES.BUILD]: 5,
    [SCRIPT_TYPES.DEPLOY]: 8,
    [SCRIPT_TYPES.TEST]: 3,
    [SCRIPT_TYPES.LINT]: 2,
    [SCRIPT_TYPES.FORMAT]: 2,
    [SCRIPT_TYPES.CLEAN]: 1,
    [SCRIPT_TYPES.DEV]: 4,
    [SCRIPT_TYPES.PROD]: 6,
    [SCRIPT_TYPES.CUSTOM]: 5
};

const SCRIPT_DIRECTORIES = ['scripts', 'bin'];

const ERROR_HANDLING_TEMPLATE = `
# Error handling
set -e  # Exit on any error
set -u  # Exit on undefined variable
set -o pipefail  # Exit on pipe failure

# Function to handle errors
handle_error() {
    echo "Error: $1" >&2
    exit 1
}

trap 'handle_error "Script failed at line $LINENO"' ERR
`;

const LOGGING_TEMPLATE = `
# Logging functions
log_info() {
    echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
    echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
}

log_success() {
    echo "[SUCCESS] $(date '+%Y-%m-%d %H:%M:%S') - $1"
}
`;

const SCRIPT_METADATA_TEMPLATE = (scriptName, scriptType, projectPath, requestedBy) => `#!/bin/bash
# Generated by AI Task Management System
# Script: ${scriptName}
# Type: ${scriptType}
# Project: ${projectPath}
# Generated: $(date '+%Y-%m-%d %H:%M:%S')
# Generated by: ${requestedBy}

`;

module.exports = {
    SCRIPT_TYPES,
    VALID_SCRIPT_TYPES,
    BUILD_TOOLS,
    CONFIG_FILE_MAPPING,
    SCRIPT_NAME_BASE_MAPPING,
    ESTIMATED_TIMES,
    SCRIPT_DIRECTORIES,
    ERROR_HANDLING_TEMPLATE,
    LOGGING_TEMPLATE,
    SCRIPT_METADATA_TEMPLATE
}; 