/**
 * AutoModeHandler - Handles VibeCoder auto mode execution
 * Implements the Command Handler pattern for full automation
 */
class AutoModeHandler {
    constructor(dependencies = {}) {
        this.validateDependencies(dependencies);
        this.taskRepository = dependencies.taskRepository;
        this.eventBus = dependencies.eventBus;
        this.logger = dependencies.logger;
        this.cursorIDEService = dependencies.cursorIDEService;
        this.projectAnalyzer = dependencies.projectAnalyzer;
        this.handlerId = this.generateHandlerId();
    }

    /**
     * Validate handler dependencies
     * @param {Object} dependencies - Handler dependencies
     * @throws {Error} If dependencies are invalid
     */
    validateDependencies(dependencies) {
        const required = [
            'taskRepository',
            'eventBus',
            'logger',
            'cursorIDEService'
        ];
        for (const dep of required) {
            if (!dependencies[dep]) {
                throw new Error(`Missing required dependency: ${dep}`);
            }
        }
    }

    /**
     * Generate unique handler ID
     * @returns {string} Unique handler ID
     */
    generateHandlerId() {
        return `auto_mode_handler_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * Handle AutoModeCommand
     * @param {AutoModeCommand} command - Auto mode command
     * @returns {Promise<Object>} Auto mode result
     */
    async handle(command) {
        // Validate command
        const validationResult = await this.validateCommand(command);
        if (!validationResult.isValid) {
            throw new Error(`Command validation failed: ${validationResult.errors.join(', ')}`);
        }
        try {
            this.logger.info('AutoModeHandler: Starting auto mode', {
                handlerId: this.handlerId,
                commandId: command.commandId,
                projectPath: command.projectPath,
                requestedBy: command.requestedBy
            });
            await this.eventBus.publish('auto.mode.started', {
                projectPath: command.projectPath,
                commandId: command.commandId,
                requestedBy: command.requestedBy,
                timestamp: new Date()
            });
            // REAL AI AUTO MODE - Analyze project and generate real tasks
            console.log('🔍 [AutoModeHandler] Starting real AI auto mode...');
            
            // 1. Analyze project structure
            const projectAnalysis = await this.projectAnalyzer.analyzeProject(command.projectPath);
            console.log('🔍 [AutoModeHandler] Project analysis completed:', projectAnalysis);
            
            // 2. Generate AI-powered task suggestions
            const aiSuggestions = await this.cursorIDEService.generateTaskSuggestions(projectAnalysis);
            console.log('🔍 [AutoModeHandler] AI suggestions generated:', aiSuggestions);
            
            // 3. Create real tasks from suggestions
            const tasks = [];
            for (const suggestion of aiSuggestions) {
                const task = await this.taskRepository.create({
                    id: `auto_task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    projectId: 'default',
                    title: suggestion.title,
                    description: suggestion.description,
                    type: suggestion.type || 'analysis',
                    priority: suggestion.priority || 'medium',
                    status: 'pending',
                    metadata: {
                        source: 'ai_auto_mode',
                        projectPath: command.projectPath,
                        analysisId: projectAnalysis.id
                    }
                });
                tasks.push(task);
            }
            
            // 4. Create comprehensive tasks.md for Cursor IDE
            const tasksMdContent = `# Auto Mode Execution: ${projectAnalysis.projectType} Project

## Project Analysis
- **Type**: ${projectAnalysis.projectType}
- **Complexity**: ${projectAnalysis.complexity}
- **Path**: ${command.projectPath}
- **Analysis Time**: ${new Date().toISOString()}

## Generated Tasks (${tasks.length} total)

${tasks.map((task, index) => `
### Task ${index + 1}: ${task.title}
- **Type**: ${task.type}
- **Priority**: ${task.priority}
- **Description**: ${task.description}

**Instructions**: ${task.description}

---
`).join('\n')}

## Auto Mode Instructions
1. Review each task above
2. Execute tasks in priority order
3. Provide completion status for each task
4. Report any issues or additional tasks needed

## Expected Outcome
Complete all generated tasks and provide a comprehensive summary.

---
*Auto-generated by CursorWeb AI Task Management System*
`;

            // 5. Save tasks.md for Cursor IDE
            const fs = require('fs');
            const path = require('path');
            const tasksFilePath = path.join(process.cwd(), 'auto_mode_tasks.md');
            fs.writeFileSync(tasksFilePath, tasksMdContent);
            
            console.log('✅ [AutoModeHandler] Created auto_mode_tasks.md at:', tasksFilePath);
            console.log('🔍 [AutoModeHandler] Please open this file in Cursor IDE and execute all tasks');
            
            const result = {
                session: {
                    id: `auto_session_${Date.now()}`,
                    projectPath: command.projectPath,
                    status: 'running',
                    startedAt: new Date(),
                    tasks: tasks.map(t => t.id)
                },
                tasks: tasks,
                scripts: [],
                analysis: projectAnalysis,
                tasksFilePath: tasksFilePath
            };
            await this.eventBus.publish('auto.mode.completed', {
                projectPath: command.projectPath,
                commandId: command.commandId,
                requestedBy: command.requestedBy,
                result,
                timestamp: new Date()
            });
            this.logger.info('AutoModeHandler: Auto mode completed', {
                handlerId: this.handlerId,
                commandId: command.commandId,
                projectPath: command.projectPath
            });
            return {
                success: true,
                result
            };
        } catch (error) {
            this.logger.error('AutoModeHandler: Auto mode failed', {
                handlerId: this.handlerId,
                commandId: command.commandId,
                projectPath: command.projectPath,
                error: error.message
            });
            await this.eventBus.publish('auto.mode.failed', {
                projectPath: command.projectPath,
                commandId: command.commandId,
                requestedBy: command.requestedBy,
                error: error.message,
                timestamp: new Date()
            });
            throw error;
        }
    }

    /**
     * Validate command
     * @param {AutoModeCommand} command - Auto mode command
     * @returns {Promise<Object>} Validation result
     */
    async validateCommand(command) {
        const errors = [];
        const warnings = [];
        if (!command.projectPath) {
            errors.push('Project path is required');
        }
        if (!command.requestedBy) {
            errors.push('Requested by is required');
        }
        // Add more validation as needed
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
}

module.exports = AutoModeHandler; 