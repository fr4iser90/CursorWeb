{
  "summary": {
    "totalFiles": 366,
    "totalFindings": 6452,
    "byType": {
      "direct_data": 2439,
      "variable_data": 1347,
      "error_object": 784,
      "template_data": 1607,
      "file_content": 28,
      "database_result": 23,
      "chat_data": 2,
      "ide_data": 78,
      "object_data": 88,
      "json_stringify": 2,
      "task_data": 23,
      "user_data": 7,
      "request_response": 22,
      "configuration": 2
    }
  },
  "files": {
    "./backend/Application.js": {
      "totalFindings": 88,
      "byType": {
        "direct_data": 32,
        "variable_data": 26,
        "error_object": 14,
        "template_data": 8,
        "file_content": 1,
        "database_result": 7
      },
      "findings": [
        {
          "line": 87,
          "content": "info: (message, ...args) => logger.info(message, ...args),",
          "type": "direct_data",
          "match": "logger.info(message, ...args"
        },
        {
          "line": 88,
          "content": "error: (message, ...args) => logger.error(message, ...args),",
          "type": "direct_data",
          "match": "logger.error(message, ...args"
        },
        {
          "line": 91,
          "content": "logger.debug(message, ...args);",
          "type": "direct_data",
          "match": "logger.debug(message, ...args"
        },
        {
          "line": 94,
          "content": "warn: (message, ...args) => logger.warn(message, ...args)",
          "type": "direct_data",
          "match": "logger.warn(message, ...args"
        },
        {
          "line": 145,
          "content": "this.logger.warn('IDE Manager initialization failed, continuing without IDE support:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('IDE Manager initialization failed, continuing without IDE support:', error.message"
        },
        {
          "line": 145,
          "content": "this.logger.warn('IDE Manager initialization failed, continuing without IDE support:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('IDE Manager initialization failed, continuing"
        },
        {
          "line": 159,
          "content": "this.logger.error('Initialization failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 159,
          "content": "this.logger.error('Initialization failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 159,
          "content": "this.logger.error('Initialization failed:', error);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 170,
          "content": "this.logger.info(`✅ Database connected: ${this.databaseConnection.getType()}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Database connected: ${this.databaseConnection.getType()}`"
        },
        {
          "line": 217,
          "content": "this.logger.error('Failed to get infrastructure services:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get infrastructure services:', error.message"
        },
        {
          "line": 217,
          "content": "this.logger.error('Failed to get infrastructure services:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get infrastructure services:', error"
        },
        {
          "line": 217,
          "content": "this.logger.error('Failed to get infrastructure services:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get infrastructure services:', error"
        },
        {
          "line": 259,
          "content": "this.logger.error('Failed to get domain services:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get domain services:', error.message"
        },
        {
          "line": 259,
          "content": "this.logger.error('Failed to get domain services:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get domain services:', error"
        },
        {
          "line": 259,
          "content": "this.logger.error('Failed to get domain services:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get domain services:', error"
        },
        {
          "line": 267,
          "content": "this.logger.warn('WorkflowOrchestrationService not available:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('WorkflowOrchestrationService not available:', error.message"
        },
        {
          "line": 267,
          "content": "this.logger.warn('WorkflowOrchestrationService not available:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('WorkflowOrchestrationService not available:', error"
        },
        {
          "line": 267,
          "content": "this.logger.warn('WorkflowOrchestrationService not available:', error.message);",
          "type": "error_object",
          "match": "logger.warn('WorkflowOrchestrationService not available:', error"
        },
        {
          "line": 275,
          "content": "this.logger.warn('GitService not available:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('GitService not available:', error.message"
        },
        {
          "line": 275,
          "content": "this.logger.warn('GitService not available:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('GitService not available:', error"
        },
        {
          "line": 275,
          "content": "this.logger.warn('GitService not available:', error.message);",
          "type": "error_object",
          "match": "logger.warn('GitService not available:', error"
        },
        {
          "line": 289,
          "content": "this.logger.warn('Some test services not available:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Some test services not available:', error.message"
        },
        {
          "line": 289,
          "content": "this.logger.warn('Some test services not available:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Some test services not available:', error"
        },
        {
          "line": 289,
          "content": "this.logger.warn('Some test services not available:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Some test services not available:', error"
        },
        {
          "line": 356,
          "content": "this.logger.warn('Project context validation warnings:', validation.warnings);",
          "type": "direct_data",
          "match": "logger.warn('Project context validation warnings:', validation.warnings"
        },
        {
          "line": 356,
          "content": "this.logger.warn('Project context validation warnings:', validation.warnings);",
          "type": "variable_data",
          "match": "logger.warn('Project context validation warnings:', validation"
        },
        {
          "line": 525,
          "content": "this.logger.info(`${req.method} ${req.path}`, {",
          "type": "direct_data",
          "match": "logger.info(`${req.method} ${req.path}`, {"
        },
        {
          "line": 525,
          "content": "this.logger.info(`${req.method} ${req.path}`, {",
          "type": "template_data",
          "match": "logger.info(`${req.method} ${req.path}`"
        },
        {
          "line": 641,
          "content": "this.logger.error('Error getting file tree:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 641,
          "content": "this.logger.error('Error getting file tree:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 641,
          "content": "this.logger.error('Error getting file tree:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 652,
          "content": "this.logger.info('/api/files/content called with path:', filePath);",
          "type": "direct_data",
          "match": "logger.info('/api/files/content called with path:', filePath"
        },
        {
          "line": 652,
          "content": "this.logger.info('/api/files/content called with path:', filePath);",
          "type": "variable_data",
          "match": "logger.info('/api/files/content called with path:', filePath"
        },
        {
          "line": 652,
          "content": "this.logger.info('/api/files/content called with path:', filePath);",
          "type": "file_content",
          "match": "logger.info('/api/files/content called with path:', file"
        },
        {
          "line": 668,
          "content": "this.logger.error('Error getting file content:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 668,
          "content": "this.logger.error('Error getting file content:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 668,
          "content": "this.logger.error('Error getting file content:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 806,
          "content": "this.logger.info('Auto test fix route hit', {",
          "type": "direct_data",
          "match": "logger.info('Auto test fix route hit', { "
        },
        {
          "line": 830,
          "content": "this.logger.error('Unhandled error:', error);",
          "type": "direct_data",
          "match": "logger.error('Unhandled error:', error"
        },
        {
          "line": 830,
          "content": "this.logger.error('Unhandled error:', error);",
          "type": "variable_data",
          "match": "logger.error('Unhandled error:', error"
        },
        {
          "line": 830,
          "content": "this.logger.error('Unhandled error:', error);",
          "type": "error_object",
          "match": "logger.error('Unhandled error:', error"
        },
        {
          "line": 844,
          "content": "this.logger.info('EventBus available, setting up subscriptions...');",
          "type": "direct_data",
          "match": "logger.info('EventBus available, setting up subscriptions...'"
        },
        {
          "line": 844,
          "content": "this.logger.info('EventBus available, setting up subscriptions...');",
          "type": "variable_data",
          "match": "logger.info('EventBus available, setting"
        },
        {
          "line": 846,
          "content": "this.logger.info('IDE started:', data);",
          "type": "direct_data",
          "match": "logger.info('IDE started:', data"
        },
        {
          "line": 846,
          "content": "this.logger.info('IDE started:', data);",
          "type": "variable_data",
          "match": "logger.info('IDE started:', data"
        },
        {
          "line": 846,
          "content": "this.logger.info('IDE started:', data);",
          "type": "database_result",
          "match": "logger.info('IDE started:', data"
        },
        {
          "line": 853,
          "content": "this.logger.info('IDE stopped:', data);",
          "type": "direct_data",
          "match": "logger.info('IDE stopped:', data"
        },
        {
          "line": 853,
          "content": "this.logger.info('IDE stopped:', data);",
          "type": "variable_data",
          "match": "logger.info('IDE stopped:', data"
        },
        {
          "line": 853,
          "content": "this.logger.info('IDE stopped:', data);",
          "type": "database_result",
          "match": "logger.info('IDE stopped:', data"
        },
        {
          "line": 860,
          "content": "this.logger.info('Chat message:', data);",
          "type": "direct_data",
          "match": "logger.info('Chat message:', data"
        },
        {
          "line": 860,
          "content": "this.logger.info('Chat message:', data);",
          "type": "variable_data",
          "match": "logger.info('Chat message:', data"
        },
        {
          "line": 860,
          "content": "this.logger.info('Chat message:', data);",
          "type": "database_result",
          "match": "logger.info('Chat message:', data"
        },
        {
          "line": 867,
          "content": "this.logger.info('Message sent event:', data);",
          "type": "direct_data",
          "match": "logger.info('Message sent event:', data"
        },
        {
          "line": 867,
          "content": "this.logger.info('Message sent event:', data);",
          "type": "variable_data",
          "match": "logger.info('Message sent event:', data"
        },
        {
          "line": 867,
          "content": "this.logger.info('Message sent event:', data);",
          "type": "database_result",
          "match": "logger.info('Message sent event:', data"
        },
        {
          "line": 874,
          "content": "this.logger.info('Chat history updated event:', data);",
          "type": "direct_data",
          "match": "logger.info('Chat history updated event:', data"
        },
        {
          "line": 874,
          "content": "this.logger.info('Chat history updated event:', data);",
          "type": "variable_data",
          "match": "logger.info('Chat history updated event:', data"
        },
        {
          "line": 874,
          "content": "this.logger.info('Chat history updated event:', data);",
          "type": "database_result",
          "match": "logger.info('Chat history updated event:', data"
        },
        {
          "line": 881,
          "content": "this.logger.info('User app detected event:', data);",
          "type": "direct_data",
          "match": "logger.info('User app detected event:', data"
        },
        {
          "line": 881,
          "content": "this.logger.info('User app detected event:', data);",
          "type": "variable_data",
          "match": "logger.info('User app detected event:', data"
        },
        {
          "line": 881,
          "content": "this.logger.info('User app detected event:', data);",
          "type": "database_result",
          "match": "logger.info('User app detected event:', data"
        },
        {
          "line": 888,
          "content": "this.logger.info('Active IDE changed event:', data);",
          "type": "direct_data",
          "match": "logger.info('Active IDE changed event:', data"
        },
        {
          "line": 888,
          "content": "this.logger.info('Active IDE changed event:', data);",
          "type": "variable_data",
          "match": "logger.info('Active IDE changed event:', data"
        },
        {
          "line": 888,
          "content": "this.logger.info('Active IDE changed event:', data);",
          "type": "database_result",
          "match": "logger.info('Active IDE changed event:', data"
        },
        {
          "line": 912,
          "content": "this.logger.error('Failed to cleanup expired sessions:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to cleanup expired sessions:', error"
        },
        {
          "line": 912,
          "content": "this.logger.error('Failed to cleanup expired sessions:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to cleanup expired sessions:', error"
        },
        {
          "line": 912,
          "content": "this.logger.error('Failed to cleanup expired sessions:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to cleanup expired sessions:', error"
        },
        {
          "line": 922,
          "content": "this.logger.error('Failed to cleanup old secrets:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to cleanup old secrets:', error"
        },
        {
          "line": 922,
          "content": "this.logger.error('Failed to cleanup old secrets:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to cleanup old secrets:', error"
        },
        {
          "line": 922,
          "content": "this.logger.error('Failed to cleanup old secrets:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to cleanup old secrets:', error"
        },
        {
          "line": 934,
          "content": "this.logger.error('Failed to cleanup old Auto-Finish sessions:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to cleanup old Auto-Finish sessions:', error"
        },
        {
          "line": 934,
          "content": "this.logger.error('Failed to cleanup old Auto-Finish sessions:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to cleanup old Auto-Finish sessions:', error"
        },
        {
          "line": 934,
          "content": "this.logger.error('Failed to cleanup old Auto-Finish sessions:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to cleanup old Auto-Finish sessions:', error"
        },
        {
          "line": 951,
          "content": "this.logger.info(`Server running on port ${this.config.port}`);",
          "type": "template_data",
          "match": "logger.info(`Server running on port ${this.config.port}`"
        },
        {
          "line": 952,
          "content": "this.logger.info(`Environment: ${this.autoSecurityManager.getEnvironment()}`);",
          "type": "template_data",
          "match": "logger.info(`Environment: ${this.autoSecurityManager.getEnvironment()}`"
        },
        {
          "line": 953,
          "content": "this.logger.info(`Database: ${this.databaseConnection.getType()}`);",
          "type": "template_data",
          "match": "logger.info(`Database: ${this.databaseConnection.getType()}`"
        },
        {
          "line": 954,
          "content": "this.logger.info(`Auto-security: ${this.autoSecurityManager.isProduction() ? 'Production' : 'Development'}`);",
          "type": "template_data",
          "match": "logger.info(`Auto-security: ${this.autoSecurityManager.isProduction() ? 'Production' : 'Development'}`"
        },
        {
          "line": 962,
          "content": "this.logger.info('No existing detection data found, starting workspace detection...');",
          "type": "direct_data",
          "match": "logger.info('No existing detection data found, starting workspace detection...'"
        },
        {
          "line": 962,
          "content": "this.logger.info('No existing detection data found, starting workspace detection...');",
          "type": "variable_data",
          "match": "logger.info('No existing detection data found, starting"
        },
        {
          "line": 965,
          "content": "this.logger.info(`Workspace detection completed: ${newStats.successful}/${newStats.total} successful`);",
          "type": "template_data",
          "match": "logger.info(`Workspace detection completed: ${newStats.successful}/${newStats.total} successful`"
        },
        {
          "line": 967,
          "content": "this.logger.info(`Found existing detection data (${stats.total} results), skipping workspace detection`);",
          "type": "template_data",
          "match": "logger.info(`Found existing detection data (${stats.total} results), skipping workspace detection`"
        },
        {
          "line": 970,
          "content": "this.logger.error('Workspace detection failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Workspace detection failed:', error"
        },
        {
          "line": 970,
          "content": "this.logger.error('Workspace detection failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Workspace detection failed:', error"
        },
        {
          "line": 970,
          "content": "this.logger.error('Workspace detection failed:', error);",
          "type": "error_object",
          "match": "logger.error('Workspace detection failed:', error"
        },
        {
          "line": 979,
          "content": "this.logger.error('Failed to start:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start:', error"
        },
        {
          "line": 979,
          "content": "this.logger.error('Failed to start:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start:', error"
        },
        {
          "line": 979,
          "content": "this.logger.error('Failed to start:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start:', error"
        }
      ]
    },
    "./backend/cli/TaskProgressUI.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 497,
          "content": "logger.info(chalk.gray(`   ${statusIcon} ${execution.id.substring(0, 8)} - ${execution.status}`));",
          "type": "direct_data",
          "match": "logger.info(chalk.gray(`   ${statusIcon} ${execution.id.substring(0, 8"
        },
        {
          "line": 497,
          "content": "logger.info(chalk.gray(`   ${statusIcon} ${execution.id.substring(0, 8)} - ${execution.status}`));",
          "type": "variable_data",
          "match": "logger.info(chalk.gray(`   ${statusIcon} ${execution.id.substring(0, 8"
        }
      ]
    },
    "./backend/cli/index.js": {
      "totalFindings": 31,
      "byType": {
        "direct_data": 11,
        "variable_data": 7,
        "error_object": 5,
        "template_data": 8
      },
      "findings": [
        {
          "line": 43,
          "content": "logger.error('\\n❌ Uncaught Exception:', error.message);",
          "type": "direct_data",
          "match": "logger.error('\\n❌ Uncaught Exception:', error.message"
        },
        {
          "line": 43,
          "content": "logger.error('\\n❌ Uncaught Exception:', error.message);",
          "type": "variable_data",
          "match": "logger.error('\\n❌ Uncaught Exception:', error"
        },
        {
          "line": 43,
          "content": "logger.error('\\n❌ Uncaught Exception:', error.message);",
          "type": "error_object",
          "match": "logger.error('\\n❌ Uncaught Exception:', error"
        },
        {
          "line": 51,
          "content": "logger.error('\\n❌ Unhandled Rejection at:', promise, 'reason:', reason);",
          "type": "direct_data",
          "match": "logger.error('\\n❌ Unhandled Rejection at:', promise, 'reason:', reason"
        },
        {
          "line": 51,
          "content": "logger.error('\\n❌ Unhandled Rejection at:', promise, 'reason:', reason);",
          "type": "variable_data",
          "match": "logger.error('\\n❌ Unhandled Rejection at:', promise"
        },
        {
          "line": 94,
          "content": "logger.error('❌ Failed to initialize CLI:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to initialize CLI:', error.message"
        },
        {
          "line": 94,
          "content": "logger.error('❌ Failed to initialize CLI:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to initialize CLI:', error"
        },
        {
          "line": 94,
          "content": "logger.error('❌ Failed to initialize CLI:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to initialize CLI:', error"
        },
        {
          "line": 178,
          "content": "logger.error('❌ CLI execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ CLI execution failed:', error.message"
        },
        {
          "line": 178,
          "content": "logger.error('❌ CLI execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ CLI execution failed:', error"
        },
        {
          "line": 178,
          "content": "logger.error('❌ CLI execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ CLI execution failed:', error"
        },
        {
          "line": 202,
          "content": "logger.info(chalk.gray('Zero configuration, full automation\\n'));",
          "type": "direct_data",
          "match": "logger.info(chalk.gray('Zero configuration, full automation\\n'"
        },
        {
          "line": 202,
          "content": "logger.info(chalk.gray('Zero configuration, full automation\\n'));",
          "type": "variable_data",
          "match": "logger.info(chalk.gray('Zero configuration, full"
        },
        {
          "line": 489,
          "content": "logger.error('❌ Sequential mode failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Sequential mode failed:', error.message"
        },
        {
          "line": 489,
          "content": "logger.error('❌ Sequential mode failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Sequential mode failed:', error"
        },
        {
          "line": 489,
          "content": "logger.error('❌ Sequential mode failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Sequential mode failed:', error"
        },
        {
          "line": 574,
          "content": "logger.info('  --project, -p <path>     Project path (default: current directory)');",
          "type": "direct_data",
          "match": "logger.info('  --project, -p <path>     Project path (default: current directory"
        },
        {
          "line": 575,
          "content": "logger.info('  --timeout, -t <seconds>  Timeout per task in seconds (default: 300)');",
          "type": "direct_data",
          "match": "logger.info('  --timeout, -t <seconds>  Timeout per task in seconds (default: 300"
        },
        {
          "line": 578,
          "content": "logger.info('  --verbose, -v            Show detailed results');",
          "type": "direct_data",
          "match": "logger.info('  --verbose, -v            Show detailed results'"
        },
        {
          "line": 582,
          "content": "logger.info('  --help, -h               Show this help\\n');",
          "type": "direct_data",
          "match": "logger.info('  --help, -h               Show this help\\n'"
        },
        {
          "line": 598,
          "content": "logger.info(`  Total Tasks: ${result.totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  Total Tasks: ${result.totalTasks}`"
        },
        {
          "line": 599,
          "content": "logger.info(`  Successful: ${chalk.green(result.successful)}`);",
          "type": "template_data",
          "match": "logger.info(`  Successful: ${chalk.green(result.successful)}`"
        },
        {
          "line": 600,
          "content": "logger.info(`  Failed: ${chalk.red(result.failed)}`);",
          "type": "template_data",
          "match": "logger.info(`  Failed: ${chalk.red(result.failed)}`"
        },
        {
          "line": 601,
          "content": "logger.info(`  Total Duration: ${chalk.yellow(Math.round(result.totalDuration / 1000))}s`);",
          "type": "template_data",
          "match": "logger.info(`  Total Duration: ${chalk.yellow(Math.round(result.totalDuration / 1000))}s`"
        },
        {
          "line": 602,
          "content": "logger.info(`  Average Duration: ${chalk.yellow(Math.round(result.averageDuration / 1000))}s per task`);",
          "type": "template_data",
          "match": "logger.info(`  Average Duration: ${chalk.yellow(Math.round(result.averageDuration / 1000))}s per task`"
        },
        {
          "line": 617,
          "content": "logger.info(`  ${status} Task ${index + 1}: ${taskResult.taskTitle}`);",
          "type": "template_data",
          "match": "logger.info(`  ${status} Task ${index + 1}: ${taskResult.taskTitle}`"
        },
        {
          "line": 618,
          "content": "logger.info(`     Duration: ${chalk.yellow(duration)}s`);",
          "type": "template_data",
          "match": "logger.info(`     Duration: ${chalk.yellow(duration)}s`"
        },
        {
          "line": 621,
          "content": "logger.info(`     Error: ${chalk.red(taskResult.error)}`);",
          "type": "template_data",
          "match": "logger.info(`     Error: ${chalk.red(taskResult.error)}`"
        },
        {
          "line": 696,
          "content": "logger.error('❌ CLI failed to start:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ CLI failed to start:', error.message"
        },
        {
          "line": 696,
          "content": "logger.error('❌ CLI failed to start:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ CLI failed to start:', error"
        },
        {
          "line": 696,
          "content": "logger.error('❌ CLI failed to start:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ CLI failed to start:', error"
        }
      ]
    },
    "./backend/cli/TaskCommands.js": {
      "totalFindings": 24,
      "byType": {
        "template_data": 12,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 4
      },
      "findings": [
        {
          "line": 560,
          "content": "logger.info(`📋 Found ${tasks.length} tasks to execute sequentially`);",
          "type": "template_data",
          "match": "logger.info(`📋 Found ${tasks.length} tasks to execute sequentially`"
        },
        {
          "line": 580,
          "content": "logger.info(`✅ Successful: ${result.successful}/${result.totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successful: ${result.successful}/${result.totalTasks}`"
        },
        {
          "line": 581,
          "content": "logger.info(`❌ Failed: ${result.failed}/${result.totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${result.failed}/${result.totalTasks}`"
        },
        {
          "line": 582,
          "content": "logger.info(`⏱️  Total Duration: ${Math.round(result.totalDuration / 1000)}s`);",
          "type": "template_data",
          "match": "logger.info(`⏱️  Total Duration: ${Math.round(result.totalDuration / 1000)}s`"
        },
        {
          "line": 583,
          "content": "logger.info(`📈 Average Duration: ${Math.round(result.averageDuration / 1000)}s per task`);",
          "type": "template_data",
          "match": "logger.info(`📈 Average Duration: ${Math.round(result.averageDuration / 1000)}s per task`"
        },
        {
          "line": 596,
          "content": "logger.info(`${status} Task ${index + 1}: ${taskResult.taskTitle}`);",
          "type": "template_data",
          "match": "logger.info(`${status} Task ${index + 1}: ${taskResult.taskTitle}`"
        },
        {
          "line": 597,
          "content": "logger.info(`   Duration: ${Math.round(taskResult.duration / 1000)}s`);",
          "type": "template_data",
          "match": "logger.info(`   Duration: ${Math.round(taskResult.duration / 1000)}s`"
        },
        {
          "line": 599,
          "content": "logger.info(`   Error: ${taskResult.error}`);",
          "type": "template_data",
          "match": "logger.info(`   Error: ${taskResult.error}`"
        },
        {
          "line": 605,
          "content": "logger.error('❌ Sequential task execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Sequential task execution failed:', error.message"
        },
        {
          "line": 605,
          "content": "logger.error('❌ Sequential task execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Sequential task execution failed:', error"
        },
        {
          "line": 605,
          "content": "logger.error('❌ Sequential task execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Sequential task execution failed:', error"
        },
        {
          "line": 622,
          "content": "logger.info(`📋 Found ${tasks.length} pending tasks in database`);",
          "type": "template_data",
          "match": "logger.info(`📋 Found ${tasks.length} pending tasks in database`"
        },
        {
          "line": 632,
          "content": "logger.debug(`📋 Found ${tasks.length} tasks from test reports`);",
          "type": "template_data",
          "match": "logger.debug(`📋 Found ${tasks.length} tasks from test reports`"
        },
        {
          "line": 641,
          "content": "logger.info(`📋 Found ${tasks.length} tasks from coverage report`);",
          "type": "template_data",
          "match": "logger.info(`📋 Found ${tasks.length} tasks from coverage report`"
        },
        {
          "line": 686,
          "content": "logger.debug('Failed to read test reports:', error.message);",
          "type": "direct_data",
          "match": "logger.debug('Failed to read test reports:', error.message"
        },
        {
          "line": 686,
          "content": "logger.debug('Failed to read test reports:', error.message);",
          "type": "variable_data",
          "match": "logger.debug('Failed to read test reports:', error"
        },
        {
          "line": 686,
          "content": "logger.debug('Failed to read test reports:', error.message);",
          "type": "error_object",
          "match": "logger.debug('Failed to read test reports:', error"
        },
        {
          "line": 706,
          "content": "logger.info('Failed to read coverage report:', error.message);",
          "type": "direct_data",
          "match": "logger.info('Failed to read coverage report:', error.message"
        },
        {
          "line": 706,
          "content": "logger.info('Failed to read coverage report:', error.message);",
          "type": "variable_data",
          "match": "logger.info('Failed to read coverage report:', error"
        },
        {
          "line": 706,
          "content": "logger.info('Failed to read coverage report:', error.message);",
          "type": "error_object",
          "match": "logger.info('Failed to read coverage report:', error"
        },
        {
          "line": 751,
          "content": "logger.debug('Failed to create tasks from test failures:', error.message);",
          "type": "direct_data",
          "match": "logger.debug('Failed to create tasks from test failures:', error.message"
        },
        {
          "line": 751,
          "content": "logger.debug('Failed to create tasks from test failures:', error.message);",
          "type": "variable_data",
          "match": "logger.debug('Failed to create tasks from test failures:', error"
        },
        {
          "line": 751,
          "content": "logger.debug('Failed to create tasks from test failures:', error.message);",
          "type": "error_object",
          "match": "logger.debug('Failed to create tasks from test failures:', error"
        },
        {
          "line": 1101,
          "content": "logger.info(`Found ${tasks.length} tasks (JSON format requested)`);",
          "type": "template_data",
          "match": "logger.info(`Found ${tasks.length} tasks (JSON format requested)`"
        }
      ]
    },
    "./backend/cli/TaskInteractiveCLI.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 148,
          "content": "logger.info(chalk.gray('Zero configuration, full automation\\n'));",
          "type": "direct_data",
          "match": "logger.info(chalk.gray('Zero configuration, full automation\\n'"
        },
        {
          "line": 148,
          "content": "logger.info(chalk.gray('Zero configuration, full automation\\n'));",
          "type": "variable_data",
          "match": "logger.info(chalk.gray('Zero configuration, full"
        }
      ]
    },
    "./backend/domain/services/WorkflowExecutionService.js": {
      "totalFindings": 12,
      "byType": {
        "direct_data": 6,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 52,
          "content": "this.logger.info('Starting workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('Starting workflow execution', {"
        },
        {
          "line": 76,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Step execution failed:', error"
        },
        {
          "line": 76,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Step execution failed:', error"
        },
        {
          "line": 76,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Step execution failed:', error"
        },
        {
          "line": 123,
          "content": "this.logger.info('Workflow execution completed', {",
          "type": "direct_data",
          "match": "logger.info('Workflow execution completed', {"
        },
        {
          "line": 133,
          "content": "this.logger.error('Workflow execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Workflow execution failed:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Workflow execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Workflow execution failed:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Workflow execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Workflow execution failed:', error"
        },
        {
          "line": 156,
          "content": "this.logger.info('Executing workflow step', {",
          "type": "direct_data",
          "match": "logger.info('Executing workflow step', {"
        },
        {
          "line": 209,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Step execution failed:', error"
        },
        {
          "line": 209,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Step execution failed:', error"
        },
        {
          "line": 209,
          "content": "this.logger.error('Step execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Step execution failed:', error"
        }
      ]
    },
    "./backend/domain/services/vscode/VSCodeChatHandler.js": {
      "totalFindings": 76,
      "byType": {
        "direct_data": 28,
        "variable_data": 28,
        "template_data": 12,
        "error_object": 7,
        "chat_data": 1
      },
      "findings": [
        {
          "line": 93,
          "content": "logger.info('Sending message to VSCode with extension:', extensionType);",
          "type": "direct_data",
          "match": "logger.info('Sending message to VSCode with extension:', extensionType"
        },
        {
          "line": 93,
          "content": "logger.info('Sending message to VSCode with extension:', extensionType);",
          "type": "variable_data",
          "match": "logger.info('Sending message to VSCode with extension:', extensionType"
        },
        {
          "line": 104,
          "content": "logger.info('On DevTools page, navigating to VS Code app...');",
          "type": "direct_data",
          "match": "logger.info('On DevTools page, navigating to VS Code app...'"
        },
        {
          "line": 104,
          "content": "logger.info('On DevTools page, navigating to VS Code app...');",
          "type": "variable_data",
          "match": "logger.info('On DevTools page, navigating"
        },
        {
          "line": 128,
          "content": "logger.info(`VSCode ready with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`VSCode ready with selector: ${selector}`"
        },
        {
          "line": 136,
          "content": "logger.debug(`VSCode not ready, attempt ${i + 1}/3`);",
          "type": "direct_data",
          "match": "logger.debug(`VSCode not ready, attempt ${i + 1}/3`"
        },
        {
          "line": 136,
          "content": "logger.debug(`VSCode not ready, attempt ${i + 1}/3`);",
          "type": "variable_data",
          "match": "logger.debug(`VSCode not ready, attempt"
        },
        {
          "line": 136,
          "content": "logger.debug(`VSCode not ready, attempt ${i + 1}/3`);",
          "type": "template_data",
          "match": "logger.debug(`VSCode not ready, attempt ${i + 1}/3`"
        },
        {
          "line": 138,
          "content": "logger.debug('VSCode not ready after 3 attempts, continuing anyway...');",
          "type": "direct_data",
          "match": "logger.debug('VSCode not ready after 3 attempts, continuing anyway...'"
        },
        {
          "line": 138,
          "content": "logger.debug('VSCode not ready after 3 attempts, continuing anyway...');",
          "type": "variable_data",
          "match": "logger.debug('VSCode not ready after 3 attempts, continuing"
        },
        {
          "line": 163,
          "content": "logger.info(`Found chat input with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found chat input with selector: ${selector}`"
        },
        {
          "line": 172,
          "content": "logger.info('No chat input found, trying to find any textarea...');",
          "type": "direct_data",
          "match": "logger.info('No chat input found, trying to find any textarea...'"
        },
        {
          "line": 172,
          "content": "logger.info('No chat input found, trying to find any textarea...');",
          "type": "variable_data",
          "match": "logger.info('No chat input found, trying"
        },
        {
          "line": 177,
          "content": "logger.info(`Using fallback textarea (${allTextareas.length} found)`);",
          "type": "template_data",
          "match": "logger.info(`Using fallback textarea (${allTextareas.length} found)`"
        },
        {
          "line": 208,
          "content": "logger.debug(`Attempting to type message (attempt ${retryCount + 1}/${maxRetries})`);",
          "type": "template_data",
          "match": "logger.debug(`Attempting to type message (attempt ${retryCount + 1}/${maxRetries})`"
        },
        {
          "line": 221,
          "content": "logger.info('Click strategy failed, trying focus strategy...');",
          "type": "direct_data",
          "match": "logger.info('Click strategy failed, trying focus strategy...'"
        },
        {
          "line": 221,
          "content": "logger.info('Click strategy failed, trying focus strategy...');",
          "type": "variable_data",
          "match": "logger.info('Click strategy failed, trying"
        },
        {
          "line": 234,
          "content": "logger.info('Focus strategy failed, trying fill strategy...');",
          "type": "direct_data",
          "match": "logger.info('Focus strategy failed, trying fill strategy...'"
        },
        {
          "line": 234,
          "content": "logger.info('Focus strategy failed, trying fill strategy...');",
          "type": "variable_data",
          "match": "logger.info('Focus strategy failed, trying"
        },
        {
          "line": 242,
          "content": "logger.info('Fill strategy failed, trying evaluate strategy...');",
          "type": "direct_data",
          "match": "logger.info('Fill strategy failed, trying evaluate strategy...'"
        },
        {
          "line": 242,
          "content": "logger.info('Fill strategy failed, trying evaluate strategy...');",
          "type": "variable_data",
          "match": "logger.info('Fill strategy failed, trying"
        },
        {
          "line": 264,
          "content": "logger.debug(`Error typing message (attempt ${retryCount}/${maxRetries}):`, error.message);",
          "type": "template_data",
          "match": "logger.debug(`Error typing message (attempt ${retryCount}/${maxRetries}):`"
        },
        {
          "line": 268,
          "content": "logger.info('Page was closed, getting fresh page reference...');",
          "type": "direct_data",
          "match": "logger.info('Page was closed, getting fresh page reference...'"
        },
        {
          "line": 268,
          "content": "logger.info('Page was closed, getting fresh page reference...');",
          "type": "variable_data",
          "match": "logger.info('Page was closed, getting"
        },
        {
          "line": 307,
          "content": "logger.error('Error sending message:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending message:', error"
        },
        {
          "line": 307,
          "content": "logger.error('Error sending message:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending message:', error"
        },
        {
          "line": 307,
          "content": "logger.error('Error sending message:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending message:', error"
        },
        {
          "line": 316,
          "content": "logger.info('Extracting chat history from VSCode with extension:', extensionType);",
          "type": "direct_data",
          "match": "logger.info('Extracting chat history from VSCode with extension:', extensionType"
        },
        {
          "line": 316,
          "content": "logger.info('Extracting chat history from VSCode with extension:', extensionType);",
          "type": "variable_data",
          "match": "logger.info('Extracting chat history from VSCode with extension:', extensionType"
        },
        {
          "line": 337,
          "content": "logger.info(`Found chat container with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found chat container with selector: ${selector}`"
        },
        {
          "line": 346,
          "content": "logger.info('No chat container found, returning empty history');",
          "type": "direct_data",
          "match": "logger.info('No chat container found, returning empty history'"
        },
        {
          "line": 346,
          "content": "logger.info('No chat container found, returning empty history');",
          "type": "variable_data",
          "match": "logger.info('No chat container found, returning"
        },
        {
          "line": 356,
          "content": "logger.info(`Found ${messageElements.length} messages with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${messageElements.length} messages with selector: ${selector}`"
        },
        {
          "line": 374,
          "content": "logger.info('Extracted', messages.length, 'messages');",
          "type": "direct_data",
          "match": "logger.info('Extracted', messages.length, 'messages'"
        },
        {
          "line": 374,
          "content": "logger.info('Extracted', messages.length, 'messages');",
          "type": "variable_data",
          "match": "logger.info('Extracted', messages"
        },
        {
          "line": 374,
          "content": "logger.info('Extracted', messages.length, 'messages');",
          "type": "chat_data",
          "match": "logger.info('Extracted', message"
        },
        {
          "line": 379,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "direct_data",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 379,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "variable_data",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 379,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "error_object",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 401,
          "content": "logger.info(`Extension ${extensionType} available with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Extension ${extensionType} available with selector: ${selector}`"
        },
        {
          "line": 412,
          "content": "logger.error('Error checking extension availability:', error);",
          "type": "direct_data",
          "match": "logger.error('Error checking extension availability:', error"
        },
        {
          "line": 412,
          "content": "logger.error('Error checking extension availability:', error);",
          "type": "variable_data",
          "match": "logger.error('Error checking extension availability:', error"
        },
        {
          "line": 412,
          "content": "logger.error('Error checking extension availability:', error);",
          "type": "error_object",
          "match": "logger.error('Error checking extension availability:', error"
        },
        {
          "line": 432,
          "content": "logger.info('Switching to extension:', extensionType);",
          "type": "direct_data",
          "match": "logger.info('Switching to extension:', extensionType"
        },
        {
          "line": 432,
          "content": "logger.info('Switching to extension:', extensionType);",
          "type": "variable_data",
          "match": "logger.info('Switching to extension:', extensionType"
        },
        {
          "line": 447,
          "content": "logger.info('Successfully switched to extension:', extensionType);",
          "type": "direct_data",
          "match": "logger.info('Successfully switched to extension:', extensionType"
        },
        {
          "line": 447,
          "content": "logger.info('Successfully switched to extension:', extensionType);",
          "type": "variable_data",
          "match": "logger.info('Successfully switched to extension:', extensionType"
        },
        {
          "line": 456,
          "content": "logger.error('Error switching to extension:', error);",
          "type": "direct_data",
          "match": "logger.error('Error switching to extension:', error"
        },
        {
          "line": 456,
          "content": "logger.error('Error switching to extension:', error);",
          "type": "variable_data",
          "match": "logger.error('Error switching to extension:', error"
        },
        {
          "line": 456,
          "content": "logger.error('Error switching to extension:', error);",
          "type": "error_object",
          "match": "logger.error('Error switching to extension:', error"
        },
        {
          "line": 482,
          "content": "logger.error('Error getting active extension:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting active extension:', error"
        },
        {
          "line": 482,
          "content": "logger.error('Error getting active extension:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting active extension:', error"
        },
        {
          "line": 482,
          "content": "logger.error('Error getting active extension:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting active extension:', error"
        },
        {
          "line": 505,
          "content": "logger.info('Chat panel not visible, trying to open it...');",
          "type": "direct_data",
          "match": "logger.info('Chat panel not visible, trying to open it...'"
        },
        {
          "line": 505,
          "content": "logger.info('Chat panel not visible, trying to open it...');",
          "type": "variable_data",
          "match": "logger.info('Chat panel not visible, trying"
        },
        {
          "line": 524,
          "content": "logger.info('Ctrl+Shift+I failed, trying alternative shortcuts...');",
          "type": "direct_data",
          "match": "logger.info('Ctrl+Shift+I failed, trying alternative shortcuts...'"
        },
        {
          "line": 524,
          "content": "logger.info('Ctrl+Shift+I failed, trying alternative shortcuts...');",
          "type": "variable_data",
          "match": "logger.info('Ctrl+Shift+I failed, trying"
        },
        {
          "line": 546,
          "content": "logger.info(`Chat panel opened using ${shortcut.description}`);",
          "type": "template_data",
          "match": "logger.info(`Chat panel opened using ${shortcut.description}`"
        },
        {
          "line": 550,
          "content": "logger.info(`${shortcut.description} failed`);",
          "type": "template_data",
          "match": "logger.info(`${shortcut.description} failed`"
        },
        {
          "line": 575,
          "content": "logger.info(`Chat panel opened by clicking ${buttonSelector}`);",
          "type": "template_data",
          "match": "logger.info(`Chat panel opened by clicking ${buttonSelector}`"
        },
        {
          "line": 584,
          "content": "logger.info('Could not open chat panel, continuing anyway...');",
          "type": "direct_data",
          "match": "logger.info('Could not open chat panel, continuing anyway...'"
        },
        {
          "line": 584,
          "content": "logger.info('Could not open chat panel, continuing anyway...');",
          "type": "variable_data",
          "match": "logger.info('Could not open chat panel, continuing"
        },
        {
          "line": 587,
          "content": "logger.error('Error ensuring chat panel is open:', error);",
          "type": "direct_data",
          "match": "logger.error('Error ensuring chat panel is open:', error"
        },
        {
          "line": 587,
          "content": "logger.error('Error ensuring chat panel is open:', error);",
          "type": "variable_data",
          "match": "logger.error('Error ensuring chat panel is open:', error"
        },
        {
          "line": 587,
          "content": "logger.error('Error ensuring chat panel is open:', error);",
          "type": "error_object",
          "match": "logger.error('Error ensuring chat panel is open:', error"
        },
        {
          "line": 601,
          "content": "logger.info('Available targets:', targets.length);",
          "type": "direct_data",
          "match": "logger.info('Available targets:', targets.length"
        },
        {
          "line": 601,
          "content": "logger.info('Available targets:', targets.length);",
          "type": "variable_data",
          "match": "logger.info('Available targets:', targets"
        },
        {
          "line": 607,
          "content": "logger.info('Target URL:', url);",
          "type": "direct_data",
          "match": "logger.info('Target URL:', url"
        },
        {
          "line": 607,
          "content": "logger.info('Target URL:', url);",
          "type": "variable_data",
          "match": "logger.info('Target URL:', url"
        },
        {
          "line": 622,
          "content": "logger.info('Found VS Code app target, navigating...');",
          "type": "direct_data",
          "match": "logger.info('Found VS Code app target, navigating...'"
        },
        {
          "line": 622,
          "content": "logger.info('Found VS Code app target, navigating...');",
          "type": "variable_data",
          "match": "logger.info('Found VS Code app target, navigating"
        },
        {
          "line": 632,
          "content": "logger.info('No VS Code app target found, staying on current page');",
          "type": "direct_data",
          "match": "logger.info('No VS Code app target found, staying on current page'"
        },
        {
          "line": 632,
          "content": "logger.info('No VS Code app target found, staying on current page');",
          "type": "variable_data",
          "match": "logger.info('No VS Code app target found, staying"
        },
        {
          "line": 635,
          "content": "logger.error('Error navigating to VS Code app:', error);",
          "type": "direct_data",
          "match": "logger.error('Error navigating to VS Code app:', error"
        },
        {
          "line": 635,
          "content": "logger.error('Error navigating to VS Code app:', error);",
          "type": "variable_data",
          "match": "logger.error('Error navigating to VS Code app:', error"
        },
        {
          "line": 635,
          "content": "logger.error('Error navigating to VS Code app:', error);",
          "type": "error_object",
          "match": "logger.error('Error navigating to VS Code app:', error"
        }
      ]
    },
    "./backend/domain/services/vscode/VSCodeWorkspaceDetector.js": {
      "totalFindings": 37,
      "byType": {
        "direct_data": 13,
        "variable_data": 13,
        "ide_data": 6,
        "error_object": 5
      },
      "findings": [
        {
          "line": 23,
          "content": "logger.info('Detecting workspace path for VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Detecting workspace path for VSCode on port', port"
        },
        {
          "line": 23,
          "content": "logger.info('Detecting workspace path for VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Detecting workspace path for VSCode on port', port"
        },
        {
          "line": 23,
          "content": "logger.info('Detecting workspace path for VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Detecting workspace path for VSCode on port', port"
        },
        {
          "line": 44,
          "content": "logger.info('Detected workspace name:', workspaceName);",
          "type": "direct_data",
          "match": "logger.info('Detected workspace name:', workspaceName"
        },
        {
          "line": 44,
          "content": "logger.info('Detected workspace name:', workspaceName);",
          "type": "variable_data",
          "match": "logger.info('Detected workspace name:', workspaceName"
        },
        {
          "line": 44,
          "content": "logger.info('Detected workspace name:', workspaceName);",
          "type": "ide_data",
          "match": "logger.info('Detected workspace name:', workspace"
        },
        {
          "line": 50,
          "content": "logger.info('Extracted workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Extracted workspace path:', workspacePath"
        },
        {
          "line": 50,
          "content": "logger.info('Extracted workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Extracted workspace path:', workspacePath"
        },
        {
          "line": 50,
          "content": "logger.info('Extracted workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Extracted workspace path:', workspace"
        },
        {
          "line": 58,
          "content": "logger.error('Error detecting VSCode workspace path:', error);",
          "type": "direct_data",
          "match": "logger.error('Error detecting VSCode workspace path:', error"
        },
        {
          "line": 58,
          "content": "logger.error('Error detecting VSCode workspace path:', error);",
          "type": "variable_data",
          "match": "logger.error('Error detecting VSCode workspace path:', error"
        },
        {
          "line": 58,
          "content": "logger.error('Error detecting VSCode workspace path:', error);",
          "type": "error_object",
          "match": "logger.error('Error detecting VSCode workspace path:', error"
        },
        {
          "line": 138,
          "content": "logger.info('Found first item in file explorer:', firstItem);",
          "type": "direct_data",
          "match": "logger.info('Found first item in file explorer:', firstItem"
        },
        {
          "line": 138,
          "content": "logger.info('Found first item in file explorer:', firstItem);",
          "type": "variable_data",
          "match": "logger.info('Found first item in file explorer:', firstItem"
        },
        {
          "line": 145,
          "content": "logger.error('Error extracting path from file explorer:', error);",
          "type": "direct_data",
          "match": "logger.error('Error extracting path from file explorer:', error"
        },
        {
          "line": 145,
          "content": "logger.error('Error extracting path from file explorer:', error);",
          "type": "variable_data",
          "match": "logger.error('Error extracting path from file explorer:', error"
        },
        {
          "line": 145,
          "content": "logger.error('Error extracting path from file explorer:', error);",
          "type": "error_object",
          "match": "logger.error('Error extracting path from file explorer:', error"
        },
        {
          "line": 157,
          "content": "logger.info('Getting workspace info for VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Getting workspace info for VSCode on port', port"
        },
        {
          "line": 157,
          "content": "logger.info('Getting workspace info for VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Getting workspace info for VSCode on port', port"
        },
        {
          "line": 157,
          "content": "logger.info('Getting workspace info for VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Getting workspace info for VSCode on port', port"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 198,
          "content": "logger.info('Getting open files for VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Getting open files for VSCode on port', port"
        },
        {
          "line": 198,
          "content": "logger.info('Getting open files for VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Getting open files for VSCode on port', port"
        },
        {
          "line": 198,
          "content": "logger.info('Getting open files for VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Getting open files for VSCode on port', port"
        },
        {
          "line": 218,
          "content": "logger.info('Found', openFiles.length, 'open files');",
          "type": "direct_data",
          "match": "logger.info('Found', openFiles.length, 'open files'"
        },
        {
          "line": 218,
          "content": "logger.info('Found', openFiles.length, 'open files');",
          "type": "variable_data",
          "match": "logger.info('Found', openFiles"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting open files:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting open files:', error"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting open files:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting open files:', error"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting open files:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting open files:', error"
        },
        {
          "line": 235,
          "content": "logger.info('Getting status for VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Getting status for VSCode on port', port"
        },
        {
          "line": 235,
          "content": "logger.info('Getting status for VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Getting status for VSCode on port', port"
        },
        {
          "line": 235,
          "content": "logger.info('Getting status for VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Getting status for VSCode on port', port"
        },
        {
          "line": 271,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting VSCode status:', error"
        },
        {
          "line": 271,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting VSCode status:', error"
        },
        {
          "line": 271,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting VSCode status:', error"
        }
      ]
    },
    "./backend/domain/services/WorkflowGitService.js": {
      "totalFindings": 41,
      "byType": {
        "template_data": 15,
        "direct_data": 21,
        "variable_data": 4,
        "object_data": 1
      },
      "findings": [
        {
          "line": 42,
          "content": "this.logger.info(`Branch ${branchName} exists`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} exists`"
        },
        {
          "line": 59,
          "content": "this.logger.error(`Error: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error: ${error.message}`"
        },
        {
          "line": 83,
          "content": "this.logger.info('WorkflowGitService: Enhanced branch creation completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Enhanced branch creation completed', {"
        },
        {
          "line": 93,
          "content": "this.logger.error('WorkflowGitService: Enhanced branch creation failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Enhanced branch creation failed', {"
        },
        {
          "line": 116,
          "content": "this.logger.info('WorkflowGitService: Creating workflow branch', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Creating workflow branch', {"
        },
        {
          "line": 129,
          "content": "this.logger.info(`Current branch: ${currentBranch}`);",
          "type": "template_data",
          "match": "logger.info(`Current branch: ${currentBranch}`"
        },
        {
          "line": 139,
          "content": "this.logger.info(`New current branch: ${newCurrentBranch}`);",
          "type": "template_data",
          "match": "logger.info(`New current branch: ${newCurrentBranch}`"
        },
        {
          "line": 145,
          "content": "this.logger.info(`Successfully created and checked out branch: ${branchName}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully created and checked out branch: ${branchName}`"
        },
        {
          "line": 148,
          "content": "this.logger.error('WorkflowGitService: Git operation failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Git operation failed', {"
        },
        {
          "line": 156,
          "content": "this.logger.warn('WorkflowGitService: No GitService available, skipping actual Git operations');",
          "type": "direct_data",
          "match": "logger.warn('WorkflowGitService: No GitService available, skipping actual Git operations'"
        },
        {
          "line": 156,
          "content": "this.logger.warn('WorkflowGitService: No GitService available, skipping actual Git operations');",
          "type": "variable_data",
          "match": "logger.warn('WorkflowGitService: No GitService available, skipping"
        },
        {
          "line": 189,
          "content": "this.logger.error('WorkflowGitService: Failed to create workflow branch', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Failed to create workflow branch', {"
        },
        {
          "line": 209,
          "content": "this.logger.info('DEBUG TaskType:', { TaskType, taskTypeValue });",
          "type": "direct_data",
          "match": "logger.info('DEBUG TaskType:', { TaskType, taskTypeValue }"
        },
        {
          "line": 209,
          "content": "this.logger.info('DEBUG TaskType:', { TaskType, taskTypeValue });",
          "type": "object_data",
          "match": "logger.info('DEBUG TaskType:', { TaskType, taskTypeValue }"
        },
        {
          "line": 353,
          "content": "this.logger.info(`Branch ${branchName} operation requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} operation requested - handled by Playwright`"
        },
        {
          "line": 387,
          "content": "this.logger.info(`Branch ${branchName} configuration requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} configuration requested - handled by Playwright`"
        },
        {
          "line": 398,
          "content": "this.logger.info(`Branch ${branchName} protection requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} protection requested - handled by Playwright`"
        },
        {
          "line": 409,
          "content": "this.logger.info(`Branch ${branchName} protection requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} protection requested - handled by Playwright`"
        },
        {
          "line": 420,
          "content": "this.logger.info(`Branch ${branchName} protection requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} protection requested - handled by Playwright`"
        },
        {
          "line": 432,
          "content": "this.logger.info(`Branch ${branchName} auto-merge requested - handled by Playwright`);",
          "type": "template_data",
          "match": "logger.info(`Branch ${branchName} auto-merge requested - handled by Playwright`"
        },
        {
          "line": 456,
          "content": "this.logger.info('WorkflowGitService: Enhanced workflow completion completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Enhanced workflow completion completed', {"
        },
        {
          "line": 466,
          "content": "this.logger.error('WorkflowGitService: Enhanced workflow completion failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Enhanced workflow completion failed', {"
        },
        {
          "line": 490,
          "content": "this.logger.info('WorkflowGitService: Completing workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Completing workflow', {"
        },
        {
          "line": 505,
          "content": "this.logger.info(`Current branch before completion: ${currentBranch}`);",
          "type": "template_data",
          "match": "logger.info(`Current branch before completion: ${currentBranch}`"
        },
        {
          "line": 509,
          "content": "this.logger.info(`Committing changes on branch: ${branchName}`);",
          "type": "template_data",
          "match": "logger.info(`Committing changes on branch: ${branchName}`"
        },
        {
          "line": 522,
          "content": "this.logger.info(`Auto-merging to ${strategy.mergeTarget}`);",
          "type": "template_data",
          "match": "logger.info(`Auto-merging to ${strategy.mergeTarget}`"
        },
        {
          "line": 532,
          "content": "this.logger.info(`Auto-merge completed:`, mergeResult);",
          "type": "direct_data",
          "match": "logger.info(`Auto-merge completed:`, mergeResult"
        },
        {
          "line": 532,
          "content": "this.logger.info(`Auto-merge completed:`, mergeResult);",
          "type": "variable_data",
          "match": "logger.info(`Auto-merge completed:`, mergeResult"
        },
        {
          "line": 534,
          "content": "this.logger.info(`Auto-merge disabled, keeping branch: ${branchName}`);",
          "type": "direct_data",
          "match": "logger.info(`Auto-merge disabled, keeping branch: ${branchName}`"
        },
        {
          "line": 534,
          "content": "this.logger.info(`Auto-merge disabled, keeping branch: ${branchName}`);",
          "type": "variable_data",
          "match": "logger.info(`Auto-merge disabled, keeping"
        },
        {
          "line": 534,
          "content": "this.logger.info(`Auto-merge disabled, keeping branch: ${branchName}`);",
          "type": "template_data",
          "match": "logger.info(`Auto-merge disabled, keeping branch: ${branchName}`"
        },
        {
          "line": 543,
          "content": "this.logger.error('WorkflowGitService: Git operation failed during completion', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Git operation failed during completion', {"
        },
        {
          "line": 556,
          "content": "this.logger.warn('WorkflowGitService: No GitService available, skipping Git operations');",
          "type": "direct_data",
          "match": "logger.warn('WorkflowGitService: No GitService available, skipping Git operations'"
        },
        {
          "line": 556,
          "content": "this.logger.warn('WorkflowGitService: No GitService available, skipping Git operations');",
          "type": "variable_data",
          "match": "logger.warn('WorkflowGitService: No GitService available, skipping"
        },
        {
          "line": 596,
          "content": "this.logger.error('WorkflowGitService: Failed to complete workflow', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Failed to complete workflow', {"
        },
        {
          "line": 648,
          "content": "this.logger.info('WorkflowGitService: Rolling back workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Rolling back workflow', {"
        },
        {
          "line": 681,
          "content": "this.logger.error('WorkflowGitService: Failed to rollback workflow', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Failed to rollback workflow', {"
        },
        {
          "line": 701,
          "content": "this.logger.info('WorkflowGitService: Merging to target branch', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Merging to target branch', {"
        },
        {
          "line": 742,
          "content": "this.logger.error('WorkflowGitService: Failed to merge to target branch', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Failed to merge to target branch', {"
        },
        {
          "line": 785,
          "content": "this.logger.info('WorkflowGitService: Enhanced pull request creation completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowGitService: Enhanced pull request creation completed', {"
        },
        {
          "line": 795,
          "content": "this.logger.error('WorkflowGitService: Enhanced pull request creation failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowGitService: Enhanced pull request creation failed', {"
        }
      ]
    },
    "./backend/domain/services/TestCorrectionService.js": {
      "totalFindings": 25,
      "byType": {
        "direct_data": 19,
        "object_data": 5,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info('Starting analysis of failing tests', { count: testResults.failing?.length || 0 });",
          "type": "direct_data",
          "match": "logger.info('Starting analysis of failing tests', { count: testResults.failing?.length || 0 }"
        },
        {
          "line": 33,
          "content": "logger.info('Starting analysis of failing tests', { count: testResults.failing?.length || 0 });",
          "type": "object_data",
          "match": "logger.info('Starting analysis of failing tests', { count: testResults.failing?.length || 0 }"
        },
        {
          "line": 52,
          "content": "logger.debug('Created correction task', {",
          "type": "direct_data",
          "match": "logger.debug('Created correction task', {"
        },
        {
          "line": 58,
          "content": "logger.error('Failed to analyze test', {",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze test', {"
        },
        {
          "line": 66,
          "content": "logger.info('Completed analysis of failing tests', {",
          "type": "direct_data",
          "match": "logger.info('Completed analysis of failing tests', { "
        },
        {
          "line": 78,
          "content": "logger.info('Starting analysis of legacy tests', { count: testResults.legacy?.length || 0 });",
          "type": "direct_data",
          "match": "logger.info('Starting analysis of legacy tests', { count: testResults.legacy?.length || 0 }"
        },
        {
          "line": 78,
          "content": "logger.info('Starting analysis of legacy tests', { count: testResults.legacy?.length || 0 });",
          "type": "object_data",
          "match": "logger.info('Starting analysis of legacy tests', { count: testResults.legacy?.length || 0 }"
        },
        {
          "line": 95,
          "content": "logger.debug('Created legacy correction task', {",
          "type": "direct_data",
          "match": "logger.debug('Created legacy correction task', {"
        },
        {
          "line": 100,
          "content": "logger.error('Failed to analyze legacy test', {",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze legacy test', {"
        },
        {
          "line": 108,
          "content": "logger.info('Completed analysis of legacy tests', { total: corrections.length });",
          "type": "direct_data",
          "match": "logger.info('Completed analysis of legacy tests', { total: corrections.length }"
        },
        {
          "line": 108,
          "content": "logger.info('Completed analysis of legacy tests', { total: corrections.length });",
          "type": "object_data",
          "match": "logger.info('Completed analysis of legacy tests', { total: corrections.length }"
        },
        {
          "line": 116,
          "content": "logger.info('Starting analysis of complex tests', { count: testResults.complex?.length || 0 });",
          "type": "direct_data",
          "match": "logger.info('Starting analysis of complex tests', { count: testResults.complex?.length || 0 }"
        },
        {
          "line": 116,
          "content": "logger.info('Starting analysis of complex tests', { count: testResults.complex?.length || 0 });",
          "type": "object_data",
          "match": "logger.info('Starting analysis of complex tests', { count: testResults.complex?.length || 0 }"
        },
        {
          "line": 134,
          "content": "logger.debug('Created complex test correction task', {",
          "type": "direct_data",
          "match": "logger.debug('Created complex test correction task', {"
        },
        {
          "line": 140,
          "content": "logger.error('Failed to analyze complex test', {",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze complex test', {"
        },
        {
          "line": 148,
          "content": "logger.info('Completed analysis of complex tests', { total: corrections.length });",
          "type": "direct_data",
          "match": "logger.info('Completed analysis of complex tests', { total: corrections.length }"
        },
        {
          "line": 148,
          "content": "logger.info('Completed analysis of complex tests', { total: corrections.length });",
          "type": "object_data",
          "match": "logger.info('Completed analysis of complex tests', { total: corrections.length }"
        },
        {
          "line": 159,
          "content": "logger.info('Starting test correction', {",
          "type": "direct_data",
          "match": "logger.info('Starting test correction', {"
        },
        {
          "line": 181,
          "content": "logger.info('Completed test correction', {",
          "type": "direct_data",
          "match": "logger.info('Completed test correction', {"
        },
        {
          "line": 203,
          "content": "logger.warn('Test correction failed, will retry', {",
          "type": "direct_data",
          "match": "logger.warn('Test correction failed, will retry', {"
        },
        {
          "line": 203,
          "content": "logger.warn('Test correction failed, will retry', {",
          "type": "variable_data",
          "match": "logger.warn('Test correction failed, will"
        },
        {
          "line": 216,
          "content": "logger.error('Test correction failed permanently', {",
          "type": "direct_data",
          "match": "logger.error('Test correction failed permanently', {"
        },
        {
          "line": 249,
          "content": "logger.info('Starting batch test correction', {",
          "type": "direct_data",
          "match": "logger.info('Starting batch test correction', {"
        },
        {
          "line": 280,
          "content": "logger.error('Unexpected error in test correction', {",
          "type": "direct_data",
          "match": "logger.error('Unexpected error in test correction', {"
        },
        {
          "line": 297,
          "content": "logger.info('Completed batch test correction', {",
          "type": "direct_data",
          "match": "logger.info('Completed batch test correction', {"
        }
      ]
    },
    "./backend/domain/services/IDEMirrorService.js": {
      "totalFindings": 54,
      "byType": {
        "template_data": 28,
        "direct_data": 13,
        "variable_data": 12,
        "error_object": 1
      },
      "findings": [
        {
          "line": 35,
          "content": "logger.info(`🔌 Connecting to IDE on port ${activeIDE.port}...`);",
          "type": "template_data",
          "match": "logger.info(`🔌 Connecting to IDE on port ${activeIDE.port}...`"
        },
        {
          "line": 38,
          "content": "logger.info(`✅ Connected to IDE: Port ${activeIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to IDE: Port ${activeIDE.port}`"
        },
        {
          "line": 52,
          "content": "logger.info('⚠️ Page is closed, reconnecting...');",
          "type": "direct_data",
          "match": "logger.info('⚠️ Page is closed, reconnecting...'"
        },
        {
          "line": 52,
          "content": "logger.info('⚠️ Page is closed, reconnecting...');",
          "type": "variable_data",
          "match": "logger.info('⚠️ Page is closed, reconnecting"
        },
        {
          "line": 93,
          "content": "logger.info('✅ Extracted CSS from Electron URL:', sheet.href);",
          "type": "direct_data",
          "match": "logger.info('✅ Extracted CSS from Electron URL:', sheet.href"
        },
        {
          "line": 93,
          "content": "logger.info('✅ Extracted CSS from Electron URL:', sheet.href);",
          "type": "variable_data",
          "match": "logger.info('✅ Extracted CSS from Electron URL:', sheet"
        },
        {
          "line": 96,
          "content": "logger.info('⚠️ Could not extract CSS from:', sheet.href);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Could not extract CSS from:', sheet.href"
        },
        {
          "line": 96,
          "content": "logger.info('⚠️ Could not extract CSS from:', sheet.href);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Could not extract CSS from:', sheet"
        },
        {
          "line": 241,
          "content": "logger.info(`📸✅ Captured IDE: Screenshot + ${totalElements} clickable elements`);",
          "type": "template_data",
          "match": "logger.info(`📸✅ Captured IDE: Screenshot + ${totalElements} clickable elements`"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Failed to capture IDE state:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to capture IDE state:', error.message"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Failed to capture IDE state:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to capture IDE state:', error"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Failed to capture IDE state:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to capture IDE state:', error"
        },
        {
          "line": 246,
          "content": "logger.debug('🔄 Browser connection lost, attempting reconnect...');",
          "type": "direct_data",
          "match": "logger.debug('🔄 Browser connection lost, attempting reconnect...'"
        },
        {
          "line": 246,
          "content": "logger.debug('🔄 Browser connection lost, attempting reconnect...');",
          "type": "variable_data",
          "match": "logger.debug('🔄 Browser connection lost, attempting"
        },
        {
          "line": 251,
          "content": "logger.error('❌ Reconnect failed:', reconnectError.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Reconnect failed:', reconnectError.message"
        },
        {
          "line": 251,
          "content": "logger.error('❌ Reconnect failed:', reconnectError.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Reconnect failed:', reconnectError"
        },
        {
          "line": 266,
          "content": "logger.info(`🖱️ Clicking element on port ${activeIDE.port}: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`🖱️ Clicking element on port ${activeIDE.port}: ${selector}`"
        },
        {
          "line": 275,
          "content": "logger.info(`✅ Clicked element by selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Clicked element by selector: ${selector}`"
        },
        {
          "line": 283,
          "content": "logger.info(`✅ Clicked at coordinates: ${coordinates.x}, ${coordinates.y}`);",
          "type": "direct_data",
          "match": "logger.info(`✅ Clicked at coordinates: ${coordinates.x}, ${coordinates.y}`"
        },
        {
          "line": 283,
          "content": "logger.info(`✅ Clicked at coordinates: ${coordinates.x}, ${coordinates.y}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Clicked at coordinates: ${coordinates.x}, ${coordinates.y}`"
        },
        {
          "line": 289,
          "content": "logger.error(`❌ Failed to click element: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to click element: ${error.message}`"
        },
        {
          "line": 311,
          "content": "logger.debug('🔄 Page closed, attempting reconnect...');",
          "type": "direct_data",
          "match": "logger.debug('🔄 Page closed, attempting reconnect...'"
        },
        {
          "line": 311,
          "content": "logger.debug('🔄 Page closed, attempting reconnect...');",
          "type": "variable_data",
          "match": "logger.debug('🔄 Page closed, attempting"
        },
        {
          "line": 322,
          "content": "logger.info(`⌨️ Sending special key: ${key}`);",
          "type": "template_data",
          "match": "logger.info(`⌨️ Sending special key: ${key}`"
        },
        {
          "line": 345,
          "content": "logger.info(`✅ Sent special key via CDP: ${key}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Sent special key via CDP: ${key}`"
        },
        {
          "line": 351,
          "content": "logger.info(`⌨️ Typing \"${text.substring(0, 50)}...\" ${selector ? `in ${selector}` : 'at cursor'}`);",
          "type": "direct_data",
          "match": "logger.info(`⌨️ Typing \"${text.substring(0, 50"
        },
        {
          "line": 351,
          "content": "logger.info(`⌨️ Typing \"${text.substring(0, 50)}...\" ${selector ? `in ${selector}` : 'at cursor'}`);",
          "type": "variable_data",
          "match": "logger.info(`⌨️ Typing \"${text.substring(0, 50"
        },
        {
          "line": 351,
          "content": "logger.info(`⌨️ Typing \"${text.substring(0, 50)}...\" ${selector ? `in ${selector}` : 'at cursor'}`);",
          "type": "template_data",
          "match": "logger.info(`⌨️ Typing \"${text.substring(0, 50)}...\" ${selector ? `in ${selector}`"
        },
        {
          "line": 361,
          "content": "logger.info(`🎯 Focusing before typing in: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Focusing before typing in: ${selector}`"
        },
        {
          "line": 372,
          "content": "logger.info(`✅ Typed text: ${text.substring(0, 50)}...`);",
          "type": "direct_data",
          "match": "logger.info(`✅ Typed text: ${text.substring(0, 50"
        },
        {
          "line": 372,
          "content": "logger.info(`✅ Typed text: ${text.substring(0, 50)}...`);",
          "type": "variable_data",
          "match": "logger.info(`✅ Typed text: ${text.substring(0, 50"
        },
        {
          "line": 372,
          "content": "logger.info(`✅ Typed text: ${text.substring(0, 50)}...`);",
          "type": "template_data",
          "match": "logger.info(`✅ Typed text: ${text.substring(0, 50)}...`"
        },
        {
          "line": 378,
          "content": "logger.error(`❌ Failed to type: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to type: ${error.message}`"
        },
        {
          "line": 466,
          "content": "logger.info(`🎯 Targeting input element: ${chatSelector} (${elementInfo.type})`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Targeting input element: ${chatSelector} (${elementInfo.type})`"
        },
        {
          "line": 496,
          "content": "logger.info(`✅ Successfully focused: ${chatSelector}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully focused: ${chatSelector}`"
        },
        {
          "line": 508,
          "content": "logger.debug(`⚠️ Focus attempt failed for ${chatSelector}: ${e.message}`);",
          "type": "template_data",
          "match": "logger.debug(`⚠️ Focus attempt failed for ${chatSelector}: ${e.message}`"
        },
        {
          "line": 523,
          "content": "logger.info(`⚠️ Standard focus failed for ${selector}, trying click`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ Standard focus failed for ${selector}, trying click`"
        },
        {
          "line": 523,
          "content": "logger.info(`⚠️ Standard focus failed for ${selector}, trying click`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ Standard focus failed for ${selector}, trying"
        },
        {
          "line": 523,
          "content": "logger.info(`⚠️ Standard focus failed for ${selector}, trying click`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Standard focus failed for ${selector}, trying click`"
        },
        {
          "line": 527,
          "content": "logger.info(`⚠️ Click also failed: ${clickError.message}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Click also failed: ${clickError.message}`"
        },
        {
          "line": 539,
          "content": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50)}...\"`);",
          "type": "direct_data",
          "match": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50"
        },
        {
          "line": 539,
          "content": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50)}...\"`);",
          "type": "variable_data",
          "match": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50"
        },
        {
          "line": 539,
          "content": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50)}...\"`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Focus and type in ${selector}: \"${text.substring(0, 50)}...\"`"
        },
        {
          "line": 557,
          "content": "logger.info(`✅ Focused and typed in ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Focused and typed in ${selector}`"
        },
        {
          "line": 561,
          "content": "logger.error(`❌ Focus and type failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Focus and type failed: ${error.message}`"
        },
        {
          "line": 572,
          "content": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50)}...\"`);",
          "type": "direct_data",
          "match": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50"
        },
        {
          "line": 572,
          "content": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50)}...\"`);",
          "type": "variable_data",
          "match": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50"
        },
        {
          "line": 572,
          "content": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50)}...\"`);",
          "type": "template_data",
          "match": "logger.info(`💬 Sending chat message: \"${message.substring(0, 50)}...\"`"
        },
        {
          "line": 592,
          "content": "logger.info(`✅ Chat message sent via ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Chat message sent via ${selector}`"
        },
        {
          "line": 607,
          "content": "logger.error(`❌ Failed to send chat message: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to send chat message: ${error.message}`"
        },
        {
          "line": 620,
          "content": "logger.info(`✅ Sent keys: ${keys}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Sent keys: ${keys}`"
        },
        {
          "line": 622,
          "content": "logger.error(`❌ Failed to send keys: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to send keys: ${error.message}`"
        },
        {
          "line": 628,
          "content": "logger.info(`🔄 Switching to IDE on port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`🔄 Switching to IDE on port ${port}...`"
        },
        {
          "line": 631,
          "content": "logger.info(`✅ Switched to IDE on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Switched to IDE on port ${port}`"
        }
      ]
    },
    "./backend/domain/services/PerformanceService.js": {
      "totalFindings": 28,
      "byType": {
        "direct_data": 9,
        "variable_data": 9,
        "error_object": 8,
        "template_data": 2
      },
      "findings": [
        {
          "line": 28,
          "content": "this.logger.info(`Recent performance analysis found, skipping`);",
          "type": "direct_data",
          "match": "logger.info(`Recent performance analysis found, skipping`"
        },
        {
          "line": 28,
          "content": "this.logger.info(`Recent performance analysis found, skipping`);",
          "type": "variable_data",
          "match": "logger.info(`Recent performance analysis found, skipping"
        },
        {
          "line": 63,
          "content": "this.logger.error(`Performance analysis failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Performance analysis failed:`, error.message"
        },
        {
          "line": 63,
          "content": "this.logger.error(`Performance analysis failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Performance analysis failed:`, error"
        },
        {
          "line": 63,
          "content": "this.logger.error(`Performance analysis failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Performance analysis failed:`, error"
        },
        {
          "line": 78,
          "content": "this.logger.error(`Build performance analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Build performance analysis failed:`, error"
        },
        {
          "line": 78,
          "content": "this.logger.error(`Build performance analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Build performance analysis failed:`, error"
        },
        {
          "line": 78,
          "content": "this.logger.error(`Build performance analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Build performance analysis failed:`, error"
        },
        {
          "line": 92,
          "content": "this.logger.error(`Bundle size analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Bundle size analysis failed:`, error"
        },
        {
          "line": 92,
          "content": "this.logger.error(`Bundle size analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Bundle size analysis failed:`, error"
        },
        {
          "line": 92,
          "content": "this.logger.error(`Bundle size analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Bundle size analysis failed:`, error"
        },
        {
          "line": 106,
          "content": "this.logger.error(`Runtime performance analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Runtime performance analysis failed:`, error"
        },
        {
          "line": 106,
          "content": "this.logger.error(`Runtime performance analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Runtime performance analysis failed:`, error"
        },
        {
          "line": 106,
          "content": "this.logger.error(`Runtime performance analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Runtime performance analysis failed:`, error"
        },
        {
          "line": 120,
          "content": "this.logger.error(`Optimization identification failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Optimization identification failed:`, error"
        },
        {
          "line": 120,
          "content": "this.logger.error(`Optimization identification failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Optimization identification failed:`, error"
        },
        {
          "line": 120,
          "content": "this.logger.error(`Optimization identification failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Optimization identification failed:`, error"
        },
        {
          "line": 134,
          "content": "this.logger.error(`Bottleneck identification failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Bottleneck identification failed:`, error"
        },
        {
          "line": 134,
          "content": "this.logger.error(`Bottleneck identification failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Bottleneck identification failed:`, error"
        },
        {
          "line": 134,
          "content": "this.logger.error(`Bottleneck identification failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Bottleneck identification failed:`, error"
        },
        {
          "line": 148,
          "content": "this.logger.error(`Performance recommendation generation failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Performance recommendation generation failed:`, error"
        },
        {
          "line": 148,
          "content": "this.logger.error(`Performance recommendation generation failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Performance recommendation generation failed:`, error"
        },
        {
          "line": 148,
          "content": "this.logger.error(`Performance recommendation generation failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Performance recommendation generation failed:`, error"
        },
        {
          "line": 266,
          "content": "this.logger.warn(`Failed to check existing analysis:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to check existing analysis:`, error.message"
        },
        {
          "line": 266,
          "content": "this.logger.warn(`Failed to check existing analysis:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to check existing analysis:`, error"
        },
        {
          "line": 266,
          "content": "this.logger.warn(`Failed to check existing analysis:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to check existing analysis:`, error"
        },
        {
          "line": 285,
          "content": "this.logger.info(`Analysis is recent (${analysisType}), considering skip`);",
          "type": "template_data",
          "match": "logger.info(`Analysis is recent (${analysisType}), considering skip`"
        },
        {
          "line": 292,
          "content": "this.logger.info(`Analysis is older than 24 hours (${analysisType}), forcing refresh`);",
          "type": "template_data",
          "match": "logger.info(`Analysis is older than 24 hours (${analysisType}), forcing refresh`"
        }
      ]
    },
    "./backend/domain/services/chat/ChatMessageHandler.js": {
      "totalFindings": 26,
      "byType": {
        "template_data": 11,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 3
      },
      "findings": [
        {
          "line": 13,
          "content": "logger.warn(`No chat selectors found for IDE type: ${ideType}`);",
          "type": "template_data",
          "match": "logger.warn(`No chat selectors found for IDE type: ${ideType}`"
        },
        {
          "line": 45,
          "content": "logger.error(`Error sending message to ${this.ideType}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error sending message to ${this.ideType}:`, error.message"
        },
        {
          "line": 45,
          "content": "logger.error(`Error sending message to ${this.ideType}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error sending message to ${this.ideType}:`, error"
        },
        {
          "line": 45,
          "content": "logger.error(`Error sending message to ${this.ideType}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error sending message to ${this.ideType}:`"
        },
        {
          "line": 45,
          "content": "logger.error(`Error sending message to ${this.ideType}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error sending message to ${this.ideType}:`, error"
        },
        {
          "line": 59,
          "content": "logger.info(`⏳ [ChatMessageHandler] Waiting for AI to finish editing in ${this.ideType}...`);",
          "type": "template_data",
          "match": "logger.info(`⏳ [ChatMessageHandler] Waiting for AI to finish editing in ${this.ideType}...`"
        },
        {
          "line": 71,
          "content": "logger.error(`No page available for ${this.ideType}`);",
          "type": "template_data",
          "match": "logger.error(`No page available for ${this.ideType}`"
        },
        {
          "line": 84,
          "content": "logger.info(`📊 [ChatMessageHandler] AI response stable in ${this.ideType}: ${currentMessageCount} messages (${stableCount}/${requiredStableChecks})`);",
          "type": "template_data",
          "match": "logger.info(`📊 [ChatMessageHandler] AI response stable in ${this.ideType}: ${currentMessageCount} messages (${stableCount}/${requiredStableChecks})`"
        },
        {
          "line": 90,
          "content": "logger.info(`✅ [ChatMessageHandler] AI finished editing in ${this.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`✅ [ChatMessageHandler] AI finished editing in ${this.ideType}`"
        },
        {
          "line": 103,
          "content": "logger.info(`📝 [ChatMessageHandler] AI still working in ${this.ideType}: ${currentMessageCount} messages`);",
          "type": "template_data",
          "match": "logger.info(`📝 [ChatMessageHandler] AI still working in ${this.ideType}: ${currentMessageCount} messages`"
        },
        {
          "line": 112,
          "content": "logger.error(`Error checking AI response in ${this.ideType}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error checking AI response in ${this.ideType}:`, error.message"
        },
        {
          "line": 112,
          "content": "logger.error(`Error checking AI response in ${this.ideType}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error checking AI response in ${this.ideType}:`, error"
        },
        {
          "line": 112,
          "content": "logger.error(`Error checking AI response in ${this.ideType}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error checking AI response in ${this.ideType}:`"
        },
        {
          "line": 112,
          "content": "logger.error(`Error checking AI response in ${this.ideType}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error checking AI response in ${this.ideType}:`, error"
        },
        {
          "line": 116,
          "content": "logger.info(`Page was closed, trying to get fresh page reference...`);",
          "type": "direct_data",
          "match": "logger.info(`Page was closed, trying to get fresh page reference...`"
        },
        {
          "line": 116,
          "content": "logger.info(`Page was closed, trying to get fresh page reference...`);",
          "type": "variable_data",
          "match": "logger.info(`Page was closed, trying"
        },
        {
          "line": 121,
          "content": "logger.error(`Failed to reconnect:`, reconnectError.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to reconnect:`, reconnectError.message"
        },
        {
          "line": 121,
          "content": "logger.error(`Failed to reconnect:`, reconnectError.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to reconnect:`, reconnectError"
        },
        {
          "line": 129,
          "content": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting partial response`);",
          "type": "direct_data",
          "match": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting partial response`"
        },
        {
          "line": 129,
          "content": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting partial response`);",
          "type": "variable_data",
          "match": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting"
        },
        {
          "line": 129,
          "content": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting partial response`);",
          "type": "template_data",
          "match": "logger.info(`⏰ [ChatMessageHandler] Timeout reached in ${this.ideType}, extracting partial response`"
        },
        {
          "line": 152,
          "content": "logger.error(`No page available for extracting AI response from ${this.ideType}`);",
          "type": "template_data",
          "match": "logger.error(`No page available for extracting AI response from ${this.ideType}`"
        },
        {
          "line": 169,
          "content": "logger.error(`Error extracting AI response from ${this.ideType}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error extracting AI response from ${this.ideType}:`, error.message"
        },
        {
          "line": 169,
          "content": "logger.error(`Error extracting AI response from ${this.ideType}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error extracting AI response from ${this.ideType}:`, error"
        },
        {
          "line": 169,
          "content": "logger.error(`Error extracting AI response from ${this.ideType}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error extracting AI response from ${this.ideType}:`"
        },
        {
          "line": 169,
          "content": "logger.error(`Error extracting AI response from ${this.ideType}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error extracting AI response from ${this.ideType}:`, error"
        }
      ]
    },
    "./backend/domain/services/chat/ChatHistoryExtractor.js": {
      "totalFindings": 22,
      "byType": {
        "template_data": 2,
        "direct_data": 8,
        "variable_data": 8,
        "error_object": 3,
        "json_stringify": 1
      },
      "findings": [
        {
          "line": 13,
          "content": "logger.warn(`No chat selectors found for IDE type: ${ideType}`);",
          "type": "template_data",
          "match": "logger.warn(`No chat selectors found for IDE type: ${ideType}`"
        },
        {
          "line": 45,
          "content": "logger.error(`Error extracting chat history from ${this.ideType}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error extracting chat history from ${this.ideType}:`, error"
        },
        {
          "line": 45,
          "content": "logger.error(`Error extracting chat history from ${this.ideType}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error extracting chat history from ${this.ideType}:`, error"
        },
        {
          "line": 45,
          "content": "logger.error(`Error extracting chat history from ${this.ideType}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error extracting chat history from ${this.ideType}:`"
        },
        {
          "line": 45,
          "content": "logger.error(`Error extracting chat history from ${this.ideType}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error extracting chat history from ${this.ideType}:`, error"
        },
        {
          "line": 60,
          "content": "logger.info('[VSCode] Available targets:', targets.length);",
          "type": "direct_data",
          "match": "logger.info('[VSCode] Available targets:', targets.length"
        },
        {
          "line": 60,
          "content": "logger.info('[VSCode] Available targets:', targets.length);",
          "type": "variable_data",
          "match": "logger.info('[VSCode] Available targets:', targets"
        },
        {
          "line": 66,
          "content": "logger.info('[VSCode] Target URL:', url);",
          "type": "direct_data",
          "match": "logger.info('[VSCode] Target URL:', url"
        },
        {
          "line": 66,
          "content": "logger.info('[VSCode] Target URL:', url);",
          "type": "variable_data",
          "match": "logger.info('[VSCode] Target URL:', url"
        },
        {
          "line": 81,
          "content": "logger.info('[VSCode] Found VS Code app target, navigating...');",
          "type": "direct_data",
          "match": "logger.info('[VSCode] Found VS Code app target, navigating...'"
        },
        {
          "line": 81,
          "content": "logger.info('[VSCode] Found VS Code app target, navigating...');",
          "type": "variable_data",
          "match": "logger.info('[VSCode] Found VS Code app target, navigating"
        },
        {
          "line": 91,
          "content": "logger.info('[VSCode] No VS Code app target found, staying on current page');",
          "type": "direct_data",
          "match": "logger.info('[VSCode] No VS Code app target found, staying on current page'"
        },
        {
          "line": 91,
          "content": "logger.info('[VSCode] No VS Code app target found, staying on current page');",
          "type": "variable_data",
          "match": "logger.info('[VSCode] No VS Code app target found, staying"
        },
        {
          "line": 93,
          "content": "logger.error('[VSCode] Error navigating to VS Code app:', error);",
          "type": "direct_data",
          "match": "logger.error('[VSCode] Error navigating to VS Code app:', error"
        },
        {
          "line": 93,
          "content": "logger.error('[VSCode] Error navigating to VS Code app:', error);",
          "type": "variable_data",
          "match": "logger.error('[VSCode] Error navigating to VS Code app:', error"
        },
        {
          "line": 93,
          "content": "logger.error('[VSCode] Error navigating to VS Code app:', error);",
          "type": "error_object",
          "match": "logger.error('[VSCode] Error navigating to VS Code app:', error"
        },
        {
          "line": 253,
          "content": "logger.error('[VSCode] page.evaluate error:', error);",
          "type": "direct_data",
          "match": "logger.error('[VSCode] page.evaluate error:', error"
        },
        {
          "line": 253,
          "content": "logger.error('[VSCode] page.evaluate error:', error);",
          "type": "variable_data",
          "match": "logger.error('[VSCode] page.evaluate error:', error"
        },
        {
          "line": 253,
          "content": "logger.error('[VSCode] page.evaluate error:', error);",
          "type": "error_object",
          "match": "logger.error('[VSCode] page.evaluate error:', error"
        },
        {
          "line": 256,
          "content": "logger.debug('[VSCode] Debug:', JSON.stringify(result.debug, null, 2));",
          "type": "direct_data",
          "match": "logger.debug('[VSCode] Debug:', JSON.stringify(result.debug, null, 2"
        },
        {
          "line": 256,
          "content": "logger.debug('[VSCode] Debug:', JSON.stringify(result.debug, null, 2));",
          "type": "variable_data",
          "match": "logger.debug('[VSCode] Debug:', JSON"
        },
        {
          "line": 256,
          "content": "logger.debug('[VSCode] Debug:', JSON.stringify(result.debug, null, 2));",
          "type": "json_stringify",
          "match": "logger.debug('[VSCode] Debug:', JSON.stringify"
        }
      ]
    },
    "./backend/domain/services/LayerValidationService.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 90,
          "content": "this.logger.info('Layer validation completed', {",
          "type": "direct_data",
          "match": "logger.info('Layer validation completed', {"
        },
        {
          "line": 98,
          "content": "this.logger.error('Layer validation failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Layer validation failed:', error"
        },
        {
          "line": 98,
          "content": "this.logger.error('Layer validation failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Layer validation failed:', error"
        },
        {
          "line": 98,
          "content": "this.logger.error('Layer validation failed:', error);",
          "type": "error_object",
          "match": "logger.error('Layer validation failed:', error"
        },
        {
          "line": 133,
          "content": "this.logger.warn('Error detecting layers:', error);",
          "type": "direct_data",
          "match": "logger.warn('Error detecting layers:', error"
        },
        {
          "line": 133,
          "content": "this.logger.warn('Error detecting layers:', error);",
          "type": "variable_data",
          "match": "logger.warn('Error detecting layers:', error"
        },
        {
          "line": 133,
          "content": "this.logger.warn('Error detecting layers:', error);",
          "type": "error_object",
          "match": "logger.warn('Error detecting layers:', error"
        }
      ]
    },
    "./backend/domain/services/TaskSuggestionService.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 9,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 54,
          "content": "this.logger.info(`Generated ${rankedSuggestions.length} suggestions for project`);",
          "type": "template_data",
          "match": "logger.info(`Generated ${rankedSuggestions.length} suggestions for project`"
        },
        {
          "line": 59,
          "content": "this.logger.error(`Suggestion generation failed for ${projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Suggestion generation failed for ${projectPath}:`, error"
        },
        {
          "line": 59,
          "content": "this.logger.error(`Suggestion generation failed for ${projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Suggestion generation failed for ${projectPath}:`, error"
        },
        {
          "line": 59,
          "content": "this.logger.error(`Suggestion generation failed for ${projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Suggestion generation failed for ${projectPath}:`"
        },
        {
          "line": 59,
          "content": "this.logger.error(`Suggestion generation failed for ${projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Suggestion generation failed for ${projectPath}:`, error"
        },
        {
          "line": 95,
          "content": "this.logger.warn(`Analysis suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Analysis suggestions generation failed: ${error.message}`"
        },
        {
          "line": 131,
          "content": "this.logger.warn(`Optimization suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Optimization suggestions generation failed: ${error.message}`"
        },
        {
          "line": 167,
          "content": "this.logger.warn(`Security suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Security suggestions generation failed: ${error.message}`"
        },
        {
          "line": 203,
          "content": "this.logger.warn(`Refactoring suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Refactoring suggestions generation failed: ${error.message}`"
        },
        {
          "line": 239,
          "content": "this.logger.warn(`Testing suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Testing suggestions generation failed: ${error.message}`"
        },
        {
          "line": 275,
          "content": "this.logger.warn(`Documentation suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Documentation suggestions generation failed: ${error.message}`"
        },
        {
          "line": 310,
          "content": "this.logger.error(`AI response failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`AI response failed: ${error.message}`"
        }
      ]
    },
    "./backend/domain/services/TaskService.js": {
      "totalFindings": 58,
      "byType": {
        "direct_data": 25,
        "variable_data": 17,
        "error_object": 7,
        "object_data": 3,
        "task_data": 3,
        "template_data": 3
      },
      "findings": [
        {
          "line": 78,
          "content": "logger.info('🔍 [TaskService] buildTaskExecutionPrompt called for task:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] buildTaskExecutionPrompt called for task:', {"
        },
        {
          "line": 91,
          "content": "logger.info('✅ [TaskService] Successfully loaded task-execute.md, length:', taskExecutePrompt.length);",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] Successfully loaded task-execute.md, length:', taskExecutePrompt.length"
        },
        {
          "line": 91,
          "content": "logger.info('✅ [TaskService] Successfully loaded task-execute.md, length:', taskExecutePrompt.length);",
          "type": "variable_data",
          "match": "logger.info('✅ [TaskService] Successfully loaded task-execute.md, length"
        },
        {
          "line": 93,
          "content": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error"
        },
        {
          "line": 93,
          "content": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error"
        },
        {
          "line": 93,
          "content": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskService] Error reading task-execute.md from file:', error"
        },
        {
          "line": 108,
          "content": "logger.error('❌ [TaskService] Error reading task file:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Error reading task file:', error"
        },
        {
          "line": 108,
          "content": "logger.error('❌ [TaskService] Error reading task file:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Error reading task file:', error"
        },
        {
          "line": 108,
          "content": "logger.error('❌ [TaskService] Error reading task file:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskService] Error reading task file:', error"
        },
        {
          "line": 183,
          "content": "logger.info('🔍 [TaskService] executeTask called with:', { taskId, options });",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] executeTask called with:', { taskId, options }"
        },
        {
          "line": 183,
          "content": "logger.info('🔍 [TaskService] executeTask called with:', { taskId, options });",
          "type": "object_data",
          "match": "logger.info('🔍 [TaskService] executeTask called with:', { taskId, options }"
        },
        {
          "line": 191,
          "content": "logger.info('🔍 [TaskService] Found task:', task);",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] Found task:', task"
        },
        {
          "line": 191,
          "content": "logger.info('🔍 [TaskService] Found task:', task);",
          "type": "variable_data",
          "match": "logger.info('🔍 [TaskService] Found task:', task"
        },
        {
          "line": 191,
          "content": "logger.info('🔍 [TaskService] Found task:', task);",
          "type": "task_data",
          "match": "logger.info('🔍 [TaskService] Found task:', task"
        },
        {
          "line": 201,
          "content": "logger.info('🔍 [TaskService] Sending task prompt to Cursor IDE:', { taskId: task.id });",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] Sending task prompt to Cursor IDE:', { taskId: task.id }"
        },
        {
          "line": 201,
          "content": "logger.info('🔍 [TaskService] Sending task prompt to Cursor IDE:', { taskId: task.id });",
          "type": "object_data",
          "match": "logger.info('🔍 [TaskService] Sending task prompt to Cursor IDE:', { taskId: task.id }"
        },
        {
          "line": 208,
          "content": "logger.info('✅ [TaskService] Task executed successfully via Cursor IDE', {",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] Task executed successfully via Cursor IDE', {"
        },
        {
          "line": 229,
          "content": "logger.error('❌ [TaskService] Task execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Task execution failed:', error.message"
        },
        {
          "line": 229,
          "content": "logger.error('❌ [TaskService] Task execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Task execution failed:', error"
        },
        {
          "line": 229,
          "content": "logger.error('❌ [TaskService] Task execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskService] Task execution failed:', error"
        },
        {
          "line": 271,
          "content": "logger.info('🔍 [TaskService] executeTaskWithEngine called with:', { taskId, options });",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] executeTaskWithEngine called with:', { taskId, options }"
        },
        {
          "line": 271,
          "content": "logger.info('🔍 [TaskService] executeTaskWithEngine called with:', { taskId, options });",
          "type": "object_data",
          "match": "logger.info('🔍 [TaskService] executeTaskWithEngine called with:', { taskId, options }"
        },
        {
          "line": 279,
          "content": "logger.info('🔍 [TaskService] Found task for engine execution:', task);",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskService] Found task for engine execution:', task"
        },
        {
          "line": 279,
          "content": "logger.info('🔍 [TaskService] Found task for engine execution:', task);",
          "type": "variable_data",
          "match": "logger.info('🔍 [TaskService] Found task for engine execution:', task"
        },
        {
          "line": 279,
          "content": "logger.info('🔍 [TaskService] Found task for engine execution:', task);",
          "type": "task_data",
          "match": "logger.info('🔍 [TaskService] Found task for engine execution:', task"
        },
        {
          "line": 300,
          "content": "logger.info('✅ [TaskService] Core engine task execution completed', {",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] Core engine task execution completed', {"
        },
        {
          "line": 325,
          "content": "logger.error('❌ [TaskService] Core engine task execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Core engine task execution failed:', error.message"
        },
        {
          "line": 325,
          "content": "logger.error('❌ [TaskService] Core engine task execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Core engine task execution failed:', error"
        },
        {
          "line": 325,
          "content": "logger.error('❌ [TaskService] Core engine task execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskService] Core engine task execution failed:', error"
        },
        {
          "line": 488,
          "content": "logger.info('✅ [TaskService] Auto-Finish processing completed:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] Auto-Finish processing completed:', {"
        },
        {
          "line": 515,
          "content": "logger.info('⚠️ [TaskService] Auto-Finish System not available, using fallback approach...');",
          "type": "direct_data",
          "match": "logger.info('⚠️ [TaskService] Auto-Finish System not available, using fallback approach...'"
        },
        {
          "line": 515,
          "content": "logger.info('⚠️ [TaskService] Auto-Finish System not available, using fallback approach...');",
          "type": "variable_data",
          "match": "logger.info('⚠️ [TaskService] Auto-Finish System not available, using"
        },
        {
          "line": 546,
          "content": "logger.info('✅ [TaskService] AI finished editing:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] AI finished editing:', {"
        },
        {
          "line": 561,
          "content": "logger.warn('⚠️ [TaskService] ChatMessageHandler failed, trying fallback methods:', chatError.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ [TaskService] ChatMessageHandler failed, trying fallback methods:', chatError.message"
        },
        {
          "line": 561,
          "content": "logger.warn('⚠️ [TaskService] ChatMessageHandler failed, trying fallback methods:', chatError.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ [TaskService] ChatMessageHandler failed, trying"
        },
        {
          "line": 575,
          "content": "logger.warn('⚠️ [TaskService] Direct sendMessage failed, trying browser manager:', sendError.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ [TaskService] Direct sendMessage failed, trying browser manager:', sendError.message"
        },
        {
          "line": 575,
          "content": "logger.warn('⚠️ [TaskService] Direct sendMessage failed, trying browser manager:', sendError.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ [TaskService] Direct sendMessage failed, trying"
        },
        {
          "line": 605,
          "content": "logger.error('❌ [TaskService] Modular command fallback failed:', browserError.message);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Modular command fallback failed:', browserError.message"
        },
        {
          "line": 605,
          "content": "logger.error('❌ [TaskService] Modular command fallback failed:', browserError.message);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Modular command fallback failed:', browserError"
        },
        {
          "line": 668,
          "content": "logger.info('📦 [TaskService] Created backup:', backupPath);",
          "type": "direct_data",
          "match": "logger.info('📦 [TaskService] Created backup:', backupPath"
        },
        {
          "line": 668,
          "content": "logger.info('📦 [TaskService] Created backup:', backupPath);",
          "type": "variable_data",
          "match": "logger.info('📦 [TaskService] Created backup:', backupPath"
        },
        {
          "line": 675,
          "content": "logger.info('✅ [TaskService] Applied refactored code to:', task.metadata.filePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskService] Applied refactored code to:', task.metadata.filePath"
        },
        {
          "line": 675,
          "content": "logger.info('✅ [TaskService] Applied refactored code to:', task.metadata.filePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [TaskService] Applied refactored code to:', task"
        },
        {
          "line": 675,
          "content": "logger.info('✅ [TaskService] Applied refactored code to:', task.metadata.filePath);",
          "type": "task_data",
          "match": "logger.info('✅ [TaskService] Applied refactored code to:', task"
        },
        {
          "line": 715,
          "content": "logger.info(`🔍 [TaskService] Trying: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 [TaskService] Trying: ${command}`"
        },
        {
          "line": 729,
          "content": "logger.info(`✅ [TaskService] Build validation successful with ${command}`);",
          "type": "template_data",
          "match": "logger.info(`✅ [TaskService] Build validation successful with ${command}`"
        },
        {
          "line": 732,
          "content": "logger.info(`❌ [TaskService] ${command} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.info(`❌ [TaskService] ${command} failed:`, error.message"
        },
        {
          "line": 732,
          "content": "logger.info(`❌ [TaskService] ${command} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.info(`❌ [TaskService] ${command} failed:`, error"
        },
        {
          "line": 732,
          "content": "logger.info(`❌ [TaskService] ${command} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.info(`❌ [TaskService] ${command} failed:`"
        },
        {
          "line": 732,
          "content": "logger.info(`❌ [TaskService] ${command} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.info(`❌ [TaskService] ${command} failed:`, error"
        },
        {
          "line": 740,
          "content": "logger.error('❌ [TaskService] Build validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskService] Build validation error:', error"
        },
        {
          "line": 740,
          "content": "logger.error('❌ [TaskService] Build validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskService] Build validation error:', error"
        },
        {
          "line": 740,
          "content": "logger.error('❌ [TaskService] Build validation error:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskService] Build validation error:', error"
        },
        {
          "line": 833,
          "content": "logger.error('Failed to rollback changes:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to rollback changes:', error"
        },
        {
          "line": 833,
          "content": "logger.error('Failed to rollback changes:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to rollback changes:', error"
        },
        {
          "line": 833,
          "content": "logger.error('Failed to rollback changes:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to rollback changes:', error"
        },
        {
          "line": 870,
          "content": "logger.info('📋 [TaskService] Merge request info:', mergeRequestInfo);",
          "type": "direct_data",
          "match": "logger.info('📋 [TaskService] Merge request info:', mergeRequestInfo"
        },
        {
          "line": 870,
          "content": "logger.info('📋 [TaskService] Merge request info:', mergeRequestInfo);",
          "type": "variable_data",
          "match": "logger.info('📋 [TaskService] Merge request info:', mergeRequestInfo"
        }
      ]
    },
    "./backend/domain/services/terminal/TerminalContentExtractor.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 26,
          "content": "logger.info('Found text in', selector);",
          "type": "direct_data",
          "match": "logger.info('Found text in', selector"
        },
        {
          "line": 26,
          "content": "logger.info('Found text in', selector);",
          "type": "variable_data",
          "match": "logger.info('Found text in', selector"
        }
      ]
    },
    "./backend/domain/services/terminal/TerminalMonitor.js": {
      "totalFindings": 26,
      "byType": {
        "direct_data": 11,
        "variable_data": 11,
        "user_data": 1,
        "error_object": 3
      },
      "findings": [
        {
          "line": 57,
          "content": "logger.info('Terminal status:', terminalExists);",
          "type": "direct_data",
          "match": "logger.info('Terminal status:', terminalExists"
        },
        {
          "line": 57,
          "content": "logger.info('Terminal status:', terminalExists);",
          "type": "variable_data",
          "match": "logger.info('Terminal status:', terminalExists"
        },
        {
          "line": 90,
          "content": "logger.info('Found text in', selector);",
          "type": "direct_data",
          "match": "logger.info('Found text in', selector"
        },
        {
          "line": 90,
          "content": "logger.info('Found text in', selector);",
          "type": "variable_data",
          "match": "logger.info('Found text in', selector"
        },
        {
          "line": 143,
          "content": "logger.info('Terminal content changed, length:', terminalOutput.length);",
          "type": "direct_data",
          "match": "logger.info('Terminal content changed, length:', terminalOutput.length"
        },
        {
          "line": 143,
          "content": "logger.info('Terminal content changed, length:', terminalOutput.length);",
          "type": "variable_data",
          "match": "logger.info('Terminal content changed, length"
        },
        {
          "line": 147,
          "content": "logger.info('Content preview:', terminalOutput.substring(0, 200) + '...');",
          "type": "direct_data",
          "match": "logger.info('Content preview:', terminalOutput.substring(0, 200"
        },
        {
          "line": 147,
          "content": "logger.info('Content preview:', terminalOutput.substring(0, 200) + '...');",
          "type": "variable_data",
          "match": "logger.info('Content preview:', terminalOutput"
        },
        {
          "line": 154,
          "content": "logger.info('User app URL detected:', userAppUrl);",
          "type": "direct_data",
          "match": "logger.info('User app URL detected:', userAppUrl"
        },
        {
          "line": 154,
          "content": "logger.info('User app URL detected:', userAppUrl);",
          "type": "variable_data",
          "match": "logger.info('User app URL detected:', userAppUrl"
        },
        {
          "line": 154,
          "content": "logger.info('User app URL detected:', userAppUrl);",
          "type": "user_data",
          "match": "logger.info('User app URL detected:', user"
        },
        {
          "line": 165,
          "content": "logger.info('No URL found in terminal, relying on package.json analysis');",
          "type": "direct_data",
          "match": "logger.info('No URL found in terminal, relying on package.json analysis'"
        },
        {
          "line": 165,
          "content": "logger.info('No URL found in terminal, relying on package.json analysis');",
          "type": "variable_data",
          "match": "logger.info('No URL found in terminal, relying"
        },
        {
          "line": 168,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 168,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 168,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 220,
          "content": "logger.error('Error restarting app:', error);",
          "type": "direct_data",
          "match": "logger.error('Error restarting app:', error"
        },
        {
          "line": 220,
          "content": "logger.error('Error restarting app:', error);",
          "type": "variable_data",
          "match": "logger.error('Error restarting app:', error"
        },
        {
          "line": 220,
          "content": "logger.error('Error restarting app:', error);",
          "type": "error_object",
          "match": "logger.error('Error restarting app:', error"
        },
        {
          "line": 250,
          "content": "logger.error('Error checking terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error checking terminal:', error"
        },
        {
          "line": 250,
          "content": "logger.error('Error checking terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error checking terminal:', error"
        },
        {
          "line": 250,
          "content": "logger.error('Error checking terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error checking terminal:', error"
        },
        {
          "line": 292,
          "content": "logger.info('URL pattern matched:', pattern, '->', url);",
          "type": "direct_data",
          "match": "logger.info('URL pattern matched:', pattern, '->', url"
        },
        {
          "line": 292,
          "content": "logger.info('URL pattern matched:', pattern, '->', url);",
          "type": "variable_data",
          "match": "logger.info('URL pattern matched:', pattern"
        },
        {
          "line": 301,
          "content": "logger.info('Generic URL pattern matched ->', url);",
          "type": "direct_data",
          "match": "logger.info('Generic URL pattern matched ->', url"
        },
        {
          "line": 301,
          "content": "logger.info('Generic URL pattern matched ->', url);",
          "type": "variable_data",
          "match": "logger.info('Generic URL pattern matched ->', url"
        }
      ]
    },
    "./backend/domain/services/terminal/VSCodeTerminalHandler.js": {
      "totalFindings": 34,
      "byType": {
        "template_data": 9,
        "direct_data": 9,
        "variable_data": 9,
        "error_object": 7
      },
      "findings": [
        {
          "line": 19,
          "content": "logger.info(`📁 Created VSCode terminal directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode terminal directory: ${this.outputDir}`"
        },
        {
          "line": 41,
          "content": "logger.info(`🔍 Found VSCode IDE on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Found VSCode IDE on port ${port}`"
        },
        {
          "line": 45,
          "content": "logger.info(`✅ Connected to VSCode CDP on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to VSCode CDP on port ${port}`"
        },
        {
          "line": 49,
          "content": "logger.info(`✅ VSCode app page ready: ${this.page.url()}`);",
          "type": "template_data",
          "match": "logger.info(`✅ VSCode app page ready: ${this.page.url()}`"
        },
        {
          "line": 52,
          "content": "logger.error('❌ Connection failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Connection failed:', error.message"
        },
        {
          "line": 52,
          "content": "logger.error('❌ Connection failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Connection failed:', error"
        },
        {
          "line": 52,
          "content": "logger.error('❌ Connection failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Connection failed:', error"
        },
        {
          "line": 60,
          "content": "logger.info(`  🌐 Initial page URL: ${url}`);",
          "type": "template_data",
          "match": "logger.info(`  🌐 Initial page URL: ${url}`"
        },
        {
          "line": 73,
          "content": "logger.info(`  🌐 After navigation: ${url}`);",
          "type": "template_data",
          "match": "logger.info(`  🌐 After navigation: ${url}`"
        },
        {
          "line": 75,
          "content": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message);",
          "type": "direct_data",
          "match": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message"
        },
        {
          "line": 75,
          "content": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message);",
          "type": "variable_data",
          "match": "logger.info('  ⚠️ Navigation to VSCode app failed:', e"
        },
        {
          "line": 142,
          "content": "logger.error('❌ Error opening terminal:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error opening terminal:', error.message"
        },
        {
          "line": 142,
          "content": "logger.error('❌ Error opening terminal:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error opening terminal:', error"
        },
        {
          "line": 142,
          "content": "logger.error('❌ Error opening terminal:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error opening terminal:', error"
        },
        {
          "line": 201,
          "content": "logger.info(`💻 Executing command: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`💻 Executing command: ${command}`"
        },
        {
          "line": 207,
          "content": "logger.info('  🔧 Terminal not open, opening...');",
          "type": "direct_data",
          "match": "logger.info('  🔧 Terminal not open, opening...'"
        },
        {
          "line": 207,
          "content": "logger.info('  🔧 Terminal not open, opening...');",
          "type": "variable_data",
          "match": "logger.info('  🔧 Terminal not open, opening"
        },
        {
          "line": 229,
          "content": "logger.info(`  ⌨️ Typing command: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`  ⌨️ Typing command: ${command}`"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Error executing command:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error executing command:', error.message"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Error executing command:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error executing command:', error"
        },
        {
          "line": 244,
          "content": "logger.error('❌ Error executing command:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error executing command:', error"
        },
        {
          "line": 269,
          "content": "logger.info(`  ✅ Focused terminal via ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Focused terminal via ${selector}`"
        },
        {
          "line": 308,
          "content": "logger.error('❌ Error focusing terminal:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error focusing terminal:', error.message"
        },
        {
          "line": 308,
          "content": "logger.error('❌ Error focusing terminal:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error focusing terminal:', error"
        },
        {
          "line": 308,
          "content": "logger.error('❌ Error focusing terminal:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error focusing terminal:', error"
        },
        {
          "line": 359,
          "content": "logger.error('❌ Error getting terminal output:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error getting terminal output:', error.message"
        },
        {
          "line": 359,
          "content": "logger.error('❌ Error getting terminal output:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error getting terminal output:', error"
        },
        {
          "line": 359,
          "content": "logger.error('❌ Error getting terminal output:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error getting terminal output:', error"
        },
        {
          "line": 373,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 373,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 373,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 413,
          "content": "logger.error('❌ VSCode terminal test failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ VSCode terminal test failed:', error.message"
        },
        {
          "line": 413,
          "content": "logger.error('❌ VSCode terminal test failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ VSCode terminal test failed:', error"
        },
        {
          "line": 413,
          "content": "logger.error('❌ VSCode terminal test failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ VSCode terminal test failed:', error"
        }
      ]
    },
    "./backend/domain/services/terminal/TerminalUrlExtractor.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 38,
          "content": "logger.info('URL pattern matched:', pattern, '->', url);",
          "type": "direct_data",
          "match": "logger.info('URL pattern matched:', pattern, '->', url"
        },
        {
          "line": 38,
          "content": "logger.info('URL pattern matched:', pattern, '->', url);",
          "type": "variable_data",
          "match": "logger.info('URL pattern matched:', pattern"
        },
        {
          "line": 48,
          "content": "logger.info('Generic URL pattern matched ->', url);",
          "type": "direct_data",
          "match": "logger.info('Generic URL pattern matched ->', url"
        },
        {
          "line": 48,
          "content": "logger.info('Generic URL pattern matched ->', url);",
          "type": "variable_data",
          "match": "logger.info('Generic URL pattern matched ->', url"
        }
      ]
    },
    "./backend/domain/services/CursorIDEService.js": {
      "totalFindings": 104,
      "byType": {
        "direct_data": 34,
        "variable_data": 34,
        "request_response": 1,
        "template_data": 12,
        "error_object": 7,
        "file_content": 3,
        "ide_data": 10,
        "task_data": 3
      },
      "findings": [
        {
          "line": 25,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "direct_data",
          "match": "logger.info('IDE changed, resetting package.json cache'"
        },
        {
          "line": 25,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "variable_data",
          "match": "logger.info('IDE changed, resetting"
        },
        {
          "line": 25,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "request_response",
          "match": "logger.info('IDE changed, res"
        },
        {
          "line": 26,
          "content": "logger.info('Event data:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 26,
          "content": "logger.info('Event data:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 32,
          "content": "logger.info(`Switching browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching browser connection to port: ${eventData.port}`"
        },
        {
          "line": 34,
          "content": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to switch browser connection:', error.message"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 46,
          "content": "logger.info(`sendMessage() - Active port: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`sendMessage() - Active port: ${activePort}`"
        },
        {
          "line": 52,
          "content": "logger.info(`sendMessage() - Current browser port: ${currentBrowserPort}`);",
          "type": "template_data",
          "match": "logger.info(`sendMessage() - Current browser port: ${currentBrowserPort}`"
        },
        {
          "line": 69,
          "content": "logger.info(`extractChatHistory() - Active port: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`extractChatHistory() - Active port: ${activePort}`"
        },
        {
          "line": 75,
          "content": "logger.info(`extractChatHistory() - Current browser port: ${currentBrowserPort}`);",
          "type": "template_data",
          "match": "logger.info(`extractChatHistory() - Current browser port: ${currentBrowserPort}`"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to Cursor IDE:', prompt.substring(0, 100) + '...');",
          "type": "direct_data",
          "match": "logger.info('Sending prompt to Cursor IDE:', prompt.substring(0, 100"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to Cursor IDE:', prompt.substring(0, 100) + '...');",
          "type": "variable_data",
          "match": "logger.info('Sending prompt to Cursor IDE:', prompt"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Cursor:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending prompt to Cursor:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Cursor:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending prompt to Cursor:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Cursor:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending prompt to Cursor:', error"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "file_content",
          "match": "logger.info('Applying refactoring to file:', file"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "direct_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "variable_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "error_object",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 189,
          "content": "logger.info(`getActivePort() called, returning: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`getActivePort() called, returning: ${activePort}`"
        },
        {
          "line": 195,
          "content": "logger.info(`switchToPort(${port}) called, current active port:`, currentActivePort);",
          "type": "template_data",
          "match": "logger.info(`switchToPort(${port}) called, current active port:`"
        },
        {
          "line": 198,
          "content": "logger.info(`Already connected to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Already connected to port ${port}`"
        },
        {
          "line": 202,
          "content": "logger.info(`Switching to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}`"
        },
        {
          "line": 207,
          "content": "logger.info(`Calling ideManager.switchToIDE(${port})`);",
          "type": "template_data",
          "match": "logger.info(`Calling ideManager.switchToIDE(${port})`"
        },
        {
          "line": 209,
          "content": "logger.info(`ideManager.switchToIDE(${port}) completed`);",
          "type": "template_data",
          "match": "logger.info(`ideManager.switchToIDE(${port}) completed`"
        },
        {
          "line": 222,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspacePath"
        },
        {
          "line": 222,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspacePath"
        },
        {
          "line": 222,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspace"
        },
        {
          "line": 229,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath"
        },
        {
          "line": 229,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Virtual workspace detected, using"
        },
        {
          "line": 234,
          "content": "logger.info('Dev server detected via package.json:', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json:', packageJsonUrl"
        },
        {
          "line": 234,
          "content": "logger.info('Dev server detected via package.json:', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json:', packageJsonUrl"
        },
        {
          "line": 238,
          "content": "logger.info('Package.json analysis failed, trying terminal monitoring...');",
          "type": "direct_data",
          "match": "logger.info('Package.json analysis failed, trying terminal monitoring...'"
        },
        {
          "line": 238,
          "content": "logger.info('Package.json analysis failed, trying terminal monitoring...');",
          "type": "variable_data",
          "match": "logger.info('Package.json analysis failed, trying"
        },
        {
          "line": 241,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 241,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 241,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "error_object",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 260,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "direct_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 260,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "variable_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 260,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "ide_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 264,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Workspace path for port', port, ':', workspacePath"
        },
        {
          "line": 264,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 264,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 267,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "direct_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 267,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "variable_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 267,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "ide_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 273,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath"
        },
        {
          "line": 273,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 273,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 280,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl"
        },
        {
          "line": 280,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 280,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "ide_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 285,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No frontend found in workspace for port', port, ':', workspacePath"
        },
        {
          "line": 285,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 285,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 288,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting user app URL for port', port, ':', error"
        },
        {
          "line": 288,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting user app URL for port', port"
        },
        {
          "line": 288,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "ide_data",
          "match": "logger.error('Error getting user app URL for port', port"
        },
        {
          "line": 316,
          "content": "logger.info('No workspace path provided, using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No workspace path provided, using active IDE workspace path:', workspacePath"
        },
        {
          "line": 316,
          "content": "logger.info('No workspace path provided, using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No workspace path provided, using"
        },
        {
          "line": 324,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath"
        },
        {
          "line": 324,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Virtual workspace detected, using"
        },
        {
          "line": 354,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 354,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 354,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 372,
          "content": "logger.info('🔍 [CursorIDEService] Generating AI task suggestions for:', projectAnalysis.projectType);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDEService] Generating AI task suggestions for:', projectAnalysis.projectType"
        },
        {
          "line": 372,
          "content": "logger.info('🔍 [CursorIDEService] Generating AI task suggestions for:', projectAnalysis.projectType);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDEService] Generating AI task suggestions for:', projectAnalysis"
        },
        {
          "line": 475,
          "content": "logger.info('✅ [CursorIDEService] Generated', suggestions.length, 'task suggestions');",
          "type": "direct_data",
          "match": "logger.info('✅ [CursorIDEService] Generated', suggestions.length, 'task suggestions'"
        },
        {
          "line": 475,
          "content": "logger.info('✅ [CursorIDEService] Generated', suggestions.length, 'task suggestions');",
          "type": "variable_data",
          "match": "logger.info('✅ [CursorIDEService] Generated', suggestions"
        },
        {
          "line": 486,
          "content": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task.title);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task.title"
        },
        {
          "line": 486,
          "content": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task.title);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task"
        },
        {
          "line": 486,
          "content": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task.title);",
          "type": "task_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending task to Cursor IDE:', task"
        },
        {
          "line": 493,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 493,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 493,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspace"
        },
        {
          "line": 535,
          "content": "logger.info('✅ [CursorIDEService] Created task file at:', taskFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [CursorIDEService] Created task file at:', taskFilePath"
        },
        {
          "line": 535,
          "content": "logger.info('✅ [CursorIDEService] Created task file at:', taskFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [CursorIDEService] Created task file at:', taskFilePath"
        },
        {
          "line": 535,
          "content": "logger.info('✅ [CursorIDEService] Created task file at:', taskFilePath);",
          "type": "task_data",
          "match": "logger.info('✅ [CursorIDEService] Created task file at:', task"
        },
        {
          "line": 541,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening file in Cursor IDE:', filePath"
        },
        {
          "line": 541,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening file in Cursor IDE:', filePath"
        },
        {
          "line": 541,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening file in Cursor IDE:', file"
        },
        {
          "line": 566,
          "content": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error"
        },
        {
          "line": 566,
          "content": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error"
        },
        {
          "line": 566,
          "content": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [CursorIDEService] Error sending task to Cursor IDE:', error"
        },
        {
          "line": 579,
          "content": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks'"
        },
        {
          "line": 579,
          "content": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', tasks"
        },
        {
          "line": 579,
          "content": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "task_data",
          "match": "logger.info('🔍 [CursorIDEService] Sending auto mode tasks to Cursor IDE:', task"
        },
        {
          "line": 586,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 586,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 586,
          "content": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [CursorIDEService] Using active IDE workspace path:', workspace"
        },
        {
          "line": 636,
          "content": "logger.info('✅ [CursorIDEService] Created auto mode file at:', autoModeFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [CursorIDEService] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 636,
          "content": "logger.info('✅ [CursorIDEService] Created auto mode file at:', autoModeFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [CursorIDEService] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 648,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', filePath"
        },
        {
          "line": 648,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', filePath"
        },
        {
          "line": 648,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', file"
        },
        {
          "line": 675,
          "content": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error"
        },
        {
          "line": 675,
          "content": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error"
        },
        {
          "line": 675,
          "content": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [CursorIDEService] Error sending auto mode tasks to Cursor IDE:', error"
        }
      ]
    },
    "./backend/domain/services/TerminalLogCaptureService.js": {
      "totalFindings": 55,
      "byType": {
        "template_data": 19,
        "direct_data": 12,
        "variable_data": 12,
        "error_object": 12
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.info(`Initializing simple logging for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Initializing simple logging for port ${port}`"
        },
        {
          "line": 94,
          "content": "logger.info(`Simple logging initialized for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Simple logging initialized for port ${port}`"
        },
        {
          "line": 98,
          "content": "logger.error(`Error initializing logging for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error initializing logging for port ${port}:`, error"
        },
        {
          "line": 98,
          "content": "logger.error(`Error initializing logging for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error initializing logging for port ${port}:`, error"
        },
        {
          "line": 98,
          "content": "logger.error(`Error initializing logging for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error initializing logging for port ${port}:`"
        },
        {
          "line": 98,
          "content": "logger.error(`Error initializing logging for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error initializing logging for port ${port}:`, error"
        },
        {
          "line": 115,
          "content": "logger.info(`Created secure log directory: ${logDir}`);",
          "type": "template_data",
          "match": "logger.info(`Created secure log directory: ${logDir}`"
        },
        {
          "line": 117,
          "content": "logger.error(`Error creating log directory:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error creating log directory:`, error"
        },
        {
          "line": 117,
          "content": "logger.error(`Error creating log directory:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error creating log directory:`, error"
        },
        {
          "line": 117,
          "content": "logger.error(`Error creating log directory:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error creating log directory:`, error"
        },
        {
          "line": 137,
          "content": "logger.error('Error opening terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error opening terminal:', error"
        },
        {
          "line": 137,
          "content": "logger.error('Error opening terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error opening terminal:', error"
        },
        {
          "line": 137,
          "content": "logger.error('Error opening terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error opening terminal:', error"
        },
        {
          "line": 148,
          "content": "logger.info(`Setting up simple logging for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Setting up simple logging for port ${port}`"
        },
        {
          "line": 152,
          "content": "logger.info(`Terminal ready for port ${port} - using playwright commands > logfile pattern`);",
          "type": "template_data",
          "match": "logger.info(`Terminal ready for port ${port} - using playwright commands > logfile pattern`"
        },
        {
          "line": 168,
          "content": "logger.info(`Simple logging setup complete for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Simple logging setup complete for port ${port}`"
        },
        {
          "line": 170,
          "content": "logger.error(`Error setting up logging:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error setting up logging:`, error"
        },
        {
          "line": 170,
          "content": "logger.error(`Error setting up logging:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error setting up logging:`, error"
        },
        {
          "line": 170,
          "content": "logger.error(`Error setting up logging:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error setting up logging:`, error"
        },
        {
          "line": 181,
          "content": "logger.info(`Executing command: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing command: ${command}`"
        },
        {
          "line": 195,
          "content": "logger.info(`Command executed: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Command executed: ${command}`"
        },
        {
          "line": 197,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 197,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 197,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 208,
          "content": "logger.info(`Starting log monitoring for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Starting log monitoring for port ${port}`"
        },
        {
          "line": 226,
          "content": "logger.info(`Log monitoring setup complete (no permanent stream) for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Log monitoring setup complete (no permanent stream) for port ${port}`"
        },
        {
          "line": 228,
          "content": "logger.error(`Error starting log monitoring:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error starting log monitoring:`, error"
        },
        {
          "line": 228,
          "content": "logger.error(`Error starting log monitoring:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error starting log monitoring:`, error"
        },
        {
          "line": 228,
          "content": "logger.error(`Error starting log monitoring:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error starting log monitoring:`, error"
        },
        {
          "line": 240,
          "content": "logger.info(`processLogFile called for port ${port} - using simple logging instead`);",
          "type": "template_data",
          "match": "logger.info(`processLogFile called for port ${port} - using simple logging instead`"
        },
        {
          "line": 283,
          "content": "logger.info(`Processed ${lines.length} log entries for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Processed ${lines.length} log entries for port ${port}`"
        },
        {
          "line": 286,
          "content": "logger.error(`Error processing log file for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error processing log file for port ${port}:`, error"
        },
        {
          "line": 286,
          "content": "logger.error(`Error processing log file for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error processing log file for port ${port}:`, error"
        },
        {
          "line": 286,
          "content": "logger.error(`Error processing log file for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error processing log file for port ${port}:`"
        },
        {
          "line": 286,
          "content": "logger.error(`Error processing log file for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error processing log file for port ${port}:`, error"
        },
        {
          "line": 318,
          "content": "logger.error(`Error writing encrypted log entry:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error writing encrypted log entry:`, error"
        },
        {
          "line": 318,
          "content": "logger.error(`Error writing encrypted log entry:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error writing encrypted log entry:`, error"
        },
        {
          "line": 318,
          "content": "logger.error(`Error writing encrypted log entry:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error writing encrypted log entry:`, error"
        },
        {
          "line": 330,
          "content": "logger.info(`Executing command with simple logging: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing command with simple logging: ${command}`"
        },
        {
          "line": 345,
          "content": "logger.info(`Command executed with simple logging: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Command executed with simple logging: ${command}`"
        },
        {
          "line": 349,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 349,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 349,
          "content": "logger.error(`Error executing command:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing command:`, error"
        },
        {
          "line": 360,
          "content": "logger.info(`Stopping capture for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Stopping capture for port ${port}`"
        },
        {
          "line": 377,
          "content": "logger.info(`Terminated process ${pid.trim()}`);",
          "type": "template_data",
          "match": "logger.info(`Terminated process ${pid.trim()}`"
        },
        {
          "line": 384,
          "content": "logger.info(`Capture stopped for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Capture stopped for port ${port}`"
        },
        {
          "line": 386,
          "content": "logger.error(`Error stopping capture:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error stopping capture:`, error"
        },
        {
          "line": 386,
          "content": "logger.error(`Error stopping capture:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error stopping capture:`, error"
        },
        {
          "line": 386,
          "content": "logger.error(`Error stopping capture:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error stopping capture:`, error"
        },
        {
          "line": 428,
          "content": "logger.error(`Error getting capture status:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting capture status:`, error"
        },
        {
          "line": 428,
          "content": "logger.error(`Error getting capture status:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting capture status:`, error"
        },
        {
          "line": 428,
          "content": "logger.error(`Error getting capture status:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting capture status:`, error"
        },
        {
          "line": 451,
          "content": "logger.error('Error during cleanup:', error);",
          "type": "direct_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 451,
          "content": "logger.error('Error during cleanup:', error);",
          "type": "variable_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 451,
          "content": "logger.error('Error during cleanup:', error);",
          "type": "error_object",
          "match": "logger.error('Error during cleanup:', error"
        }
      ]
    },
    "./backend/domain/services/WorkflowOrchestrationService.js": {
      "totalFindings": 37,
      "byType": {
        "direct_data": 29,
        "variable_data": 1,
        "object_data": 4,
        "template_data": 3
      },
      "findings": [
        {
          "line": 66,
          "content": "this.logger.info('WorkflowOrchestrationService: Enhanced workflow execution completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Enhanced workflow execution completed', {"
        },
        {
          "line": 75,
          "content": "this.logger.error('WorkflowOrchestrationService: Enhanced workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowOrchestrationService: Enhanced workflow execution failed', {"
        },
        {
          "line": 94,
          "content": "this.logger.info('WorkflowOrchestrationService: Starting workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Starting workflow execution', {"
        },
        {
          "line": 144,
          "content": "this.logger.error('WorkflowOrchestrationService: Workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowOrchestrationService: Workflow execution failed', {"
        },
        {
          "line": 158,
          "content": "this.logger.error('WorkflowOrchestrationService: Rollback failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowOrchestrationService: Rollback failed', {"
        },
        {
          "line": 224,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing refactoring workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing refactoring workflow', {"
        },
        {
          "line": 278,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing feature workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing feature workflow', {"
        },
        {
          "line": 325,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing bug fix workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing bug fix workflow', {"
        },
        {
          "line": 372,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing analysis workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing analysis workflow', {"
        },
        {
          "line": 415,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing testing workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing testing workflow', {"
        },
        {
          "line": 458,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing documentation workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing documentation workflow', {"
        },
        {
          "line": 500,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing debug workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing debug workflow', {"
        },
        {
          "line": 543,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing optimization workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing optimization workflow', {"
        },
        {
          "line": 590,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing code review workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing code review workflow', {"
        },
        {
          "line": 633,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing hotfix workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing hotfix workflow', {"
        },
        {
          "line": 680,
          "content": "this.logger.info('WorkflowOrchestrationService: Executing generic workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOrchestrationService: Executing generic workflow', {"
        },
        {
          "line": 855,
          "content": "this.logger.info('Direct test execution completed', {",
          "type": "direct_data",
          "match": "logger.info('Direct test execution completed', {"
        },
        {
          "line": 873,
          "content": "this.logger.warn('Tests failed, attempting to parse results', { error: error.message });",
          "type": "direct_data",
          "match": "logger.warn('Tests failed, attempting to parse results', { error: error.message }"
        },
        {
          "line": 873,
          "content": "this.logger.warn('Tests failed, attempting to parse results', { error: error.message });",
          "type": "variable_data",
          "match": "logger.warn('Tests failed, attempting"
        },
        {
          "line": 926,
          "content": "this.logger.info('Direct test analysis completed', { corrections: corrections.length });",
          "type": "direct_data",
          "match": "logger.info('Direct test analysis completed', { corrections: corrections.length }"
        },
        {
          "line": 926,
          "content": "this.logger.info('Direct test analysis completed', { corrections: corrections.length });",
          "type": "object_data",
          "match": "logger.info('Direct test analysis completed', { corrections: corrections.length }"
        },
        {
          "line": 939,
          "content": "this.logger.info('Applying fixes directly', { corrections: corrections.length });",
          "type": "direct_data",
          "match": "logger.info('Applying fixes directly', { corrections: corrections.length }"
        },
        {
          "line": 939,
          "content": "this.logger.info('Applying fixes directly', { corrections: corrections.length });",
          "type": "object_data",
          "match": "logger.info('Applying fixes directly', { corrections: corrections.length }"
        },
        {
          "line": 944,
          "content": "this.logger.info('Fix progress', {",
          "type": "direct_data",
          "match": "logger.info('Fix progress', {"
        },
        {
          "line": 955,
          "content": "this.logger.info('Direct fixes completed', { successful, failed });",
          "type": "direct_data",
          "match": "logger.info('Direct fixes completed', { successful, failed }"
        },
        {
          "line": 955,
          "content": "this.logger.info('Direct fixes completed', { successful, failed });",
          "type": "object_data",
          "match": "logger.info('Direct fixes completed', { successful, failed }"
        },
        {
          "line": 979,
          "content": "this.logger.info('Direct verification completed', {",
          "type": "direct_data",
          "match": "logger.info('Direct verification completed', {"
        },
        {
          "line": 999,
          "content": "this.logger.error('Direct verification failed', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Direct verification failed', { error: error.message }"
        },
        {
          "line": 999,
          "content": "this.logger.error('Direct verification failed', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Direct verification failed', { error: error.message }"
        },
        {
          "line": 1062,
          "content": "this.logger.info('Starting sequential IDE chat execution', {",
          "type": "direct_data",
          "match": "logger.info('Starting sequential IDE chat execution', {"
        },
        {
          "line": 1072,
          "content": "this.logger.info(`Processing task ${i + 1}/${tasks.length}`, {",
          "type": "direct_data",
          "match": "logger.info(`Processing task ${i + 1}/${tasks.length}`, {"
        },
        {
          "line": 1072,
          "content": "this.logger.info(`Processing task ${i + 1}/${tasks.length}`, {",
          "type": "template_data",
          "match": "logger.info(`Processing task ${i + 1}/${tasks.length}`"
        },
        {
          "line": 1115,
          "content": "this.logger.info(`Completed task ${i + 1}/${tasks.length}`, {",
          "type": "direct_data",
          "match": "logger.info(`Completed task ${i + 1}/${tasks.length}`, {"
        },
        {
          "line": 1115,
          "content": "this.logger.info(`Completed task ${i + 1}/${tasks.length}`, {",
          "type": "template_data",
          "match": "logger.info(`Completed task ${i + 1}/${tasks.length}`"
        },
        {
          "line": 1127,
          "content": "this.logger.error(`Failed to process task ${i + 1}/${tasks.length}`, {",
          "type": "direct_data",
          "match": "logger.error(`Failed to process task ${i + 1}/${tasks.length}`, {"
        },
        {
          "line": 1127,
          "content": "this.logger.error(`Failed to process task ${i + 1}/${tasks.length}`, {",
          "type": "template_data",
          "match": "logger.error(`Failed to process task ${i + 1}/${tasks.length}`"
        },
        {
          "line": 1157,
          "content": "this.logger.info('Completed sequential IDE chat execution', {",
          "type": "direct_data",
          "match": "logger.info('Completed sequential IDE chat execution', {"
        }
      ]
    },
    "./backend/domain/services/LogicValidationService.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 104,
          "content": "this.logger.info('Logic validation completed', {",
          "type": "direct_data",
          "match": "logger.info('Logic validation completed', {"
        },
        {
          "line": 112,
          "content": "this.logger.error('Logic validation failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Logic validation failed:', error"
        },
        {
          "line": 112,
          "content": "this.logger.error('Logic validation failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Logic validation failed:', error"
        },
        {
          "line": 112,
          "content": "this.logger.error('Logic validation failed:', error);",
          "type": "error_object",
          "match": "logger.error('Logic validation failed:', error"
        }
      ]
    },
    "./backend/domain/services/WindsurfIDEService.js": {
      "totalFindings": 29,
      "byType": {
        "direct_data": 8,
        "variable_data": 8,
        "request_response": 1,
        "template_data": 7,
        "error_object": 4,
        "file_content": 1
      },
      "findings": [
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "direct_data",
          "match": "logger.info('IDE changed, resetting package.json cache'"
        },
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "variable_data",
          "match": "logger.info('IDE changed, resetting"
        },
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "request_response",
          "match": "logger.info('IDE changed, res"
        },
        {
          "line": 27,
          "content": "logger.info('Event data:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 27,
          "content": "logger.info('Event data:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 32,
          "content": "logger.info(`Switching browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching browser connection to port: ${eventData.port}`"
        },
        {
          "line": 34,
          "content": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to switch browser connection:', error.message"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to Windsurf IDE:', prompt.substring(0, 100) + '...');",
          "type": "direct_data",
          "match": "logger.info('Sending prompt to Windsurf IDE:', prompt.substring(0, 100"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to Windsurf IDE:', prompt.substring(0, 100) + '...');",
          "type": "variable_data",
          "match": "logger.info('Sending prompt to Windsurf IDE:', prompt"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Windsurf:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending prompt to Windsurf:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Windsurf:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending prompt to Windsurf:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to Windsurf:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending prompt to Windsurf:', error"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "file_content",
          "match": "logger.info('Applying refactoring to file:', file"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "direct_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "variable_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "error_object",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 189,
          "content": "logger.info(`getActivePort() called, returning: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`getActivePort() called, returning: ${activePort}`"
        },
        {
          "line": 195,
          "content": "logger.info(`switchToPort(${port}) called, current active port:`, currentActivePort);",
          "type": "template_data",
          "match": "logger.info(`switchToPort(${port}) called, current active port:`"
        },
        {
          "line": 198,
          "content": "logger.info(`Already connected to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Already connected to port ${port}`"
        },
        {
          "line": 202,
          "content": "logger.info(`Switching to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}`"
        },
        {
          "line": 205,
          "content": "logger.info(`Successfully switched to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched to port ${port}`"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting connection status:', error"
        }
      ]
    },
    "./backend/domain/services/ArchitectureService.js": {
      "totalFindings": 25,
      "byType": {
        "direct_data": 8,
        "variable_data": 8,
        "template_data": 1,
        "error_object": 8
      },
      "findings": [
        {
          "line": 53,
          "content": "this.logger.error(`Architecture analysis failed for ${projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Architecture analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Architecture analysis failed for ${projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Architecture analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Architecture analysis failed for ${projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Architecture analysis failed for ${projectPath}:`"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Architecture analysis failed for ${projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Architecture analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Project structure analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Project structure analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Project structure analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Project structure analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Project structure analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Project structure analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Design pattern detection failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Design pattern detection failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Design pattern detection failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Design pattern detection failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Design pattern detection failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Design pattern detection failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Coupling analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Coupling analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Coupling analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Coupling analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Coupling analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Coupling analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Cohesion analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Cohesion analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Cohesion analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Cohesion analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Cohesion analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Cohesion analysis failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Dependency graph generation failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Dependency graph generation failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Dependency graph generation failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Dependency graph generation failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Dependency graph generation failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Dependency graph generation failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Architecture violation detection failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Architecture violation detection failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Architecture violation detection failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Architecture violation detection failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Architecture violation detection failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Architecture violation detection failed:`, error"
        },
        {
          "line": 152,
          "content": "this.logger.error(`Architecture recommendation generation failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Architecture recommendation generation failed:`, error"
        },
        {
          "line": 152,
          "content": "this.logger.error(`Architecture recommendation generation failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Architecture recommendation generation failed:`, error"
        },
        {
          "line": 152,
          "content": "this.logger.error(`Architecture recommendation generation failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Architecture recommendation generation failed:`, error"
        }
      ]
    },
    "./backend/domain/services/IDEWorkspaceDetectionService.js": {
      "totalFindings": 36,
      "byType": {
        "direct_data": 9,
        "variable_data": 9,
        "template_data": 12,
        "error_object": 6
      },
      "findings": [
        {
          "line": 37,
          "content": "logger.info('All IDEs already have detection results, skipping detection');",
          "type": "direct_data",
          "match": "logger.info('All IDEs already have detection results, skipping detection'"
        },
        {
          "line": 37,
          "content": "logger.info('All IDEs already have detection results, skipping detection');",
          "type": "variable_data",
          "match": "logger.info('All IDEs already have detection results, skipping"
        },
        {
          "line": 41,
          "content": "logger.info(`Found ${idesWithoutResults.length} IDEs for detection (${availableIDEs.length - idesWithoutResults.length} already have results)`);",
          "type": "template_data",
          "match": "logger.info(`Found ${idesWithoutResults.length} IDEs for detection (${availableIDEs.length - idesWithoutResults.length} already have results)`"
        },
        {
          "line": 52,
          "content": "logger.error('Error during workspace detection:', error);",
          "type": "direct_data",
          "match": "logger.error('Error during workspace detection:', error"
        },
        {
          "line": 52,
          "content": "logger.error('Error during workspace detection:', error);",
          "type": "variable_data",
          "match": "logger.error('Error during workspace detection:', error"
        },
        {
          "line": 52,
          "content": "logger.error('Error during workspace detection:', error);",
          "type": "error_object",
          "match": "logger.error('Error during workspace detection:', error"
        },
        {
          "line": 66,
          "content": "logger.info(`Port ${port}: Using existing detection result:`, existingResult.workspace || existingResult.error);",
          "type": "direct_data",
          "match": "logger.info(`Port ${port}: Using existing detection result:`, existingResult.workspace || existingResult.error"
        },
        {
          "line": 66,
          "content": "logger.info(`Port ${port}: Using existing detection result:`, existingResult.workspace || existingResult.error);",
          "type": "variable_data",
          "match": "logger.info(`Port ${port}: Using existing detection result:`, existingResult"
        },
        {
          "line": 66,
          "content": "logger.info(`Port ${port}: Using existing detection result:`, existingResult.workspace || existingResult.error);",
          "type": "template_data",
          "match": "logger.info(`Port ${port}: Using existing detection result:`"
        },
        {
          "line": 70,
          "content": "logger.info(`Detecting workspace for IDE on port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Detecting workspace for IDE on port ${port}...`"
        },
        {
          "line": 84,
          "content": "logger.info(`Port ${port}: ${workspaceInfo.workspace}`);",
          "type": "template_data",
          "match": "logger.info(`Port ${port}: ${workspaceInfo.workspace}`"
        },
        {
          "line": 97,
          "content": "logger.info(`Port ${port}: No workspace info found`);",
          "type": "template_data",
          "match": "logger.info(`Port ${port}: No workspace info found`"
        },
        {
          "line": 107,
          "content": "logger.info(`Port ${port}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`Port ${port}: ${error.message}`"
        },
        {
          "line": 121,
          "content": "logger.warn('No project repository available, skipping project creation');",
          "type": "direct_data",
          "match": "logger.warn('No project repository available, skipping project creation'"
        },
        {
          "line": 121,
          "content": "logger.warn('No project repository available, skipping project creation');",
          "type": "variable_data",
          "match": "logger.warn('No project repository available, skipping"
        },
        {
          "line": 132,
          "content": "logger.info(`Creating project in database: ${projectId} (${projectName}) at ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`Creating project in database: ${projectId} (${projectName}) at ${workspacePath}`"
        },
        {
          "line": 147,
          "content": "logger.info(`Project created/found in database: ${project.id}`);",
          "type": "template_data",
          "match": "logger.info(`Project created/found in database: ${project.id}`"
        },
        {
          "line": 150,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to create project in database:', error.message"
        },
        {
          "line": 150,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to create project in database:', error"
        },
        {
          "line": 150,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to create project in database:', error"
        },
        {
          "line": 162,
          "content": "logger.error(`Error getting workspace path for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting workspace path for port ${port}:`, error"
        },
        {
          "line": 162,
          "content": "logger.error(`Error getting workspace path for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting workspace path for port ${port}:`, error"
        },
        {
          "line": 162,
          "content": "logger.error(`Error getting workspace path for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting workspace path for port ${port}:`"
        },
        {
          "line": 162,
          "content": "logger.error(`Error getting workspace path for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting workspace path for port ${port}:`, error"
        },
        {
          "line": 175,
          "content": "logger.error(`Error getting files list for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting files list for port ${port}:`, error"
        },
        {
          "line": 175,
          "content": "logger.error(`Error getting files list for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting files list for port ${port}:`, error"
        },
        {
          "line": 175,
          "content": "logger.error(`Error getting files list for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting files list for port ${port}:`"
        },
        {
          "line": 175,
          "content": "logger.error(`Error getting files list for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting files list for port ${port}:`, error"
        },
        {
          "line": 188,
          "content": "logger.error(`Error getting git status for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting git status for port ${port}:`, error"
        },
        {
          "line": 188,
          "content": "logger.error(`Error getting git status for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting git status for port ${port}:`, error"
        },
        {
          "line": 188,
          "content": "logger.error(`Error getting git status for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting git status for port ${port}:`"
        },
        {
          "line": 188,
          "content": "logger.error(`Error getting git status for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting git status for port ${port}:`, error"
        },
        {
          "line": 201,
          "content": "logger.error(`Error executing terminal command for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing terminal command for port ${port}:`, error"
        },
        {
          "line": 201,
          "content": "logger.error(`Error executing terminal command for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing terminal command for port ${port}:`, error"
        },
        {
          "line": 201,
          "content": "logger.error(`Error executing terminal command for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error executing terminal command for port ${port}:`"
        },
        {
          "line": 201,
          "content": "logger.error(`Error executing terminal command for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing terminal command for port ${port}:`, error"
        }
      ]
    },
    "./backend/domain/services/SecurityService.js": {
      "totalFindings": 18,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6
      },
      "findings": [
        {
          "line": 53,
          "content": "this.logger.error(`Security analysis failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Security analysis failed:`, error.message"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Security analysis failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Security analysis failed:`, error"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Security analysis failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Security analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Dependency vulnerability analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Dependency vulnerability analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Dependency vulnerability analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Dependency vulnerability analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Dependency vulnerability analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Dependency vulnerability analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Security configuration analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Security configuration analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Security configuration analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Security configuration analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Security configuration analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Security configuration analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Code security analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Code security analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Code security analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Code security analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Code security analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Code security analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Secrets analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Secrets analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Secrets analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Secrets analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Secrets analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Secrets analysis failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Security recommendation generation failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Security recommendation generation failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Security recommendation generation failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Security recommendation generation failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Security recommendation generation failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Security recommendation generation failed:`, error"
        }
      ]
    },
    "./backend/domain/services/TestReportParser.js": {
      "totalFindings": 25,
      "byType": {
        "direct_data": 12,
        "variable_data": 11,
        "template_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 35,
          "content": "this.logger.info('Found test-report.md, parsing...');",
          "type": "direct_data",
          "match": "logger.info('Found test-report.md, parsing...'"
        },
        {
          "line": 35,
          "content": "this.logger.info('Found test-report.md, parsing...');",
          "type": "variable_data",
          "match": "logger.info('Found test-report.md, parsing"
        },
        {
          "line": 42,
          "content": "this.logger.warn('test-report.md not found, skipping...');",
          "type": "direct_data",
          "match": "logger.warn('test-report.md not found, skipping...'"
        },
        {
          "line": 42,
          "content": "this.logger.warn('test-report.md not found, skipping...');",
          "type": "variable_data",
          "match": "logger.warn('test-report.md not found, skipping"
        },
        {
          "line": 48,
          "content": "this.logger.info('Found test-report-full.md, parsing...');",
          "type": "direct_data",
          "match": "logger.info('Found test-report-full.md, parsing...'"
        },
        {
          "line": 48,
          "content": "this.logger.info('Found test-report-full.md, parsing...');",
          "type": "variable_data",
          "match": "logger.info('Found test-report-full.md, parsing"
        },
        {
          "line": 55,
          "content": "this.logger.warn('test-report-full.md not found, skipping...');",
          "type": "direct_data",
          "match": "logger.warn('test-report-full.md not found, skipping...'"
        },
        {
          "line": 55,
          "content": "this.logger.warn('test-report-full.md not found, skipping...');",
          "type": "variable_data",
          "match": "logger.warn('test-report-full.md not found, skipping"
        },
        {
          "line": 61,
          "content": "this.logger.info('Found coverage.md, parsing...');",
          "type": "direct_data",
          "match": "logger.info('Found coverage.md, parsing...'"
        },
        {
          "line": 61,
          "content": "this.logger.info('Found coverage.md, parsing...');",
          "type": "variable_data",
          "match": "logger.info('Found coverage.md, parsing"
        },
        {
          "line": 66,
          "content": "this.logger.warn('coverage.md not found, skipping...');",
          "type": "direct_data",
          "match": "logger.warn('coverage.md not found, skipping...'"
        },
        {
          "line": 66,
          "content": "this.logger.warn('coverage.md not found, skipping...');",
          "type": "variable_data",
          "match": "logger.warn('coverage.md not found, skipping"
        },
        {
          "line": 72,
          "content": "this.logger.info('Found test-analysis-full.json, parsing...');",
          "type": "direct_data",
          "match": "logger.info('Found test-analysis-full.json, parsing...'"
        },
        {
          "line": 72,
          "content": "this.logger.info('Found test-analysis-full.json, parsing...');",
          "type": "variable_data",
          "match": "logger.info('Found test-analysis-full.json, parsing"
        },
        {
          "line": 79,
          "content": "this.logger.warn('test-analysis-full.json not found, skipping...');",
          "type": "direct_data",
          "match": "logger.warn('test-analysis-full.json not found, skipping...'"
        },
        {
          "line": 79,
          "content": "this.logger.warn('test-analysis-full.json not found, skipping...');",
          "type": "variable_data",
          "match": "logger.warn('test-analysis-full.json not found, skipping"
        },
        {
          "line": 85,
          "content": "this.logger.info('Found test-data.json, parsing...');",
          "type": "direct_data",
          "match": "logger.info('Found test-data.json, parsing...'"
        },
        {
          "line": 85,
          "content": "this.logger.info('Found test-data.json, parsing...');",
          "type": "variable_data",
          "match": "logger.info('Found test-data.json, parsing"
        },
        {
          "line": 92,
          "content": "this.logger.warn('test-data.json not found, skipping...');",
          "type": "direct_data",
          "match": "logger.warn('test-data.json not found, skipping...'"
        },
        {
          "line": 92,
          "content": "this.logger.warn('test-data.json not found, skipping...');",
          "type": "variable_data",
          "match": "logger.warn('test-data.json not found, skipping"
        },
        {
          "line": 95,
          "content": "this.logger.info(`Parsed ${results.failingTests.length} failing tests, ${results.coverageIssues.length} coverage issues, ${results.legacyTests.length} legacy tests, ${results.complexTests.length} complex tests`);",
          "type": "direct_data",
          "match": "logger.info(`Parsed ${results.failingTests.length} failing tests, ${results.coverageIssues.length} coverage issues, ${results.legacyTests.length} legacy tests, ${results.complexTests.length} complex tests`"
        },
        {
          "line": 95,
          "content": "this.logger.info(`Parsed ${results.failingTests.length} failing tests, ${results.coverageIssues.length} coverage issues, ${results.legacyTests.length} legacy tests, ${results.complexTests.length} complex tests`);",
          "type": "template_data",
          "match": "logger.info(`Parsed ${results.failingTests.length} failing tests, ${results.coverageIssues.length} coverage issues, ${results.legacyTests.length} legacy tests, ${results.complexTests.length} complex tests`"
        },
        {
          "line": 99,
          "content": "this.logger.error('Error parsing test outputs:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error parsing test outputs:', error.message"
        },
        {
          "line": 99,
          "content": "this.logger.error('Error parsing test outputs:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error parsing test outputs:', error"
        },
        {
          "line": 99,
          "content": "this.logger.error('Error parsing test outputs:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error parsing test outputs:', error"
        }
      ]
    },
    "./backend/domain/services/ChatSessionService.js": {
      "totalFindings": 38,
      "byType": {
        "template_data": 11,
        "direct_data": 9,
        "variable_data": 9,
        "error_object": 9
      },
      "findings": [
        {
          "line": 100,
          "content": "logger.info(`Created session ${session.id} for user`);",
          "type": "template_data",
          "match": "logger.info(`Created session ${session.id} for user`"
        },
        {
          "line": 103,
          "content": "logger.error(`Failed to create session for user ${userId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to create session for user ${userId}:`, error"
        },
        {
          "line": 103,
          "content": "logger.error(`Failed to create session for user ${userId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to create session for user ${userId}:`, error"
        },
        {
          "line": 103,
          "content": "logger.error(`Failed to create session for user ${userId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to create session for user ${userId}:`"
        },
        {
          "line": 103,
          "content": "logger.error(`Failed to create session for user ${userId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to create session for user ${userId}:`, error"
        },
        {
          "line": 139,
          "content": "logger.info(`Switched to session ${sessionId} for user`);",
          "type": "template_data",
          "match": "logger.info(`Switched to session ${sessionId} for user`"
        },
        {
          "line": 142,
          "content": "logger.error(`Failed to switch to session ${sessionId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to switch to session ${sessionId}:`, error"
        },
        {
          "line": 142,
          "content": "logger.error(`Failed to switch to session ${sessionId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to switch to session ${sessionId}:`, error"
        },
        {
          "line": 142,
          "content": "logger.error(`Failed to switch to session ${sessionId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to switch to session ${sessionId}:`"
        },
        {
          "line": 142,
          "content": "logger.error(`Failed to switch to session ${sessionId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to switch to session ${sessionId}:`, error"
        },
        {
          "line": 163,
          "content": "logger.error(`Failed to get active session for user ${userId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get active session for user ${userId}:`, error"
        },
        {
          "line": 163,
          "content": "logger.error(`Failed to get active session for user ${userId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get active session for user ${userId}:`, error"
        },
        {
          "line": 163,
          "content": "logger.error(`Failed to get active session for user ${userId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to get active session for user ${userId}:`"
        },
        {
          "line": 163,
          "content": "logger.error(`Failed to get active session for user ${userId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get active session for user ${userId}:`, error"
        },
        {
          "line": 194,
          "content": "logger.error(`Failed to list sessions for user ${userId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to list sessions for user ${userId}:`, error"
        },
        {
          "line": 194,
          "content": "logger.error(`Failed to list sessions for user ${userId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to list sessions for user ${userId}:`, error"
        },
        {
          "line": 194,
          "content": "logger.error(`Failed to list sessions for user ${userId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to list sessions for user ${userId}:`"
        },
        {
          "line": 194,
          "content": "logger.error(`Failed to list sessions for user ${userId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to list sessions for user ${userId}:`, error"
        },
        {
          "line": 235,
          "content": "logger.info(`Closed session ${sessionId} for user`);",
          "type": "template_data",
          "match": "logger.info(`Closed session ${sessionId} for user`"
        },
        {
          "line": 238,
          "content": "logger.error(`Failed to close session ${sessionId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to close session ${sessionId}:`, error"
        },
        {
          "line": 238,
          "content": "logger.error(`Failed to close session ${sessionId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to close session ${sessionId}:`, error"
        },
        {
          "line": 238,
          "content": "logger.error(`Failed to close session ${sessionId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to close session ${sessionId}:`"
        },
        {
          "line": 238,
          "content": "logger.error(`Failed to close session ${sessionId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to close session ${sessionId}:`, error"
        },
        {
          "line": 273,
          "content": "logger.error(`Failed to get chat history for session ${sessionId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get chat history for session ${sessionId}:`, error"
        },
        {
          "line": 273,
          "content": "logger.error(`Failed to get chat history for session ${sessionId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get chat history for session ${sessionId}:`, error"
        },
        {
          "line": 273,
          "content": "logger.error(`Failed to get chat history for session ${sessionId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to get chat history for session ${sessionId}:`"
        },
        {
          "line": 273,
          "content": "logger.error(`Failed to get chat history for session ${sessionId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get chat history for session ${sessionId}:`, error"
        },
        {
          "line": 292,
          "content": "logger.info(`Updated IDE port to ${port} for session ${activeSession.id}`);",
          "type": "template_data",
          "match": "logger.info(`Updated IDE port to ${port} for session ${activeSession.id}`"
        },
        {
          "line": 295,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 295,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 295,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 312,
          "content": "logger.error('Failed to handle user logout:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to handle user logout:', error"
        },
        {
          "line": 312,
          "content": "logger.error('Failed to handle user logout:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to handle user logout:', error"
        },
        {
          "line": 312,
          "content": "logger.error('Failed to handle user logout:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to handle user logout:', error"
        },
        {
          "line": 334,
          "content": "logger.error(`Failed to get session stats for user ${userId}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get session stats for user ${userId}:`, error"
        },
        {
          "line": 334,
          "content": "logger.error(`Failed to get session stats for user ${userId}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get session stats for user ${userId}:`, error"
        },
        {
          "line": 334,
          "content": "logger.error(`Failed to get session stats for user ${userId}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to get session stats for user ${userId}:`"
        },
        {
          "line": 334,
          "content": "logger.error(`Failed to get session stats for user ${userId}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get session stats for user ${userId}:`, error"
        }
      ]
    },
    "./backend/domain/services/AuthService.js": {
      "totalFindings": 28,
      "byType": {
        "direct_data": 15,
        "variable_data": 10,
        "user_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 23,
          "content": "logger.debug('🔍 [AuthService] Attempting login for email:', email);",
          "type": "direct_data",
          "match": "logger.debug('🔍 [AuthService] Attempting login for email:', email"
        },
        {
          "line": 23,
          "content": "logger.debug('🔍 [AuthService] Attempting login for email:', email);",
          "type": "variable_data",
          "match": "logger.debug('🔍 [AuthService] Attempting login for email:', email"
        },
        {
          "line": 24,
          "content": "logger.info('🔍 [AuthService] Password length:', password.length);",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Password length:', password.length"
        },
        {
          "line": 24,
          "content": "logger.info('🔍 [AuthService] Password length:', password.length);",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthService] Password length:', password"
        },
        {
          "line": 28,
          "content": "logger.info('❌ [AuthService] User not found in database for email:', email);",
          "type": "direct_data",
          "match": "logger.info('❌ [AuthService] User not found in database for email:', email"
        },
        {
          "line": 28,
          "content": "logger.info('❌ [AuthService] User not found in database for email:', email);",
          "type": "variable_data",
          "match": "logger.info('❌ [AuthService] User not found in database for email:', email"
        },
        {
          "line": 32,
          "content": "logger.info('✅ [AuthService] User found in DB:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [AuthService] User found in DB:', {"
        },
        {
          "line": 41,
          "content": "logger.info('🔍 [AuthService] Password verification result:', isValidPassword);",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Password verification result:', isValidPassword"
        },
        {
          "line": 41,
          "content": "logger.info('🔍 [AuthService] Password verification result:', isValidPassword);",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthService] Password verification result:', isValidPassword"
        },
        {
          "line": 44,
          "content": "logger.info('❌ [AuthService] Password verification failed for user:', email);",
          "type": "direct_data",
          "match": "logger.info('❌ [AuthService] Password verification failed for user:', email"
        },
        {
          "line": 44,
          "content": "logger.info('❌ [AuthService] Password verification failed for user:', email);",
          "type": "variable_data",
          "match": "logger.info('❌ [AuthService] Password verification failed for user:', email"
        },
        {
          "line": 48,
          "content": "logger.info('✅ [AuthService] Login successful for user:', email);",
          "type": "direct_data",
          "match": "logger.info('✅ [AuthService] Login successful for user:', email"
        },
        {
          "line": 48,
          "content": "logger.info('✅ [AuthService] Login successful for user:', email);",
          "type": "variable_data",
          "match": "logger.info('✅ [AuthService] Login successful for user:', email"
        },
        {
          "line": 57,
          "content": "logger.info('🔍 [AuthService] Creating session for user:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Creating session for user:', {"
        },
        {
          "line": 66,
          "content": "logger.info('🔍 [AuthService] Generated tokens:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Generated tokens:', {"
        },
        {
          "line": 83,
          "content": "logger.info('🔍 [AuthService] Session created:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Session created:', {"
        },
        {
          "line": 130,
          "content": "// logger.info('🔍 [AuthService] Validating access token:', accessToken.substring(0, 20) + '...');",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Validating access token:', accessToken.substring(0, 20"
        },
        {
          "line": 130,
          "content": "// logger.info('🔍 [AuthService] Validating access token:', accessToken.substring(0, 20) + '...');",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthService] Validating access token:', accessToken"
        },
        {
          "line": 134,
          "content": "logger.info('🔍 [AuthService] JWT decoded successfully:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] JWT decoded successfully:', {"
        },
        {
          "line": 142,
          "content": "// logger.info('🔍 [AuthService] Session found:', session ? {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] Session found:', session ? {"
        },
        {
          "line": 142,
          "content": "// logger.info('🔍 [AuthService] Session found:', session ? {",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthService] Session found:', session"
        },
        {
          "line": 142,
          "content": "// logger.info('🔍 [AuthService] Session found:', session ? {",
          "type": "user_data",
          "match": "logger.info('🔍 [AuthService] Session found:', session"
        },
        {
          "line": 155,
          "content": "// logger.info('🔍 [AuthService] User found:', user ? {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthService] User found:', user ? {"
        },
        {
          "line": 155,
          "content": "// logger.info('🔍 [AuthService] User found:', user ? {",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthService] User found:', user"
        },
        {
          "line": 155,
          "content": "// logger.info('🔍 [AuthService] User found:', user ? {",
          "type": "user_data",
          "match": "logger.info('🔍 [AuthService] User found:', user"
        },
        {
          "line": 169,
          "content": "logger.error('❌ [AuthService] Token validation failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ [AuthService] Token validation failed:', error.message"
        },
        {
          "line": 169,
          "content": "logger.error('❌ [AuthService] Token validation failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ [AuthService] Token validation failed:', error"
        },
        {
          "line": 169,
          "content": "logger.error('❌ [AuthService] Token validation failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ [AuthService] Token validation failed:', error"
        }
      ]
    },
    "./backend/domain/services/dev-server/PackageJsonAnalyzer.js": {
      "totalFindings": 33,
      "byType": {
        "direct_data": 14,
        "variable_data": 14,
        "ide_data": 1,
        "file_content": 1,
        "error_object": 2,
        "template_data": 1
      },
      "findings": [
        {
          "line": 15,
          "content": "logger.info('Analyzing package.json in path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Analyzing package.json in path:', workspacePath"
        },
        {
          "line": 15,
          "content": "logger.info('Analyzing package.json in path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Analyzing package.json in path:', workspacePath"
        },
        {
          "line": 15,
          "content": "logger.info('Analyzing package.json in path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Analyzing package.json in path:', workspace"
        },
        {
          "line": 25,
          "content": "logger.info('Searching in directory, depth:', currentDepth);",
          "type": "direct_data",
          "match": "logger.info('Searching in directory, depth:', currentDepth"
        },
        {
          "line": 25,
          "content": "logger.info('Searching in directory, depth:', currentDepth);",
          "type": "variable_data",
          "match": "logger.info('Searching in directory, depth"
        },
        {
          "line": 28,
          "content": "// logger.info('Found', files.length, 'items in:', dir);",
          "type": "direct_data",
          "match": "logger.info('Found', files.length, 'items in:', dir"
        },
        {
          "line": 28,
          "content": "// logger.info('Found', files.length, 'items in:', dir);",
          "type": "variable_data",
          "match": "logger.info('Found', files"
        },
        {
          "line": 28,
          "content": "// logger.info('Found', files.length, 'items in:', dir);",
          "type": "file_content",
          "match": "logger.info('Found', file"
        },
        {
          "line": 37,
          "content": "logger.info('Recursing into subdirectory, depth:', currentDepth + 1);",
          "type": "direct_data",
          "match": "logger.info('Recursing into subdirectory, depth:', currentDepth + 1"
        },
        {
          "line": 37,
          "content": "logger.info('Recursing into subdirectory, depth:', currentDepth + 1);",
          "type": "variable_data",
          "match": "logger.info('Recursing into subdirectory, depth"
        },
        {
          "line": 48,
          "content": "logger.error('Error reading directory:', dir, 'Error:', e.message);",
          "type": "direct_data",
          "match": "logger.error('Error reading directory:', dir, 'Error:', e.message"
        },
        {
          "line": 48,
          "content": "logger.error('Error reading directory:', dir, 'Error:', e.message);",
          "type": "variable_data",
          "match": "logger.error('Error reading directory:', dir"
        },
        {
          "line": 53,
          "content": "logger.info('Total package.json files found:', allPackageJsons.length);",
          "type": "direct_data",
          "match": "logger.info('Total package.json files found:', allPackageJsons.length"
        },
        {
          "line": 53,
          "content": "logger.info('Total package.json files found:', allPackageJsons.length);",
          "type": "variable_data",
          "match": "logger.info('Total package.json files found:', allPackageJsons"
        },
        {
          "line": 54,
          "content": "logger.info('Total package.json files found:', allPackageJsons.length);",
          "type": "direct_data",
          "match": "logger.info('Total package.json files found:', allPackageJsons.length"
        },
        {
          "line": 54,
          "content": "logger.info('Total package.json files found:', allPackageJsons.length);",
          "type": "variable_data",
          "match": "logger.info('Total package.json files found:', allPackageJsons"
        },
        {
          "line": 59,
          "content": "logger.info('Candidate found with score:', score);",
          "type": "direct_data",
          "match": "logger.info('Candidate found with score:', score"
        },
        {
          "line": 59,
          "content": "logger.info('Candidate found with score:', score);",
          "type": "variable_data",
          "match": "logger.info('Candidate found with score:', score"
        },
        {
          "line": 79,
          "content": "// logger.info('Scripts in', pkgPath, ':', Object.entries(pkg.scripts || {}));",
          "type": "direct_data",
          "match": "logger.info('Scripts in', pkgPath, ':', Object.entries(pkg.scripts || {}"
        },
        {
          "line": 79,
          "content": "// logger.info('Scripts in', pkgPath, ':', Object.entries(pkg.scripts || {}));",
          "type": "variable_data",
          "match": "logger.info('Scripts in', pkgPath"
        },
        {
          "line": 88,
          "content": "logger.error('Error analyzing path:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error analyzing path:', error.message"
        },
        {
          "line": 88,
          "content": "logger.error('Error analyzing path:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error analyzing path:', error"
        },
        {
          "line": 88,
          "content": "logger.error('Error analyzing path:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error analyzing path:', error"
        },
        {
          "line": 138,
          "content": "logger.info('Analyzing scripts:', Object.keys(scripts));",
          "type": "direct_data",
          "match": "logger.info('Analyzing scripts:', Object.keys(scripts"
        },
        {
          "line": 138,
          "content": "logger.info('Analyzing scripts:', Object.keys(scripts));",
          "type": "variable_data",
          "match": "logger.info('Analyzing scripts:', Object"
        },
        {
          "line": 146,
          "content": "logger.info(`Script: ${scriptName}, Port extracted:`, port);",
          "type": "direct_data",
          "match": "logger.info(`Script: ${scriptName}, Port extracted:`, port"
        },
        {
          "line": 146,
          "content": "logger.info(`Script: ${scriptName}, Port extracted:`, port);",
          "type": "variable_data",
          "match": "logger.info(`Script: ${scriptName}, Port"
        },
        {
          "line": 146,
          "content": "logger.info(`Script: ${scriptName}, Port extracted:`, port);",
          "type": "template_data",
          "match": "logger.info(`Script: ${scriptName}, Port extracted:`"
        },
        {
          "line": 164,
          "content": "logger.info('Primary dev server detected:', primaryServer.url);",
          "type": "direct_data",
          "match": "logger.info('Primary dev server detected:', primaryServer.url"
        },
        {
          "line": 164,
          "content": "logger.info('Primary dev server detected:', primaryServer.url);",
          "type": "variable_data",
          "match": "logger.info('Primary dev server detected:', primaryServer"
        },
        {
          "line": 173,
          "content": "logger.error('Error parsing package.json:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error parsing package.json:', error.message"
        },
        {
          "line": 173,
          "content": "logger.error('Error parsing package.json:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error parsing package.json:', error"
        },
        {
          "line": 173,
          "content": "logger.error('Error parsing package.json:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error parsing package.json:', error"
        }
      ]
    },
    "./backend/domain/services/dev-server/CDPWorkspaceDetector.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "ide_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 55,
          "content": "logger.info('CDP workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('CDP workspace path:', workspacePath"
        },
        {
          "line": 55,
          "content": "logger.info('CDP workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('CDP workspace path:', workspacePath"
        },
        {
          "line": 55,
          "content": "logger.info('CDP workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('CDP workspace path:', workspace"
        },
        {
          "line": 65,
          "content": "logger.error('CDP error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('CDP error:', error.message"
        },
        {
          "line": 65,
          "content": "logger.error('CDP error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('CDP error:', error"
        },
        {
          "line": 65,
          "content": "logger.error('CDP error:', error.message);",
          "type": "error_object",
          "match": "logger.error('CDP error:', error"
        }
      ]
    },
    "./backend/domain/services/DocsImportService.js": {
      "totalFindings": 23,
      "byType": {
        "template_data": 5,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6
      },
      "findings": [
        {
          "line": 25,
          "content": "logger.info(`🔄 [DocsImportService] Starting docs import for project ${projectId} from workspace: ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 [DocsImportService] Starting docs import for project ${projectId} from workspace: ${workspacePath}`"
        },
        {
          "line": 30,
          "content": "logger.error(`❌ [DocsImportService] Import failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Import failed:`, error"
        },
        {
          "line": 30,
          "content": "logger.error(`❌ [DocsImportService] Import failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Import failed:`, error"
        },
        {
          "line": 30,
          "content": "logger.error(`❌ [DocsImportService] Import failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Import failed:`, error"
        },
        {
          "line": 40,
          "content": "logger.info(`🔄 [DocsImportService] Importing from workspace to database: ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 [DocsImportService] Importing from workspace to database: ${workspacePath}`"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Import from workspace failed:`, error"
        },
        {
          "line": 209,
          "content": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error"
        },
        {
          "line": 209,
          "content": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error"
        },
        {
          "line": 209,
          "content": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Error parsing markdown:`, error"
        },
        {
          "line": 267,
          "content": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error"
        },
        {
          "line": 267,
          "content": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error"
        },
        {
          "line": 267,
          "content": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Error parsing index file:`, error"
        },
        {
          "line": 277,
          "content": "logger.info(`🔄 [DocsImportService] Updating index file progress for feature ${featureId}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 [DocsImportService] Updating index file progress for feature ${featureId}`"
        },
        {
          "line": 286,
          "content": "logger.warn(`⚠️ [DocsImportService] No index file found for feature ${featureId}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [DocsImportService] No index file found for feature ${featureId}`"
        },
        {
          "line": 302,
          "content": "logger.info(`✅ [DocsImportService] Index file progress updated for feature ${featureId}`);",
          "type": "template_data",
          "match": "logger.info(`✅ [DocsImportService] Index file progress updated for feature ${featureId}`"
        },
        {
          "line": 306,
          "content": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error"
        },
        {
          "line": 306,
          "content": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error"
        },
        {
          "line": 306,
          "content": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Error updating index file progress:`, error"
        },
        {
          "line": 335,
          "content": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error"
        },
        {
          "line": 335,
          "content": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error"
        },
        {
          "line": 335,
          "content": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [DocsImportService] Error getting feature progress:`, error"
        }
      ]
    },
    "./backend/domain/services/CodeQualityService.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 7,
        "variable_data": 7,
        "template_data": 1,
        "error_object": 7
      },
      "findings": [
        {
          "line": 53,
          "content": "this.logger.error(`Code quality analysis failed for ${projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Code quality analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Code quality analysis failed for ${projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Code quality analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Code quality analysis failed for ${projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Code quality analysis failed for ${projectPath}:`"
        },
        {
          "line": 53,
          "content": "this.logger.error(`Code quality analysis failed for ${projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Code quality analysis failed for ${projectPath}:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Linting config analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Linting config analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Linting config analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Linting config analysis failed:`, error"
        },
        {
          "line": 68,
          "content": "this.logger.error(`Linting config analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Linting config analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Formatting config analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Formatting config analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Formatting config analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Formatting config analysis failed:`, error"
        },
        {
          "line": 82,
          "content": "this.logger.error(`Formatting config analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Formatting config analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Complexity analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Complexity analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Complexity analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Complexity analysis failed:`, error"
        },
        {
          "line": 96,
          "content": "this.logger.error(`Complexity analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Complexity analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Maintainability analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Maintainability analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Maintainability analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Maintainability analysis failed:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Maintainability analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Maintainability analysis failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`ESLint analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`ESLint analysis failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`ESLint analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`ESLint analysis failed:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`ESLint analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`ESLint analysis failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Recommendation generation failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Recommendation generation failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Recommendation generation failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Recommendation generation failed:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.error(`Recommendation generation failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Recommendation generation failed:`, error"
        }
      ]
    },
    "./backend/domain/services/TaskAnalysisService.js": {
      "totalFindings": 11,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1,
        "template_data": 8
      },
      "findings": [
        {
          "line": 91,
          "content": "this.logger.error(`Project analysis failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Project analysis failed:`, error.message"
        },
        {
          "line": 91,
          "content": "this.logger.error(`Project analysis failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Project analysis failed:`, error"
        },
        {
          "line": 91,
          "content": "this.logger.error(`Project analysis failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Project analysis failed:`, error"
        },
        {
          "line": 257,
          "content": "this.logger.warn(`Project type detection failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Project type detection failed: ${error.message}`"
        },
        {
          "line": 293,
          "content": "this.logger.warn(`Structure analysis failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Structure analysis failed: ${error.message}`"
        },
        {
          "line": 327,
          "content": "this.logger.warn(`Dependencies analysis failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Dependencies analysis failed: ${error.message}`"
        },
        {
          "line": 370,
          "content": "this.logger.warn(`Code quality analysis failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Code quality analysis failed: ${error.message}`"
        },
        {
          "line": 405,
          "content": "this.logger.warn(`Security analysis failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Security analysis failed: ${error.message}`"
        },
        {
          "line": 440,
          "content": "this.logger.warn(`Performance analysis failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Performance analysis failed: ${error.message}`"
        },
        {
          "line": 477,
          "content": "this.logger.warn(`AI suggestions generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`AI suggestions generation failed: ${error.message}`"
        },
        {
          "line": 510,
          "content": "this.logger.warn(`Task generation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Task generation failed: ${error.message}`"
        }
      ]
    },
    "./backend/domain/services/TestManagementService.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 6,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 120,
          "content": "logger.debug(`🔍 Analyzing legacy indicators for: ${testMetadata.filePath}`);",
          "type": "template_data",
          "match": "logger.debug(`🔍 Analyzing legacy indicators for: ${testMetadata.filePath}`"
        },
        {
          "line": 153,
          "content": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity: ${complexityScore}, Maintenance: ${maintenanceScore}`);",
          "type": "direct_data",
          "match": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity: ${complexityScore}, Maintenance: ${maintenanceScore}`"
        },
        {
          "line": 153,
          "content": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity: ${complexityScore}, Maintenance: ${maintenanceScore}`);",
          "type": "variable_data",
          "match": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity"
        },
        {
          "line": 153,
          "content": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity: ${complexityScore}, Maintenance: ${maintenanceScore}`);",
          "type": "template_data",
          "match": "logger.info(`📊 Scores calculated - Legacy: ${legacyScore}, Complexity: ${complexityScore}, Maintenance: ${maintenanceScore}`"
        },
        {
          "line": 170,
          "content": "logger.debug(`✅ Analysis complete for: ${testMetadata.filePath}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Analysis complete for: ${testMetadata.filePath}`"
        },
        {
          "line": 172,
          "content": "logger.warn(`Failed to analyze legacy indicators for ${testMetadata.filePath}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to analyze legacy indicators for ${testMetadata.filePath}: ${error.message}`"
        },
        {
          "line": 199,
          "content": "logger.warn(`Failed to process test file ${filePath}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to process test file ${filePath}: ${error.message}`"
        },
        {
          "line": 532,
          "content": "logger.warn(`Failed to import test metadata: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to import test metadata: ${error.message}`"
        }
      ]
    },
    "./backend/domain/services/TaskExecutionService.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 544,
          "content": "logger.error('Error handling execution error:', handleError);",
          "type": "direct_data",
          "match": "logger.error('Error handling execution error:', handleError"
        },
        {
          "line": 544,
          "content": "logger.error('Error handling execution error:', handleError);",
          "type": "variable_data",
          "match": "logger.error('Error handling execution error:', handleError"
        }
      ]
    },
    "./backend/domain/services/TestFixTaskGenerator.js": {
      "totalFindings": 30,
      "byType": {
        "template_data": 11,
        "direct_data": 8,
        "variable_data": 7,
        "error_object": 4
      },
      "findings": [
        {
          "line": 36,
          "content": "this.logger.debug(`Skipping failing test file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping failing test file: ${filePath}`"
        },
        {
          "line": 46,
          "content": "this.logger.debug(`Skipping coverage file: ${coverageIssue.file}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping coverage file: ${coverageIssue.file}`"
        },
        {
          "line": 57,
          "content": "this.logger.debug(`Skipping legacy test file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping legacy test file: ${filePath}`"
        },
        {
          "line": 67,
          "content": "this.logger.debug(`Skipping complex test file: ${complexTest.fileName}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping complex test file: ${complexTest.fileName}`"
        },
        {
          "line": 74,
          "content": "this.logger.info(`Generated ${tasks.length} tasks from test data`);",
          "type": "template_data",
          "match": "logger.info(`Generated ${tasks.length} tasks from test data`"
        },
        {
          "line": 82,
          "content": "this.logger.info(`Summary: ${totalFailingTests} failing tests, ${totalCoverageIssues} coverage issues, ${totalLegacyTests} legacy tests, ${totalComplexTests} complex tests processed`);",
          "type": "direct_data",
          "match": "logger.info(`Summary: ${totalFailingTests} failing tests, ${totalCoverageIssues} coverage issues, ${totalLegacyTests} legacy tests, ${totalComplexTests} complex tests processed`"
        },
        {
          "line": 82,
          "content": "this.logger.info(`Summary: ${totalFailingTests} failing tests, ${totalCoverageIssues} coverage issues, ${totalLegacyTests} legacy tests, ${totalComplexTests} complex tests processed`);",
          "type": "template_data",
          "match": "logger.info(`Summary: ${totalFailingTests} failing tests, ${totalCoverageIssues} coverage issues, ${totalLegacyTests} legacy tests, ${totalComplexTests} complex tests processed`"
        },
        {
          "line": 87,
          "content": "this.logger.error('Error generating tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error generating tasks:', error.message"
        },
        {
          "line": 87,
          "content": "this.logger.error('Error generating tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error generating tasks:', error"
        },
        {
          "line": 87,
          "content": "this.logger.error('Error generating tasks:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error generating tasks:', error"
        },
        {
          "line": 433,
          "content": "this.logger.info(`Saving ${tasks.length} tasks to database...`);",
          "type": "template_data",
          "match": "logger.info(`Saving ${tasks.length} tasks to database...`"
        },
        {
          "line": 445,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "direct_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping`"
        },
        {
          "line": 445,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "variable_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping"
        },
        {
          "line": 445,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "template_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping`"
        },
        {
          "line": 459,
          "content": "this.logger.error(`Failed to save task ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to save task ${task.id}:`, error.message"
        },
        {
          "line": 459,
          "content": "this.logger.error(`Failed to save task ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to save task ${task.id}:`, error"
        },
        {
          "line": 459,
          "content": "this.logger.error(`Failed to save task ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to save task ${task.id}:`"
        },
        {
          "line": 459,
          "content": "this.logger.error(`Failed to save task ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to save task ${task.id}:`, error"
        },
        {
          "line": 463,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "direct_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping`"
        },
        {
          "line": 463,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "variable_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping"
        },
        {
          "line": 463,
          "content": "this.logger.warn(`Task ${task.id} already exists, skipping`);",
          "type": "template_data",
          "match": "logger.warn(`Task ${task.id} already exists, skipping`"
        },
        {
          "line": 473,
          "content": "this.logger.info(`Successfully saved ${savedCount} tasks, skipped ${skippedCount} existing tasks`);",
          "type": "direct_data",
          "match": "logger.info(`Successfully saved ${savedCount} tasks, skipped ${skippedCount} existing tasks`"
        },
        {
          "line": 473,
          "content": "this.logger.info(`Successfully saved ${savedCount} tasks, skipped ${skippedCount} existing tasks`);",
          "type": "variable_data",
          "match": "logger.info(`Successfully saved ${savedCount} tasks, skipped"
        },
        {
          "line": 473,
          "content": "this.logger.info(`Successfully saved ${savedCount} tasks, skipped ${skippedCount} existing tasks`);",
          "type": "template_data",
          "match": "logger.info(`Successfully saved ${savedCount} tasks, skipped ${skippedCount} existing tasks`"
        },
        {
          "line": 477,
          "content": "this.logger.error('Error saving tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error saving tasks:', error.message"
        },
        {
          "line": 477,
          "content": "this.logger.error('Error saving tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error saving tasks:', error"
        },
        {
          "line": 477,
          "content": "this.logger.error('Error saving tasks:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error saving tasks:', error"
        },
        {
          "line": 509,
          "content": "this.logger.error('Error generating and saving tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error generating and saving tasks:', error.message"
        },
        {
          "line": 509,
          "content": "this.logger.error('Error generating and saving tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error generating and saving tasks:', error"
        },
        {
          "line": 509,
          "content": "this.logger.error('Error generating and saving tasks:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error generating and saving tasks:', error"
        }
      ]
    },
    "./backend/domain/services/ide/IDEFactory.js": {
      "totalFindings": 19,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3,
        "template_data": 10
      },
      "findings": [
        {
          "line": 53,
          "content": "logger.error('Failed to register default implementations:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to register default implementations:', error"
        },
        {
          "line": 53,
          "content": "logger.error('Failed to register default implementations:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to register default implementations:', error"
        },
        {
          "line": 53,
          "content": "logger.error('Failed to register default implementations:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to register default implementations:', error"
        },
        {
          "line": 95,
          "content": "logger.info(`Registered IDE implementation for type: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Registered IDE implementation for type: ${type}`"
        },
        {
          "line": 99,
          "content": "logger.error(`Failed to register IDE implementation for type ${type}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to register IDE implementation for type ${type}:`, error"
        },
        {
          "line": 99,
          "content": "logger.error(`Failed to register IDE implementation for type ${type}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to register IDE implementation for type ${type}:`, error"
        },
        {
          "line": 99,
          "content": "logger.error(`Failed to register IDE implementation for type ${type}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to register IDE implementation for type ${type}:`"
        },
        {
          "line": 99,
          "content": "logger.error(`Failed to register IDE implementation for type ${type}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to register IDE implementation for type ${type}:`, error"
        },
        {
          "line": 146,
          "content": "logger.info(`Created IDE instance for type: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Created IDE instance for type: ${type}`"
        },
        {
          "line": 156,
          "content": "logger.error(`Failed to create IDE instance for type ${type}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to create IDE instance for type ${type}:`, error"
        },
        {
          "line": 156,
          "content": "logger.error(`Failed to create IDE instance for type ${type}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to create IDE instance for type ${type}:`, error"
        },
        {
          "line": 156,
          "content": "logger.error(`Failed to create IDE instance for type ${type}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to create IDE instance for type ${type}:`"
        },
        {
          "line": 156,
          "content": "logger.error(`Failed to create IDE instance for type ${type}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to create IDE instance for type ${type}:`, error"
        },
        {
          "line": 193,
          "content": "logger.error(`Cannot set invalid IDE type as default: ${type}`);",
          "type": "template_data",
          "match": "logger.error(`Cannot set invalid IDE type as default: ${type}`"
        },
        {
          "line": 198,
          "content": "logger.error(`Cannot set unregistered IDE type as default: ${type}`);",
          "type": "template_data",
          "match": "logger.error(`Cannot set unregistered IDE type as default: ${type}`"
        },
        {
          "line": 203,
          "content": "logger.info(`Set default IDE type to: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Set default IDE type to: ${type}`"
        },
        {
          "line": 232,
          "content": "logger.error(`Cannot unregister default IDE type: ${type}`);",
          "type": "template_data",
          "match": "logger.error(`Cannot unregister default IDE type: ${type}`"
        },
        {
          "line": 238,
          "content": "logger.info(`Unregistered IDE type: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Unregistered IDE type: ${type}`"
        },
        {
          "line": 319,
          "content": "logger.info(`Falling back to default IDE type: ${this.defaultIDEType}`);",
          "type": "template_data",
          "match": "logger.info(`Falling back to default IDE type: ${this.defaultIDEType}`"
        }
      ]
    },
    "./backend/domain/services/ide/BaseIDE.js": {
      "totalFindings": 18,
      "byType": {
        "template_data": 6,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 3,
        "request_response": 1
      },
      "findings": [
        {
          "line": 54,
          "content": "logger.info(`Common services initialized for ${this.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Common services initialized for ${this.ideType}`"
        },
        {
          "line": 56,
          "content": "logger.error(`Failed to initialize common services:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to initialize common services:`, error"
        },
        {
          "line": 56,
          "content": "logger.error(`Failed to initialize common services:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to initialize common services:`, error"
        },
        {
          "line": 56,
          "content": "logger.error(`Failed to initialize common services:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to initialize common services:`, error"
        },
        {
          "line": 67,
          "content": "logger.info(`IDE changed for ${this.ideType}, resetting cache`);",
          "type": "direct_data",
          "match": "logger.info(`IDE changed for ${this.ideType}, resetting cache`"
        },
        {
          "line": 67,
          "content": "logger.info(`IDE changed for ${this.ideType}, resetting cache`);",
          "type": "variable_data",
          "match": "logger.info(`IDE changed for ${this.ideType}, resetting"
        },
        {
          "line": 67,
          "content": "logger.info(`IDE changed for ${this.ideType}, resetting cache`);",
          "type": "template_data",
          "match": "logger.info(`IDE changed for ${this.ideType}, resetting cache`"
        },
        {
          "line": 67,
          "content": "logger.info(`IDE changed for ${this.ideType}, resetting cache`);",
          "type": "request_response",
          "match": "logger.info(`IDE changed for ${this.ideType}, res"
        },
        {
          "line": 72,
          "content": "logger.info(`Switching browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching browser connection to port: ${eventData.port}`"
        },
        {
          "line": 74,
          "content": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched browser connection to port: ${eventData.port}`"
        },
        {
          "line": 76,
          "content": "logger.error(`Failed to switch browser connection:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to switch browser connection:`, error.message"
        },
        {
          "line": 76,
          "content": "logger.error(`Failed to switch browser connection:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to switch browser connection:`, error"
        },
        {
          "line": 76,
          "content": "logger.error(`Failed to switch browser connection:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to switch browser connection:`, error"
        },
        {
          "line": 102,
          "content": "logger.error(`Error in ${context}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error in ${context}:`, error"
        },
        {
          "line": 102,
          "content": "logger.error(`Error in ${context}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error in ${context}:`, error"
        },
        {
          "line": 102,
          "content": "logger.error(`Error in ${context}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error in ${context}:`"
        },
        {
          "line": 102,
          "content": "logger.error(`Error in ${context}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error in ${context}:`, error"
        },
        {
          "line": 118,
          "content": "logger.info(`${message}`);",
          "type": "template_data",
          "match": "logger.info(`${message}`"
        }
      ]
    },
    "./backend/domain/services/ide/implementations/CursorIDE.js": {
      "totalFindings": 51,
      "byType": {
        "direct_data": 16,
        "variable_data": 16,
        "template_data": 5,
        "ide_data": 8,
        "file_content": 3,
        "task_data": 3
      },
      "findings": [
        {
          "line": 90,
          "content": "logger.info('Stopping Cursor IDE on port', activePort);",
          "type": "direct_data",
          "match": "logger.info('Stopping Cursor IDE on port', activePort"
        },
        {
          "line": 90,
          "content": "logger.info('Stopping Cursor IDE on port', activePort);",
          "type": "variable_data",
          "match": "logger.info('Stopping Cursor IDE on port', activePort"
        },
        {
          "line": 207,
          "content": "logger.info(`switchToPort(${port}) called, current active port:`, currentActivePort);",
          "type": "template_data",
          "match": "logger.info(`switchToPort(${port}) called, current active port:`"
        },
        {
          "line": 210,
          "content": "logger.info(`Already connected to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Already connected to port ${port}`"
        },
        {
          "line": 219,
          "content": "logger.info(`Switching to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}`"
        },
        {
          "line": 224,
          "content": "logger.info(`Calling ideManager.switchToIDE(${port})`);",
          "type": "template_data",
          "match": "logger.info(`Calling ideManager.switchToIDE(${port})`"
        },
        {
          "line": 226,
          "content": "logger.info(`ideManager.switchToIDE(${port}) completed`);",
          "type": "template_data",
          "match": "logger.info(`ideManager.switchToIDE(${port}) completed`"
        },
        {
          "line": 305,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "direct_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 305,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "variable_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 305,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "ide_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 309,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Workspace path for port', port, ':', workspacePath"
        },
        {
          "line": 309,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 309,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 312,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "direct_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 312,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "variable_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 312,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "ide_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 318,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath"
        },
        {
          "line": 318,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 318,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 325,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl"
        },
        {
          "line": 325,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 325,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "ide_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 330,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No frontend found in workspace for port', port, ':', workspacePath"
        },
        {
          "line": 330,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 330,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 346,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 346,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 346,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "file_content",
          "match": "logger.info('Applying refactoring to file:', file"
        },
        {
          "line": 390,
          "content": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task.title);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task.title"
        },
        {
          "line": 390,
          "content": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task.title);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task"
        },
        {
          "line": 390,
          "content": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task.title);",
          "type": "task_data",
          "match": "logger.info('🔍 [CursorIDE] Sending task to Cursor IDE:', task"
        },
        {
          "line": 396,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 396,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 396,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspace"
        },
        {
          "line": 438,
          "content": "logger.info('✅ [CursorIDE] Created task file at:', taskFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [CursorIDE] Created task file at:', taskFilePath"
        },
        {
          "line": 438,
          "content": "logger.info('✅ [CursorIDE] Created task file at:', taskFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [CursorIDE] Created task file at:', taskFilePath"
        },
        {
          "line": 438,
          "content": "logger.info('✅ [CursorIDE] Created task file at:', taskFilePath);",
          "type": "task_data",
          "match": "logger.info('✅ [CursorIDE] Created task file at:', task"
        },
        {
          "line": 444,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening file in Cursor IDE:', filePath"
        },
        {
          "line": 444,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening file in Cursor IDE:', filePath"
        },
        {
          "line": 444,
          "content": "logger.info('Opening file in Cursor IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening file in Cursor IDE:', file"
        },
        {
          "line": 484,
          "content": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks'"
        },
        {
          "line": 484,
          "content": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', tasks"
        },
        {
          "line": 484,
          "content": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', tasks.length, 'tasks');",
          "type": "task_data",
          "match": "logger.info('🔍 [CursorIDE] Sending auto mode tasks to Cursor IDE:', task"
        },
        {
          "line": 490,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 490,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 490,
          "content": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [CursorIDE] Using active IDE workspace path:', workspace"
        },
        {
          "line": 542,
          "content": "logger.info('✅ [CursorIDE] Created auto mode file at:', autoModeFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [CursorIDE] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 542,
          "content": "logger.info('✅ [CursorIDE] Created auto mode file at:', autoModeFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [CursorIDE] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 554,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', filePath"
        },
        {
          "line": 554,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', filePath"
        },
        {
          "line": 554,
          "content": "logger.info('Opening auto mode file in Cursor IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening auto mode file in Cursor IDE:', file"
        }
      ]
    },
    "./backend/domain/services/ide/implementations/VSCodeIDE.js": {
      "totalFindings": 59,
      "byType": {
        "direct_data": 20,
        "variable_data": 20,
        "template_data": 5,
        "ide_data": 8,
        "file_content": 3,
        "task_data": 3
      },
      "findings": [
        {
          "line": 22,
          "content": "logger.info('ChatHistoryExtractor created with IDE type:', this.chatHistoryExtractor.ideType);",
          "type": "direct_data",
          "match": "logger.info('ChatHistoryExtractor created with IDE type:', this.chatHistoryExtractor.ideType"
        },
        {
          "line": 22,
          "content": "logger.info('ChatHistoryExtractor created with IDE type:', this.chatHistoryExtractor.ideType);",
          "type": "variable_data",
          "match": "logger.info('ChatHistoryExtractor created with IDE type:', this"
        },
        {
          "line": 23,
          "content": "logger.info('ChatHistoryExtractor selectors:', this.chatHistoryExtractor.selectors);",
          "type": "direct_data",
          "match": "logger.info('ChatHistoryExtractor selectors:', this.chatHistoryExtractor.selectors"
        },
        {
          "line": 23,
          "content": "logger.info('ChatHistoryExtractor selectors:', this.chatHistoryExtractor.selectors);",
          "type": "variable_data",
          "match": "logger.info('ChatHistoryExtractor selectors:', this"
        },
        {
          "line": 100,
          "content": "logger.info('Stopping VSCode IDE on port', activePort);",
          "type": "direct_data",
          "match": "logger.info('Stopping VSCode IDE on port', activePort"
        },
        {
          "line": 100,
          "content": "logger.info('Stopping VSCode IDE on port', activePort);",
          "type": "variable_data",
          "match": "logger.info('Stopping VSCode IDE on port', activePort"
        },
        {
          "line": 218,
          "content": "logger.info(`switchToPort(${port}) called, current active port:`, currentActivePort);",
          "type": "template_data",
          "match": "logger.info(`switchToPort(${port}) called, current active port:`"
        },
        {
          "line": 221,
          "content": "logger.info(`Already connected to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Already connected to port ${port}`"
        },
        {
          "line": 230,
          "content": "logger.info(`Switching to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}`"
        },
        {
          "line": 235,
          "content": "logger.info(`Calling ideManager.switchToIDE(${port})`);",
          "type": "template_data",
          "match": "logger.info(`Calling ideManager.switchToIDE(${port})`"
        },
        {
          "line": 237,
          "content": "logger.info(`ideManager.switchToIDE(${port}) completed`);",
          "type": "template_data",
          "match": "logger.info(`ideManager.switchToIDE(${port}) completed`"
        },
        {
          "line": 267,
          "content": "logger.info('Using chatHistoryExtractor with IDE type:', this.chatHistoryExtractor?.ideType);",
          "type": "direct_data",
          "match": "logger.info('Using chatHistoryExtractor with IDE type:', this.chatHistoryExtractor?.ideType"
        },
        {
          "line": 267,
          "content": "logger.info('Using chatHistoryExtractor with IDE type:', this.chatHistoryExtractor?.ideType);",
          "type": "variable_data",
          "match": "logger.info('Using chatHistoryExtractor with IDE type:', this"
        },
        {
          "line": 274,
          "content": "logger.info('No chatHistoryExtractor available, using base class');",
          "type": "direct_data",
          "match": "logger.info('No chatHistoryExtractor available, using base class'"
        },
        {
          "line": 274,
          "content": "logger.info('No chatHistoryExtractor available, using base class');",
          "type": "variable_data",
          "match": "logger.info('No chatHistoryExtractor available, using"
        },
        {
          "line": 334,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "direct_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 334,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "variable_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 334,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "ide_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 338,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Workspace path for port', port, ':', workspacePath"
        },
        {
          "line": 338,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 338,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 341,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "direct_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 341,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "variable_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 341,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "ide_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 347,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath"
        },
        {
          "line": 347,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 347,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 354,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl"
        },
        {
          "line": 354,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 354,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "ide_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 359,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No frontend found in workspace for port', port, ':', workspacePath"
        },
        {
          "line": 359,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 359,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 375,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 375,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 375,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "file_content",
          "match": "logger.info('Applying refactoring to file:', file"
        },
        {
          "line": 419,
          "content": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task.title);",
          "type": "direct_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task.title"
        },
        {
          "line": 419,
          "content": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task.title);",
          "type": "variable_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task"
        },
        {
          "line": 419,
          "content": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task.title);",
          "type": "task_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending task to VSCode IDE:', task"
        },
        {
          "line": 425,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 425,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 425,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspace"
        },
        {
          "line": 467,
          "content": "logger.info('✅ [VSCodeIDE] Created task file at:', taskFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [VSCodeIDE] Created task file at:', taskFilePath"
        },
        {
          "line": 467,
          "content": "logger.info('✅ [VSCodeIDE] Created task file at:', taskFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [VSCodeIDE] Created task file at:', taskFilePath"
        },
        {
          "line": 467,
          "content": "logger.info('✅ [VSCodeIDE] Created task file at:', taskFilePath);",
          "type": "task_data",
          "match": "logger.info('✅ [VSCodeIDE] Created task file at:', task"
        },
        {
          "line": 473,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening file in VSCode IDE:', filePath"
        },
        {
          "line": 473,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening file in VSCode IDE:', filePath"
        },
        {
          "line": 473,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening file in VSCode IDE:', file"
        },
        {
          "line": 513,
          "content": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "direct_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks'"
        },
        {
          "line": 513,
          "content": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "variable_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', tasks"
        },
        {
          "line": 513,
          "content": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "task_data",
          "match": "logger.info('🔍 [VSCodeIDE] Sending auto mode tasks to VSCode IDE:', task"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [VSCodeIDE] Using active IDE workspace path:', workspace"
        },
        {
          "line": 571,
          "content": "logger.info('✅ [VSCodeIDE] Created auto mode file at:', autoModeFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [VSCodeIDE] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 571,
          "content": "logger.info('✅ [VSCodeIDE] Created auto mode file at:', autoModeFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [VSCodeIDE] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 583,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', filePath"
        },
        {
          "line": 583,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', filePath"
        },
        {
          "line": 583,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', file"
        }
      ]
    },
    "./backend/domain/services/ide/implementations/WindsurfIDE.js": {
      "totalFindings": 25,
      "byType": {
        "direct_data": 7,
        "variable_data": 7,
        "template_data": 4,
        "error_object": 5,
        "task_data": 2
      },
      "findings": [
        {
          "line": 74,
          "content": "logger.error(`Error detecting Windsurf on port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error detecting Windsurf on port ${port}:`, error"
        },
        {
          "line": 74,
          "content": "logger.error(`Error detecting Windsurf on port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error detecting Windsurf on port ${port}:`, error"
        },
        {
          "line": 74,
          "content": "logger.error(`Error detecting Windsurf on port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error detecting Windsurf on port ${port}:`"
        },
        {
          "line": 74,
          "content": "logger.error(`Error detecting Windsurf on port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error detecting Windsurf on port ${port}:`, error"
        },
        {
          "line": 113,
          "content": "logger.error('Error getting version:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting version:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error getting version:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting version:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error getting version:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting version:', error"
        },
        {
          "line": 123,
          "content": "logger.info(`Executing command: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing command: ${command}`"
        },
        {
          "line": 138,
          "content": "logger.error(`Error executing command ${command}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing command ${command}:`, error"
        },
        {
          "line": 138,
          "content": "logger.error(`Error executing command ${command}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing command ${command}:`, error"
        },
        {
          "line": 138,
          "content": "logger.error(`Error executing command ${command}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error executing command ${command}:`"
        },
        {
          "line": 138,
          "content": "logger.error(`Error executing command ${command}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing command ${command}:`, error"
        },
        {
          "line": 166,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 166,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 166,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "direct_data",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "variable_data",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Error extracting chat history:', error);",
          "type": "error_object",
          "match": "logger.error('Error extracting chat history:', error"
        },
        {
          "line": 349,
          "content": "logger.info(`Applying refactoring: ${refactoringType}`);",
          "type": "template_data",
          "match": "logger.info(`Applying refactoring: ${refactoringType}`"
        },
        {
          "line": 354,
          "content": "logger.info(`Sending task:`, task);",
          "type": "direct_data",
          "match": "logger.info(`Sending task:`, task"
        },
        {
          "line": 354,
          "content": "logger.info(`Sending task:`, task);",
          "type": "variable_data",
          "match": "logger.info(`Sending task:`, task"
        },
        {
          "line": 354,
          "content": "logger.info(`Sending task:`, task);",
          "type": "task_data",
          "match": "logger.info(`Sending task:`, task"
        },
        {
          "line": 359,
          "content": "logger.info(`Sending auto mode tasks:`, tasks);",
          "type": "direct_data",
          "match": "logger.info(`Sending auto mode tasks:`, tasks"
        },
        {
          "line": 359,
          "content": "logger.info(`Sending auto mode tasks:`, tasks);",
          "type": "variable_data",
          "match": "logger.info(`Sending auto mode tasks:`, tasks"
        },
        {
          "line": 359,
          "content": "logger.info(`Sending auto mode tasks:`, tasks);",
          "type": "task_data",
          "match": "logger.info(`Sending auto mode tasks:`, task"
        }
      ]
    },
    "./backend/domain/services/auto-test/AutoTestFixSystem.js": {
      "totalFindings": 89,
      "byType": {
        "direct_data": 16,
        "variable_data": 14,
        "error_object": 8,
        "template_data": 51
      },
      "findings": [
        {
          "line": 78,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error.message"
        },
        {
          "line": 78,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 78,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 93,
          "content": "this.logger.warn(`No task repository available, cannot load existing tasks`);",
          "type": "direct_data",
          "match": "logger.warn(`No task repository available, cannot load existing tasks`"
        },
        {
          "line": 93,
          "content": "this.logger.warn(`No task repository available, cannot load existing tasks`);",
          "type": "variable_data",
          "match": "logger.warn(`No task repository available, cannot"
        },
        {
          "line": 122,
          "content": "this.logger.debug(`Skipping completed task: ${task.id}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping completed task: ${task.id}`"
        },
        {
          "line": 128,
          "content": "this.logger.debug(`Skipping task with completedAt: ${task.id}`);",
          "type": "template_data",
          "match": "logger.debug(`Skipping task with completedAt: ${task.id}`"
        },
        {
          "line": 135,
          "content": "this.logger.info(`Loaded ${activeTasks.length} active tasks from database (filtered from ${existingTasks.length} total)`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${activeTasks.length} active tasks from database (filtered from ${existingTasks.length} total)`"
        },
        {
          "line": 139,
          "content": "this.logger.error(`Failed to load existing tasks: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to load existing tasks: ${error.message}`"
        },
        {
          "line": 154,
          "content": "this.logger.info(`Starting auto test fix workflow ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Starting auto test fix workflow ${sessionId}`"
        },
        {
          "line": 183,
          "content": "this.logger.info(`No existing tasks found, will generate new tasks`);",
          "type": "direct_data",
          "match": "logger.info(`No existing tasks found, will generate new tasks`"
        },
        {
          "line": 183,
          "content": "this.logger.info(`No existing tasks found, will generate new tasks`);",
          "type": "variable_data",
          "match": "logger.info(`No existing tasks found, will"
        },
        {
          "line": 186,
          "content": "this.logger.info(`Loaded ${tasks.length} existing tasks from database`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${tasks.length} existing tasks from database`"
        },
        {
          "line": 216,
          "content": "this.logger.info(`Generated ${tasks.length} tasks in database`);",
          "type": "template_data",
          "match": "logger.info(`Generated ${tasks.length} tasks in database`"
        },
        {
          "line": 244,
          "content": "this.logger.info(`Auto test fix workflow completed successfully: ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Auto test fix workflow completed successfully: ${sessionId}`"
        },
        {
          "line": 248,
          "content": "this.logger.error(`Auto test fix workflow failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Auto test fix workflow failed: ${error.message}`"
        },
        {
          "line": 316,
          "content": "this.logger.info(`Analysis complete: ${result.totalIssues} issues found`);",
          "type": "template_data",
          "match": "logger.info(`Analysis complete: ${result.totalIssues} issues found`"
        },
        {
          "line": 363,
          "content": "this.logger.info(`Created test fix task: ${taskId}`);",
          "type": "template_data",
          "match": "logger.info(`Created test fix task: ${taskId}`"
        },
        {
          "line": 425,
          "content": "this.logger.info(`Processing ${tasks.length} tasks sequentially`);",
          "type": "template_data",
          "match": "logger.info(`Processing ${tasks.length} tasks sequentially`"
        },
        {
          "line": 445,
          "content": "this.logger.info(`Processing task ${i + 1}/${sortedTasks.length}: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`Processing task ${i + 1}/${sortedTasks.length}: ${task.title}`"
        },
        {
          "line": 462,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error.message"
        },
        {
          "line": 462,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 462,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`"
        },
        {
          "line": 462,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 484,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error.message"
        },
        {
          "line": 484,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 484,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`"
        },
        {
          "line": 484,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 507,
          "content": "this.logger.error(`Error processing task ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error processing task ${task.id}:`, error.message"
        },
        {
          "line": 507,
          "content": "this.logger.error(`Error processing task ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error processing task ${task.id}:`, error"
        },
        {
          "line": 507,
          "content": "this.logger.error(`Error processing task ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error processing task ${task.id}:`"
        },
        {
          "line": 507,
          "content": "this.logger.error(`Error processing task ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error processing task ${task.id}:`, error"
        },
        {
          "line": 514,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error.message"
        },
        {
          "line": 514,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 514,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`"
        },
        {
          "line": 514,
          "content": "this.logger.warn(`Failed to update task status for ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to update task status for ${task.id}:`, error"
        },
        {
          "line": 535,
          "content": "this.logger.info(`Sequential processing completed: ${result.completedTasks} completed, ${result.failedTasks} failed`);",
          "type": "direct_data",
          "match": "logger.info(`Sequential processing completed: ${result.completedTasks} completed, ${result.failedTasks} failed`"
        },
        {
          "line": 535,
          "content": "this.logger.info(`Sequential processing completed: ${result.completedTasks} completed, ${result.failedTasks} failed`);",
          "type": "template_data",
          "match": "logger.info(`Sequential processing completed: ${result.completedTasks} completed, ${result.failedTasks} failed`"
        },
        {
          "line": 539,
          "content": "this.logger.error(`Sequential processing failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Sequential processing failed:`, error.message"
        },
        {
          "line": 539,
          "content": "this.logger.error(`Sequential processing failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Sequential processing failed:`, error"
        },
        {
          "line": 539,
          "content": "this.logger.error(`Sequential processing failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Sequential processing failed:`, error"
        },
        {
          "line": 554,
          "content": "this.logger.warn('cursorIDE not available, using fallback processing');",
          "type": "direct_data",
          "match": "logger.warn('cursorIDE not available, using fallback processing'"
        },
        {
          "line": 554,
          "content": "this.logger.warn('cursorIDE not available, using fallback processing');",
          "type": "variable_data",
          "match": "logger.warn('cursorIDE not available, using"
        },
        {
          "line": 571,
          "content": "this.logger.info(`Creating workflow branch for task: ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Creating workflow branch for task: ${task.id}`"
        },
        {
          "line": 573,
          "content": "this.logger.info(`Created branch: ${branchResult.branchName}`);",
          "type": "template_data",
          "match": "logger.info(`Created branch: ${branchResult.branchName}`"
        },
        {
          "line": 575,
          "content": "this.logger.warn(`Failed to create workflow branch: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to create workflow branch: ${error.message}`"
        },
        {
          "line": 582,
          "content": "this.logger.info(`Sending task to Cursor IDE: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`Sending task to Cursor IDE: ${task.title}`"
        },
        {
          "line": 594,
          "content": "this.logger.info(`Confirmation attempt ${confirmationAttempts}/${maxConfirmationAttempts}`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation attempt ${confirmationAttempts}/${maxConfirmationAttempts}`"
        },
        {
          "line": 599,
          "content": "this.logger.info(`Confirmation result: status=${confirmationResult.status}, isValid=${confirmationResult.isValid}, confidence=${confirmationResult.confidence}`);",
          "type": "direct_data",
          "match": "logger.info(`Confirmation result: status=${confirmationResult.status}, isValid=${confirmationResult.isValid}, confidence=${confirmationResult.confidence}`"
        },
        {
          "line": 599,
          "content": "this.logger.info(`Confirmation result: status=${confirmationResult.status}, isValid=${confirmationResult.isValid}, confidence=${confirmationResult.confidence}`);",
          "type": "variable_data",
          "match": "logger.info(`Confirmation result: status=${confirmationResult.status}, isValid"
        },
        {
          "line": 599,
          "content": "this.logger.info(`Confirmation result: status=${confirmationResult.status}, isValid=${confirmationResult.isValid}, confidence=${confirmationResult.confidence}`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation result: status=${confirmationResult.status}, isValid=${confirmationResult.isValid}, confidence=${confirmationResult.confidence}`"
        },
        {
          "line": 602,
          "content": "this.logger.info(`Test results from AI: ${confirmationResult.testResults.status} ${confirmationResult.testResults.percentage}%`);",
          "type": "template_data",
          "match": "logger.info(`Test results from AI: ${confirmationResult.testResults.status} ${confirmationResult.testResults.percentage}%`"
        },
        {
          "line": 606,
          "content": "this.logger.info(`✅ Task confirmed as complete on attempt ${confirmationAttempts}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Task confirmed as complete on attempt ${confirmationAttempts}`"
        },
        {
          "line": 609,
          "content": "this.logger.info(`❌ Task not confirmed (status: ${confirmationResult.status}), attempt ${confirmationAttempts}/${maxConfirmationAttempts}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Task not confirmed (status: ${confirmationResult.status}), attempt ${confirmationAttempts}/${maxConfirmationAttempts}`"
        },
        {
          "line": 621,
          "content": "this.logger.info(`Proceeding with test validation for task: ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Proceeding with test validation for task: ${task.id}`"
        },
        {
          "line": 626,
          "content": "this.logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes committed`);",
          "type": "direct_data",
          "match": "logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes committed`"
        },
        {
          "line": 626,
          "content": "this.logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes committed`);",
          "type": "variable_data",
          "match": "logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes"
        },
        {
          "line": 626,
          "content": "this.logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes committed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Task ${task.id} completed successfully - Tests passed, changes committed`"
        },
        {
          "line": 628,
          "content": "this.logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes discarded, marked for review`);",
          "type": "direct_data",
          "match": "logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes discarded, marked for review`"
        },
        {
          "line": 628,
          "content": "this.logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes discarded, marked for review`);",
          "type": "variable_data",
          "match": "logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes"
        },
        {
          "line": 628,
          "content": "this.logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes discarded, marked for review`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ Task ${task.id} failed - Tests failed, changes discarded, marked for review`"
        },
        {
          "line": 631,
          "content": "this.logger.warn(`Task not confirmed after ${maxConfirmationAttempts} attempts (final status: ${confirmationResult?.status}), skipping test validation`);",
          "type": "template_data",
          "match": "logger.warn(`Task not confirmed after ${maxConfirmationAttempts} attempts (final status: ${confirmationResult?.status}), skipping test validation`"
        },
        {
          "line": 663,
          "content": "this.logger.info(`Task ${task.id} processed via Cursor IDE - Status: ${taskResult.taskStatus}`);",
          "type": "template_data",
          "match": "logger.info(`Task ${task.id} processed via Cursor IDE - Status: ${taskResult.taskStatus}`"
        },
        {
          "line": 667,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Task ${task.id} failed:`, error.message"
        },
        {
          "line": 667,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 667,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Task ${task.id} failed:`"
        },
        {
          "line": 667,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 791,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Task validation failed:`, error.message"
        },
        {
          "line": 791,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Task validation failed:`, error"
        },
        {
          "line": 791,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Task validation failed:`, error"
        },
        {
          "line": 810,
          "content": "this.logger.info(`Refactoring test: ${testName} in ${testFile}`);",
          "type": "template_data",
          "match": "logger.info(`Refactoring test: ${testName} in ${testFile}`"
        },
        {
          "line": 848,
          "content": "this.logger.info(`Processing task fallback: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`Processing task fallback: ${task.title}`"
        },
        {
          "line": 1045,
          "content": "this.logger.info(`Progress: ${event}`, {",
          "type": "direct_data",
          "match": "logger.info(`Progress: ${event}`, {"
        },
        {
          "line": 1045,
          "content": "this.logger.info(`Progress: ${event}`, {",
          "type": "template_data",
          "match": "logger.info(`Progress: ${event}`"
        },
        {
          "line": 1104,
          "content": "this.logger.info(`Starting test validation for task: ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Starting test validation for task: ${task.id}`"
        },
        {
          "line": 1115,
          "content": "this.logger.info(`Executing: ${testCommand}`);",
          "type": "template_data",
          "match": "logger.info(`Executing: ${testCommand}`"
        },
        {
          "line": 1138,
          "content": "this.logger.info(`Test output captured (${testOutput.length} chars)`);",
          "type": "template_data",
          "match": "logger.info(`Test output captured (${testOutput.length} chars)`"
        },
        {
          "line": 1140,
          "content": "this.logger.warn(`Could not read test output log: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Could not read test output log: ${error.message}`"
        },
        {
          "line": 1150,
          "content": "this.logger.info(`Test parsing result: ${testResult.successRate}% success rate`);",
          "type": "template_data",
          "match": "logger.info(`Test parsing result: ${testResult.successRate}% success rate`"
        },
        {
          "line": 1161,
          "content": "this.logger.info(`✅ Tests PASSED (${testResult.successRate}% >= ${successThreshold}%), committing to Git...`);",
          "type": "template_data",
          "match": "logger.info(`✅ Tests PASSED (${testResult.successRate}% >= ${successThreshold}%), committing to Git...`"
        },
        {
          "line": 1184,
          "content": "this.logger.info(`❌ Tests FAILED (${testResult.successRate}% < ${successThreshold}%), discarding changes and marking for review...`);",
          "type": "template_data",
          "match": "logger.info(`❌ Tests FAILED (${testResult.successRate}% < ${successThreshold}%), discarding changes and marking for review...`"
        },
        {
          "line": 1197,
          "content": "this.logger.info(`Executing: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing: ${command}`"
        },
        {
          "line": 1238,
          "content": "this.logger.error(`Test validation failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Test validation failed: ${error.message}`"
        },
        {
          "line": 1329,
          "content": "this.logger.error(`Error parsing test output: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error parsing test output: ${error.message}`"
        },
        {
          "line": 1349,
          "content": "this.logger.info(`Committing and pushing changes for task: ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Committing and pushing changes for task: ${task.id}`"
        },
        {
          "line": 1353,
          "content": "this.logger.warn(`Skipping commit - tests failed (${testInfo.successRate}%)`);",
          "type": "template_data",
          "match": "logger.warn(`Skipping commit - tests failed (${testInfo.successRate}%)`"
        },
        {
          "line": 1366,
          "content": "this.logger.info(`Commit message: ${commitMessage}`);",
          "type": "template_data",
          "match": "logger.info(`Commit message: ${commitMessage}`"
        },
        {
          "line": 1377,
          "content": "this.logger.info(`Executing: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing: ${command}`"
        },
        {
          "line": 1399,
          "content": "this.logger.error(`Failed to commit and push changes: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to commit and push changes: ${error.message}`"
        }
      ]
    },
    "./backend/domain/services/auto-finish/ConfirmationSystem.js": {
      "totalFindings": 23,
      "byType": {
        "template_data": 13,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 2
      },
      "findings": [
        {
          "line": 91,
          "content": "this.logger.info(`Loaded ${Object.keys(this.completionKeywords).length} languages`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${Object.keys(this.completionKeywords).length} languages`"
        },
        {
          "line": 105,
          "content": "this.logger.info(`Asking for confirmation: \"${question}\"`);",
          "type": "template_data",
          "match": "logger.info(`Asking for confirmation: \"${question}\"`"
        },
        {
          "line": 110,
          "content": "this.logger.info(`AI response: ${response}`);",
          "type": "template_data",
          "match": "logger.info(`AI response: ${response}`"
        },
        {
          "line": 125,
          "content": "this.logger.error(`Error asking confirmation: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error asking confirmation: ${error.message}`"
        },
        {
          "line": 212,
          "content": "this.logger.info(`Parsed response: status=${status}, isValid=${isValid}, confidence=${confidence}`);",
          "type": "direct_data",
          "match": "logger.info(`Parsed response: status=${status}, isValid=${isValid}, confidence=${confidence}`"
        },
        {
          "line": 212,
          "content": "this.logger.info(`Parsed response: status=${status}, isValid=${isValid}, confidence=${confidence}`);",
          "type": "variable_data",
          "match": "logger.info(`Parsed response: status=${status}, isValid"
        },
        {
          "line": 212,
          "content": "this.logger.info(`Parsed response: status=${status}, isValid=${isValid}, confidence=${confidence}`);",
          "type": "template_data",
          "match": "logger.info(`Parsed response: status=${status}, isValid=${isValid}, confidence=${confidence}`"
        },
        {
          "line": 353,
          "content": "this.logger.info(`Confirmation attempt ${attempt}/${maxAttempts}`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation attempt ${attempt}/${maxAttempts}`"
        },
        {
          "line": 363,
          "content": "this.logger.info(`Confirmation successful on attempt ${attempt}`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation successful on attempt ${attempt}`"
        },
        {
          "line": 376,
          "content": "this.logger.info(`Confirmation indicates incompletion on attempt ${attempt} (status: ${validationResult.status})`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation indicates incompletion on attempt ${attempt} (status: ${validationResult.status})`"
        },
        {
          "line": 389,
          "content": "this.logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying...`);",
          "type": "direct_data",
          "match": "logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying...`"
        },
        {
          "line": 389,
          "content": "this.logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying...`);",
          "type": "variable_data",
          "match": "logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying"
        },
        {
          "line": 389,
          "content": "this.logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying...`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation response ambiguous on attempt ${attempt}, retrying...`"
        },
        {
          "line": 397,
          "content": "this.logger.error(`Confirmation attempt ${attempt} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Confirmation attempt ${attempt} failed:`, error.message"
        },
        {
          "line": 397,
          "content": "this.logger.error(`Confirmation attempt ${attempt} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Confirmation attempt ${attempt} failed:`, error"
        },
        {
          "line": 397,
          "content": "this.logger.error(`Confirmation attempt ${attempt} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Confirmation attempt ${attempt} failed:`"
        },
        {
          "line": 397,
          "content": "this.logger.error(`Confirmation attempt ${attempt} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Confirmation attempt ${attempt} failed:`, error"
        },
        {
          "line": 406,
          "content": "this.logger.warn(`All ${maxAttempts} confirmation attempts failed`);",
          "type": "template_data",
          "match": "logger.warn(`All ${maxAttempts} confirmation attempts failed`"
        },
        {
          "line": 506,
          "content": "this.logger.error('Batch confirmation failed for response:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Batch confirmation failed for response:', error.message"
        },
        {
          "line": 506,
          "content": "this.logger.error('Batch confirmation failed for response:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Batch confirmation failed for response:', error"
        },
        {
          "line": 506,
          "content": "this.logger.error('Batch confirmation failed for response:', error.message);",
          "type": "error_object",
          "match": "logger.error('Batch confirmation failed for response:', error"
        },
        {
          "line": 580,
          "content": "this.logger.info(`Added completion keywords for language: ${language}`);",
          "type": "template_data",
          "match": "logger.info(`Added completion keywords for language: ${language}`"
        },
        {
          "line": 594,
          "content": "this.logger.info(`Added confirmation questions for language: ${language}`);",
          "type": "template_data",
          "match": "logger.info(`Added confirmation questions for language: ${language}`"
        }
      ]
    },
    "./backend/domain/services/auto-finish/TaskSequencer.js": {
      "totalFindings": 9,
      "byType": {
        "template_data": 4,
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 75,
          "content": "this.logger.info(`Loaded ${this.dependencyPatterns.length} dependency patterns`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${this.dependencyPatterns.length} dependency patterns`"
        },
        {
          "line": 86,
          "content": "this.logger.info(`Sequencing ${tasks.length} tasks...`);",
          "type": "template_data",
          "match": "logger.info(`Sequencing ${tasks.length} tasks...`"
        },
        {
          "line": 103,
          "content": "this.logger.warn('Circular dependencies detected:', circularDeps);",
          "type": "direct_data",
          "match": "logger.warn('Circular dependencies detected:', circularDeps"
        },
        {
          "line": 103,
          "content": "this.logger.warn('Circular dependencies detected:', circularDeps);",
          "type": "variable_data",
          "match": "logger.warn('Circular dependencies detected:', circularDeps"
        },
        {
          "line": 117,
          "content": "this.logger.info(`Successfully sequenced ${sequencedTasks.length} tasks`);",
          "type": "template_data",
          "match": "logger.info(`Successfully sequenced ${sequencedTasks.length} tasks`"
        },
        {
          "line": 122,
          "content": "this.logger.error('Sequencing failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Sequencing failed:', error.message"
        },
        {
          "line": 122,
          "content": "this.logger.error('Sequencing failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Sequencing failed:', error"
        },
        {
          "line": 122,
          "content": "this.logger.error('Sequencing failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Sequencing failed:', error"
        },
        {
          "line": 433,
          "content": "this.logger.warn(`Removed circular dependency: ${edgeToRemove.from} -> ${edgeToRemove.to}`);",
          "type": "template_data",
          "match": "logger.warn(`Removed circular dependency: ${edgeToRemove.from} -> ${edgeToRemove.to}`"
        }
      ]
    },
    "./backend/domain/services/auto-finish/TodoParser.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 5,
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 80,
          "content": "this.logger.info(`Loaded ${this.patterns.length} parsing patterns`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${this.patterns.length} parsing patterns`"
        },
        {
          "line": 128,
          "content": "this.logger.info(`Parsed ${tasks.length} tasks from input`);",
          "type": "template_data",
          "match": "logger.info(`Parsed ${tasks.length} tasks from input`"
        },
        {
          "line": 132,
          "content": "this.logger.error('Parsing failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Parsing failed:', error.message"
        },
        {
          "line": 132,
          "content": "this.logger.error('Parsing failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Parsing failed:', error"
        },
        {
          "line": 132,
          "content": "this.logger.error('Parsing failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Parsing failed:', error"
        },
        {
          "line": 199,
          "content": "this.logger.error('Failed to create task:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to create task:', error.message"
        },
        {
          "line": 199,
          "content": "this.logger.error('Failed to create task:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to create task:', error"
        },
        {
          "line": 199,
          "content": "this.logger.error('Failed to create task:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to create task:', error"
        },
        {
          "line": 359,
          "content": "this.logger.info(`Added custom pattern: ${pattern.name}`);",
          "type": "template_data",
          "match": "logger.info(`Added custom pattern: ${pattern.name}`"
        },
        {
          "line": 374,
          "content": "this.logger.info(`Removed pattern: ${patternName}`);",
          "type": "template_data",
          "match": "logger.info(`Removed pattern: ${patternName}`"
        },
        {
          "line": 397,
          "content": "this.logger.info(`Added keywords for task type: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Added keywords for task type: ${type}`"
        }
      ]
    },
    "./backend/domain/services/auto-finish/AutoFinishSystem.js": {
      "totalFindings": 49,
      "byType": {
        "direct_data": 11,
        "variable_data": 11,
        "error_object": 8,
        "template_data": 19
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.warn('⚠️ Git service not available, git workflow manager disabled');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ Git service not available, git workflow manager disabled'"
        },
        {
          "line": 63,
          "content": "this.logger.warn('⚠️ Git service not available, git workflow manager disabled');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ Git service not available, git"
        },
        {
          "line": 66,
          "content": "this.logger.error('Failed to initialize git workflow manager:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to initialize git workflow manager:', error.message"
        },
        {
          "line": 66,
          "content": "this.logger.error('Failed to initialize git workflow manager:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to initialize git workflow manager:', error"
        },
        {
          "line": 66,
          "content": "this.logger.error('Failed to initialize git workflow manager:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to initialize git workflow manager:', error"
        },
        {
          "line": 89,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error.message"
        },
        {
          "line": 89,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 89,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 105,
          "content": "this.logger.info(`Starting TODO processing session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Starting TODO processing session ${sessionId}`"
        },
        {
          "line": 126,
          "content": "this.logger.info(`Parsing TODO list for session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Parsing TODO list for session ${sessionId}`"
        },
        {
          "line": 151,
          "content": "this.logger.info(`Sequencing ${tasks.length} tasks for session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Sequencing ${tasks.length} tasks for session ${sessionId}`"
        },
        {
          "line": 160,
          "content": "this.logger.info(`Processing task ${task.id}: ${task.description}`);",
          "type": "template_data",
          "match": "logger.info(`Processing task ${task.id}: ${task.description}`"
        },
        {
          "line": 188,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Task ${task.id} failed:`, error.message"
        },
        {
          "line": 188,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 188,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Task ${task.id} failed:`"
        },
        {
          "line": 188,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 236,
          "content": "this.logger.info(`TODO processing completed for session ${sessionId}: ${completedTasks}/${tasks.length} tasks completed`);",
          "type": "template_data",
          "match": "logger.info(`TODO processing completed for session ${sessionId}: ${completedTasks}/${tasks.length} tasks completed`"
        },
        {
          "line": 241,
          "content": "this.logger.error(`TODO processing failed for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`TODO processing failed for session ${sessionId}:`, error.message"
        },
        {
          "line": 241,
          "content": "this.logger.error(`TODO processing failed for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`TODO processing failed for session ${sessionId}:`, error"
        },
        {
          "line": 241,
          "content": "this.logger.error(`TODO processing failed for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`TODO processing failed for session ${sessionId}:`"
        },
        {
          "line": 241,
          "content": "this.logger.error(`TODO processing failed for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`TODO processing failed for session ${sessionId}:`, error"
        },
        {
          "line": 274,
          "content": "this.logger.info(`Processing task ${task.id}: ${task.description}`);",
          "type": "template_data",
          "match": "logger.info(`Processing task ${task.id}: ${task.description}`"
        },
        {
          "line": 288,
          "content": "this.logger.info(`Enhanced task processing completed for task ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Enhanced task processing completed for task ${task.id}`"
        },
        {
          "line": 301,
          "content": "this.logger.error(`Enhanced task processing failed for task ${task.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Enhanced task processing failed for task ${task.id}:`, error.message"
        },
        {
          "line": 301,
          "content": "this.logger.error(`Enhanced task processing failed for task ${task.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Enhanced task processing failed for task ${task.id}:`, error"
        },
        {
          "line": 301,
          "content": "this.logger.error(`Enhanced task processing failed for task ${task.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Enhanced task processing failed for task ${task.id}:`"
        },
        {
          "line": 301,
          "content": "this.logger.error(`Enhanced task processing failed for task ${task.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Enhanced task processing failed for task ${task.id}:`, error"
        },
        {
          "line": 317,
          "content": "this.logger.info(`Confirmation attempt ${confirmationAttempts} for task ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Confirmation attempt ${confirmationAttempts} for task ${task.id}`"
        },
        {
          "line": 326,
          "content": "this.logger.info(`Task ${task.id} confirmed on attempt ${confirmationAttempts}`);",
          "type": "template_data",
          "match": "logger.info(`Task ${task.id} confirmed on attempt ${confirmationAttempts}`"
        },
        {
          "line": 335,
          "content": "this.logger.info(`Task ${task.id} requires user input, pausing`);",
          "type": "direct_data",
          "match": "logger.info(`Task ${task.id} requires user input, pausing`"
        },
        {
          "line": 335,
          "content": "this.logger.info(`Task ${task.id} requires user input, pausing`);",
          "type": "variable_data",
          "match": "logger.info(`Task ${task.id} requires user input, pausing"
        },
        {
          "line": 335,
          "content": "this.logger.info(`Task ${task.id} requires user input, pausing`);",
          "type": "template_data",
          "match": "logger.info(`Task ${task.id} requires user input, pausing`"
        },
        {
          "line": 356,
          "content": "this.logger.info(`Task ${task.id} not confirmed, continuing to next attempt`);",
          "type": "direct_data",
          "match": "logger.info(`Task ${task.id} not confirmed, continuing to next attempt`"
        },
        {
          "line": 356,
          "content": "this.logger.info(`Task ${task.id} not confirmed, continuing to next attempt`);",
          "type": "variable_data",
          "match": "logger.info(`Task ${task.id} not confirmed, continuing"
        },
        {
          "line": 356,
          "content": "this.logger.info(`Task ${task.id} not confirmed, continuing to next attempt`);",
          "type": "template_data",
          "match": "logger.info(`Task ${task.id} not confirmed, continuing to next attempt`"
        },
        {
          "line": 378,
          "content": "this.logger.info(`Task ${task.id} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`Task ${task.id} completed successfully`"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Task ${task.id} failed:`, error.message"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Task ${task.id} failed:`"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Task ${task.id} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Task ${task.id} failed:`, error"
        },
        {
          "line": 443,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Task validation failed:`, error.message"
        },
        {
          "line": 443,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Task validation failed:`, error"
        },
        {
          "line": 443,
          "content": "this.logger.error(`Task validation failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Task validation failed:`, error"
        },
        {
          "line": 494,
          "content": "this.logger.error(`Failed to stream progress for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to stream progress for session ${sessionId}:`, error.message"
        },
        {
          "line": 494,
          "content": "this.logger.error(`Failed to stream progress for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to stream progress for session ${sessionId}:`, error"
        },
        {
          "line": 494,
          "content": "this.logger.error(`Failed to stream progress for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to stream progress for session ${sessionId}:`"
        },
        {
          "line": 494,
          "content": "this.logger.error(`Failed to stream progress for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to stream progress for session ${sessionId}:`, error"
        },
        {
          "line": 535,
          "content": "this.logger.info(`Session ${sessionId} cancelled`);",
          "type": "template_data",
          "match": "logger.info(`Session ${sessionId} cancelled`"
        },
        {
          "line": 565,
          "content": "this.logger.info(`Cleaned up expired session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Cleaned up expired session ${sessionId}`"
        }
      ]
    },
    "./backend/domain/services/auto-finish/FallbackDetection.js": {
      "totalFindings": 14,
      "byType": {
        "template_data": 2,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 4
      },
      "findings": [
        {
          "line": 118,
          "content": "this.logger.info(`Loaded ${Object.keys(this.userInputKeywords).length} languages`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${Object.keys(this.userInputKeywords).length} languages`"
        },
        {
          "line": 196,
          "content": "this.logger.info(`Detection result: ${result.action} (confidence: ${result.confidence.toFixed(2)})`);",
          "type": "template_data",
          "match": "logger.info(`Detection result: ${result.action} (confidence: ${result.confidence.toFixed(2)})`"
        },
        {
          "line": 201,
          "content": "this.logger.error('Detection failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Detection failed:', error.message"
        },
        {
          "line": 201,
          "content": "this.logger.error('Detection failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Detection failed:', error"
        },
        {
          "line": 201,
          "content": "this.logger.error('Detection failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Detection failed:', error"
        },
        {
          "line": 346,
          "content": "this.logger.warn('Failed to check focused element:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to check focused element:', error.message"
        },
        {
          "line": 346,
          "content": "this.logger.warn('Failed to check focused element:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to check focused element:', error"
        },
        {
          "line": 346,
          "content": "this.logger.warn('Failed to check focused element:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Failed to check focused element:', error"
        },
        {
          "line": 359,
          "content": "this.logger.error('IDE state analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('IDE state analysis failed:', error.message"
        },
        {
          "line": 359,
          "content": "this.logger.error('IDE state analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('IDE state analysis failed:', error"
        },
        {
          "line": 359,
          "content": "this.logger.error('IDE state analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('IDE state analysis failed:', error"
        },
        {
          "line": 440,
          "content": "this.logger.error('File content analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('File content analysis failed:', error.message"
        },
        {
          "line": 440,
          "content": "this.logger.error('File content analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('File content analysis failed:', error"
        },
        {
          "line": 440,
          "content": "this.logger.error('File content analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('File content analysis failed:', error"
        }
      ]
    },
    "./backend/domain/services/TerminalLogReader.js": {
      "totalFindings": 43,
      "byType": {
        "template_data": 19,
        "direct_data": 8,
        "variable_data": 8,
        "error_object": 8
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.info(`Getting recent ${lines} logs for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Getting recent ${lines} logs for port ${port}`"
        },
        {
          "line": 40,
          "content": "logger.info(`No encrypted log file found for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`No encrypted log file found for port ${port}`"
        },
        {
          "line": 58,
          "content": "logger.info(`Retrieved ${decryptedEntries.length} log entries for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Retrieved ${decryptedEntries.length} log entries for port ${port}`"
        },
        {
          "line": 62,
          "content": "logger.error(`Error getting recent logs for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting recent logs for port ${port}:`, error"
        },
        {
          "line": 62,
          "content": "logger.error(`Error getting recent logs for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting recent logs for port ${port}:`, error"
        },
        {
          "line": 62,
          "content": "logger.error(`Error getting recent logs for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting recent logs for port ${port}:`"
        },
        {
          "line": 62,
          "content": "logger.error(`Error getting recent logs for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting recent logs for port ${port}:`, error"
        },
        {
          "line": 80,
          "content": "logger.info(`Searching logs for port ${port}: \"${searchText}\"`);",
          "type": "template_data",
          "match": "logger.info(`Searching logs for port ${port}: \"${searchText}\"`"
        },
        {
          "line": 94,
          "content": "logger.info(`No encrypted log file found for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`No encrypted log file found for port ${port}`"
        },
        {
          "line": 130,
          "content": "logger.info(`Found ${matchingEntries.length} matching entries for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${matchingEntries.length} matching entries for port ${port}`"
        },
        {
          "line": 134,
          "content": "logger.error(`Error searching logs for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error searching logs for port ${port}:`, error"
        },
        {
          "line": 134,
          "content": "logger.error(`Error searching logs for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error searching logs for port ${port}:`, error"
        },
        {
          "line": 134,
          "content": "logger.error(`Error searching logs for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error searching logs for port ${port}:`"
        },
        {
          "line": 134,
          "content": "logger.error(`Error searching logs for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error searching logs for port ${port}:`, error"
        },
        {
          "line": 149,
          "content": "logger.info(`Getting logs in time range for port ${port}: ${startTime} to ${endTime}`);",
          "type": "template_data",
          "match": "logger.info(`Getting logs in time range for port ${port}: ${startTime} to ${endTime}`"
        },
        {
          "line": 157,
          "content": "logger.info(`No encrypted log file found for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`No encrypted log file found for port ${port}`"
        },
        {
          "line": 178,
          "content": "logger.info(`Found ${filteredEntries.length} entries in time range for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${filteredEntries.length} entries in time range for port ${port}`"
        },
        {
          "line": 182,
          "content": "logger.error(`Error getting logs in time range for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting logs in time range for port ${port}:`, error"
        },
        {
          "line": 182,
          "content": "logger.error(`Error getting logs in time range for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting logs in time range for port ${port}:`, error"
        },
        {
          "line": 182,
          "content": "logger.error(`Error getting logs in time range for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting logs in time range for port ${port}:`"
        },
        {
          "line": 182,
          "content": "logger.error(`Error getting logs in time range for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting logs in time range for port ${port}:`, error"
        },
        {
          "line": 200,
          "content": "logger.info(`Exporting logs for port ${port} in ${format} format`);",
          "type": "template_data",
          "match": "logger.info(`Exporting logs for port ${port} in ${format} format`"
        },
        {
          "line": 229,
          "content": "logger.error(`Error exporting logs for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error exporting logs for port ${port}:`, error"
        },
        {
          "line": 229,
          "content": "logger.error(`Error exporting logs for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error exporting logs for port ${port}:`, error"
        },
        {
          "line": 229,
          "content": "logger.error(`Error exporting logs for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error exporting logs for port ${port}:`"
        },
        {
          "line": 229,
          "content": "logger.error(`Error exporting logs for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error exporting logs for port ${port}:`, error"
        },
        {
          "line": 260,
          "content": "logger.error('Error converting to CSV:', error);",
          "type": "direct_data",
          "match": "logger.error('Error converting to CSV:', error"
        },
        {
          "line": 260,
          "content": "logger.error('Error converting to CSV:', error);",
          "type": "variable_data",
          "match": "logger.error('Error converting to CSV:', error"
        },
        {
          "line": 260,
          "content": "logger.error('Error converting to CSV:', error);",
          "type": "error_object",
          "match": "logger.error('Error converting to CSV:', error"
        },
        {
          "line": 286,
          "content": "logger.error('Error converting to text:', error);",
          "type": "direct_data",
          "match": "logger.error('Error converting to text:', error"
        },
        {
          "line": 286,
          "content": "logger.error('Error converting to text:', error);",
          "type": "variable_data",
          "match": "logger.error('Error converting to text:', error"
        },
        {
          "line": 286,
          "content": "logger.error('Error converting to text:', error);",
          "type": "error_object",
          "match": "logger.error('Error converting to text:', error"
        },
        {
          "line": 299,
          "content": "logger.info(`Getting log statistics for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Getting log statistics for port ${port}`"
        },
        {
          "line": 307,
          "content": "logger.info(`No encrypted log file found for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`No encrypted log file found for port ${port}`"
        },
        {
          "line": 372,
          "content": "logger.info(`Statistics for port ${port}: ${allEntries.length} entries`);",
          "type": "template_data",
          "match": "logger.info(`Statistics for port ${port}: ${allEntries.length} entries`"
        },
        {
          "line": 376,
          "content": "logger.error(`Error getting log statistics for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting log statistics for port ${port}:`, error"
        },
        {
          "line": 376,
          "content": "logger.error(`Error getting log statistics for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting log statistics for port ${port}:`, error"
        },
        {
          "line": 376,
          "content": "logger.error(`Error getting log statistics for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting log statistics for port ${port}:`"
        },
        {
          "line": 376,
          "content": "logger.error(`Error getting log statistics for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting log statistics for port ${port}:`, error"
        },
        {
          "line": 389,
          "content": "logger.info(`Cleared cache for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Cleared cache for port ${port}`"
        },
        {
          "line": 395,
          "content": "logger.error('Error clearing cache:', error);",
          "type": "direct_data",
          "match": "logger.error('Error clearing cache:', error"
        },
        {
          "line": 395,
          "content": "logger.error('Error clearing cache:', error);",
          "type": "variable_data",
          "match": "logger.error('Error clearing cache:', error"
        },
        {
          "line": 395,
          "content": "logger.error('Error clearing cache:', error);",
          "type": "error_object",
          "match": "logger.error('Error clearing cache:', error"
        }
      ]
    },
    "./backend/domain/services/IDEPortManager.js": {
      "totalFindings": 69,
      "byType": {
        "direct_data": 22,
        "variable_data": 21,
        "template_data": 15,
        "error_object": 9,
        "ide_data": 2
      },
      "findings": [
        {
          "line": 38,
          "content": "logger.info('Received idePortFailure event:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Received idePortFailure event:', eventData"
        },
        {
          "line": 38,
          "content": "logger.info('Received idePortFailure event:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Received idePortFailure event:', eventData"
        },
        {
          "line": 45,
          "content": "logger.info('Received ideHealthChanged event:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Received ideHealthChanged event:', eventData"
        },
        {
          "line": 45,
          "content": "logger.info('Received ideHealthChanged event:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Received ideHealthChanged event:', eventData"
        },
        {
          "line": 64,
          "content": "logger.info('Using previously active port:', previouslyActive);",
          "type": "direct_data",
          "match": "logger.info('Using previously active port:', previouslyActive"
        },
        {
          "line": 64,
          "content": "logger.info('Using previously active port:', previouslyActive);",
          "type": "variable_data",
          "match": "logger.info('Using previously active port:', previouslyActive"
        },
        {
          "line": 71,
          "content": "logger.info(`Using first available port: ${firstAvailable}`);",
          "type": "template_data",
          "match": "logger.info(`Using first available port: ${firstAvailable}`"
        },
        {
          "line": 78,
          "content": "logger.info('Using healthiest IDE port:', healthiest);",
          "type": "direct_data",
          "match": "logger.info('Using healthiest IDE port:', healthiest"
        },
        {
          "line": 78,
          "content": "logger.info('Using healthiest IDE port:', healthiest);",
          "type": "variable_data",
          "match": "logger.info('Using healthiest IDE port:', healthiest"
        },
        {
          "line": 85,
          "content": "logger.info('Using default port range port:', defaultPort);",
          "type": "direct_data",
          "match": "logger.info('Using default port range port:', defaultPort"
        },
        {
          "line": 85,
          "content": "logger.info('Using default port range port:', defaultPort);",
          "type": "variable_data",
          "match": "logger.info('Using default port range port:', defaultPort"
        },
        {
          "line": 92,
          "content": "logger.error('Error selecting active port:', error);",
          "type": "direct_data",
          "match": "logger.error('Error selecting active port:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Error selecting active port:', error);",
          "type": "variable_data",
          "match": "logger.error('Error selecting active port:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Error selecting active port:', error);",
          "type": "error_object",
          "match": "logger.error('Error selecting active port:', error"
        },
        {
          "line": 111,
          "content": "logger.info(`Previously active port not available: ${this.activePort}`);",
          "type": "template_data",
          "match": "logger.info(`Previously active port not available: ${this.activePort}`"
        },
        {
          "line": 135,
          "content": "logger.info('Port validation failed for first IDE, but using it anyway:', firstIDE.port);",
          "type": "direct_data",
          "match": "logger.info('Port validation failed for first IDE, but using it anyway:', firstIDE.port"
        },
        {
          "line": 135,
          "content": "logger.info('Port validation failed for first IDE, but using it anyway:', firstIDE.port);",
          "type": "variable_data",
          "match": "logger.info('Port validation failed for first IDE, but"
        },
        {
          "line": 139,
          "content": "logger.error('Error getting first available port:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting first available port:', error"
        },
        {
          "line": 139,
          "content": "logger.error('Error getting first available port:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting first available port:', error"
        },
        {
          "line": 139,
          "content": "logger.error('Error getting first available port:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting first available port:', error"
        },
        {
          "line": 172,
          "content": "logger.error('Error getting healthiest IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting healthiest IDE:', error"
        },
        {
          "line": 172,
          "content": "logger.error('Error getting healthiest IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting healthiest IDE:', error"
        },
        {
          "line": 172,
          "content": "logger.error('Error getting healthiest IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting healthiest IDE:', error"
        },
        {
          "line": 194,
          "content": "logger.error('Error trying default port range:', error);",
          "type": "direct_data",
          "match": "logger.error('Error trying default port range:', error"
        },
        {
          "line": 194,
          "content": "logger.error('Error trying default port range:', error);",
          "type": "variable_data",
          "match": "logger.error('Error trying default port range:', error"
        },
        {
          "line": 194,
          "content": "logger.error('Error trying default port range:', error);",
          "type": "error_object",
          "match": "logger.error('Error trying default port range:', error"
        },
        {
          "line": 236,
          "content": "logger.info(`Validating port: ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Validating port: ${port}`"
        },
        {
          "line": 239,
          "content": "logger.info(`Health check result for port ${port}:`, health);",
          "type": "direct_data",
          "match": "logger.info(`Health check result for port ${port}:`, health"
        },
        {
          "line": 239,
          "content": "logger.info(`Health check result for port ${port}:`, health);",
          "type": "variable_data",
          "match": "logger.info(`Health check result for port ${port}:`, health"
        },
        {
          "line": 239,
          "content": "logger.info(`Health check result for port ${port}:`, health);",
          "type": "template_data",
          "match": "logger.info(`Health check result for port ${port}:`"
        },
        {
          "line": 243,
          "content": "logger.warn(`Port ${port} is not healthy: ${health.reason}`);",
          "type": "template_data",
          "match": "logger.warn(`Port ${port} is not healthy: ${health.reason}`"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during port validation for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error during port validation for port ${port}:`, error"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during port validation for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error during port validation for port ${port}:`, error"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during port validation for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error during port validation for port ${port}:`"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during port validation for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error during port validation for port ${port}:`, error"
        },
        {
          "line": 278,
          "content": "logger.info(`performHealthCheck: Looking for IDE on port ${port}. Found:`, !!ide);",
          "type": "direct_data",
          "match": "logger.info(`performHealthCheck: Looking for IDE on port ${port}. Found:`, !!ide"
        },
        {
          "line": 278,
          "content": "logger.info(`performHealthCheck: Looking for IDE on port ${port}. Found:`, !!ide);",
          "type": "template_data",
          "match": "logger.info(`performHealthCheck: Looking for IDE on port ${port}. Found:`"
        },
        {
          "line": 280,
          "content": "logger.warn(`performHealthCheck: IDE not found for port ${port}`);",
          "type": "template_data",
          "match": "logger.warn(`performHealthCheck: IDE not found for port ${port}`"
        },
        {
          "line": 287,
          "content": "logger.info(`performHealthCheck: IDE on port ${port} is healthy (detected and running)`);",
          "type": "template_data",
          "match": "logger.info(`performHealthCheck: IDE on port ${port} is healthy (detected and running)`"
        },
        {
          "line": 293,
          "content": "logger.warn(`performHealthCheck: IDE reported unhealthy for port ${port}`);",
          "type": "template_data",
          "match": "logger.warn(`performHealthCheck: IDE reported unhealthy for port ${port}`"
        },
        {
          "line": 299,
          "content": "logger.info(`performHealthCheck: IDE on port ${port} is healthy with workspace path`);",
          "type": "template_data",
          "match": "logger.info(`performHealthCheck: IDE on port ${port} is healthy with workspace path`"
        },
        {
          "line": 304,
          "content": "logger.info(`performHealthCheck: IDE on port ${port} is healthy (detected)`);",
          "type": "template_data",
          "match": "logger.info(`performHealthCheck: IDE on port ${port} is healthy (detected)`"
        },
        {
          "line": 307,
          "content": "logger.error(`performHealthCheck: Error for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`performHealthCheck: Error for port ${port}:`, error"
        },
        {
          "line": 307,
          "content": "logger.error(`performHealthCheck: Error for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`performHealthCheck: Error for port ${port}:`, error"
        },
        {
          "line": 307,
          "content": "logger.error(`performHealthCheck: Error for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`performHealthCheck: Error for port ${port}:`"
        },
        {
          "line": 307,
          "content": "logger.error(`performHealthCheck: Error for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`performHealthCheck: Error for port ${port}:`, error"
        },
        {
          "line": 319,
          "content": "logger.info('Handling port failure:', port, reason);",
          "type": "direct_data",
          "match": "logger.info('Handling port failure:', port, reason"
        },
        {
          "line": 319,
          "content": "logger.info('Handling port failure:', port, reason);",
          "type": "variable_data",
          "match": "logger.info('Handling port failure:', port"
        },
        {
          "line": 319,
          "content": "logger.info('Handling port failure:', port, reason);",
          "type": "ide_data",
          "match": "logger.info('Handling port failure:', port"
        },
        {
          "line": 327,
          "content": "logger.info('Active port failed, selecting new port');",
          "type": "direct_data",
          "match": "logger.info('Active port failed, selecting new port'"
        },
        {
          "line": 327,
          "content": "logger.info('Active port failed, selecting new port');",
          "type": "variable_data",
          "match": "logger.info('Active port failed, selecting"
        },
        {
          "line": 346,
          "content": "logger.info(`Setting active port: ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Setting active port: ${port}`"
        },
        {
          "line": 350,
          "content": "logger.error('Port validation failed:', port);",
          "type": "direct_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 350,
          "content": "logger.error('Port validation failed:', port);",
          "type": "variable_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 350,
          "content": "logger.error('Port validation failed:', port);",
          "type": "ide_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 372,
          "content": "logger.info(`Active port set successfully: ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Active port set successfully: ${port}`"
        },
        {
          "line": 375,
          "content": "logger.error('Error setting active port:', error);",
          "type": "direct_data",
          "match": "logger.error('Error setting active port:', error"
        },
        {
          "line": 375,
          "content": "logger.error('Error setting active port:', error);",
          "type": "variable_data",
          "match": "logger.error('Error setting active port:', error"
        },
        {
          "line": 375,
          "content": "logger.error('Error setting active port:', error);",
          "type": "error_object",
          "match": "logger.error('Error setting active port:', error"
        },
        {
          "line": 411,
          "content": "logger.info('Initialization already in progress, waiting...');",
          "type": "direct_data",
          "match": "logger.info('Initialization already in progress, waiting...'"
        },
        {
          "line": 411,
          "content": "logger.info('Initialization already in progress, waiting...');",
          "type": "variable_data",
          "match": "logger.info('Initialization already in progress, waiting"
        },
        {
          "line": 438,
          "content": "logger.error('Initialization failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 438,
          "content": "logger.error('Initialization failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 438,
          "content": "logger.error('Initialization failed:', error);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 457,
          "content": "logger.info('Current active port invalid, selecting new one');",
          "type": "direct_data",
          "match": "logger.info('Current active port invalid, selecting new one'"
        },
        {
          "line": 457,
          "content": "logger.info('Current active port invalid, selecting new one');",
          "type": "variable_data",
          "match": "logger.info('Current active port invalid, selecting"
        },
        {
          "line": 473,
          "content": "logger.error('Refresh failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Refresh failed:', error"
        },
        {
          "line": 473,
          "content": "logger.error('Refresh failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Refresh failed:', error"
        },
        {
          "line": 473,
          "content": "logger.error('Refresh failed:', error);",
          "type": "error_object",
          "match": "logger.error('Refresh failed:', error"
        }
      ]
    },
    "./backend/domain/services/analysis-output/package-extractor.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "template_data": 1
      },
      "findings": [
        {
          "line": 16,
          "content": "logger.debug('DEBUG: extractPackagesFromAnalysis called with:', Object.keys(analysisResults));",
          "type": "direct_data",
          "match": "logger.debug('DEBUG: extractPackagesFromAnalysis called with:', Object.keys(analysisResults"
        },
        {
          "line": 16,
          "content": "logger.debug('DEBUG: extractPackagesFromAnalysis called with:', Object.keys(analysisResults));",
          "type": "variable_data",
          "match": "logger.debug('DEBUG: extractPackagesFromAnalysis called with:', Object"
        },
        {
          "line": 48,
          "content": "logger.debug(`DEBUG: Found packages in ${path}.packages`);",
          "type": "template_data",
          "match": "logger.debug(`DEBUG: Found packages in ${path}.packages`"
        },
        {
          "line": 59,
          "content": "logger.debug('DEBUG: Total packages found:', packages.length);",
          "type": "direct_data",
          "match": "logger.debug('DEBUG: Total packages found:', packages.length"
        },
        {
          "line": 59,
          "content": "logger.debug('DEBUG: Total packages found:', packages.length);",
          "type": "variable_data",
          "match": "logger.debug('DEBUG: Total packages found:', packages"
        },
        {
          "line": 63,
          "content": "logger.debug('DEBUG: No packages found, using single package');",
          "type": "direct_data",
          "match": "logger.debug('DEBUG: No packages found, using single package'"
        },
        {
          "line": 63,
          "content": "logger.debug('DEBUG: No packages found, using single package');",
          "type": "variable_data",
          "match": "logger.debug('DEBUG: No packages found, using"
        }
      ]
    },
    "./backend/domain/services/ProjectMappingService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 38,
          "content": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error.message"
        },
        {
          "line": 38,
          "content": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error"
        },
        {
          "line": 38,
          "content": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error.message);",
          "type": "error_object",
          "match": "logger.warn('ProjectMappingService: Failed to check monorepo status:', error"
        }
      ]
    },
    "./backend/domain/services/AdvancedAnalysisService.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 85,
          "content": "this.logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer Score: ${analysis.metrics.layerScore}, Logic Score: ${analysis.metrics.logicScore}, Valid: ${analysis.overall}`);",
          "type": "direct_data",
          "match": "logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer Score: ${analysis.metrics.layerScore}, Logic Score: ${analysis.metrics.logicScore}, Valid: ${analysis.overall}`"
        },
        {
          "line": 85,
          "content": "this.logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer Score: ${analysis.metrics.layerScore}, Logic Score: ${analysis.metrics.logicScore}, Valid: ${analysis.overall}`);",
          "type": "variable_data",
          "match": "logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer"
        },
        {
          "line": 85,
          "content": "this.logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer Score: ${analysis.metrics.layerScore}, Logic Score: ${analysis.metrics.logicScore}, Valid: ${analysis.overall}`);",
          "type": "template_data",
          "match": "logger.info(`Advanced analysis completed successfully - Overall Score: ${analysis.metrics.overallScore}, Layer Score: ${analysis.metrics.layerScore}, Logic Score: ${analysis.metrics.logicScore}, Valid: ${analysis.overall}`"
        },
        {
          "line": 90,
          "content": "this.logger.error('Advanced analysis failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Advanced analysis failed:', error"
        },
        {
          "line": 90,
          "content": "this.logger.error('Advanced analysis failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Advanced analysis failed:', error"
        },
        {
          "line": 90,
          "content": "this.logger.error('Advanced analysis failed:', error);",
          "type": "error_object",
          "match": "logger.error('Advanced analysis failed:', error"
        }
      ]
    },
    "./backend/domain/services/VSCodeService.js": {
      "totalFindings": 93,
      "byType": {
        "direct_data": 32,
        "variable_data": 32,
        "request_response": 1,
        "error_object": 7,
        "file_content": 3,
        "template_data": 5,
        "ide_data": 10,
        "task_data": 3
      },
      "findings": [
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "direct_data",
          "match": "logger.info('IDE changed, resetting package.json cache'"
        },
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "variable_data",
          "match": "logger.info('IDE changed, resetting"
        },
        {
          "line": 26,
          "content": "logger.info('IDE changed, resetting package.json cache');",
          "type": "request_response",
          "match": "logger.info('IDE changed, res"
        },
        {
          "line": 27,
          "content": "logger.info('Event data:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 27,
          "content": "logger.info('Event data:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Event data:', eventData"
        },
        {
          "line": 32,
          "content": "logger.info('Switching browser connection to port:', eventData.port);",
          "type": "direct_data",
          "match": "logger.info('Switching browser connection to port:', eventData.port"
        },
        {
          "line": 32,
          "content": "logger.info('Switching browser connection to port:', eventData.port);",
          "type": "variable_data",
          "match": "logger.info('Switching browser connection to port:', eventData"
        },
        {
          "line": 34,
          "content": "logger.info('Successfully switched browser connection to port:', eventData.port);",
          "type": "direct_data",
          "match": "logger.info('Successfully switched browser connection to port:', eventData.port"
        },
        {
          "line": 34,
          "content": "logger.info('Successfully switched browser connection to port:', eventData.port);",
          "type": "variable_data",
          "match": "logger.info('Successfully switched browser connection to port:', eventData"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to switch browser connection:', error.message"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 36,
          "content": "logger.error('Failed to switch browser connection:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to switch browser connection:', error"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to VSCode IDE:', prompt.substring(0, 100) + '...');",
          "type": "direct_data",
          "match": "logger.info('Sending prompt to VSCode IDE:', prompt.substring(0, 100"
        },
        {
          "line": 105,
          "content": "logger.info('Sending prompt to VSCode IDE:', prompt.substring(0, 100) + '...');",
          "type": "variable_data",
          "match": "logger.info('Sending prompt to VSCode IDE:', prompt"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to VSCode:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending prompt to VSCode:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to VSCode:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending prompt to VSCode:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Error sending prompt to VSCode:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending prompt to VSCode:', error"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Applying refactoring to file:', filePath"
        },
        {
          "line": 126,
          "content": "logger.info('Applying refactoring to file:', filePath);",
          "type": "file_content",
          "match": "logger.info('Applying refactoring to file:', file"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "direct_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "variable_data",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 156,
          "content": "logger.error('Error applying refactoring:', error);",
          "type": "error_object",
          "match": "logger.error('Error applying refactoring:', error"
        },
        {
          "line": 189,
          "content": "logger.info(`getActivePort() called, returning: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`getActivePort() called, returning: ${activePort}`"
        },
        {
          "line": 195,
          "content": "logger.info(`switchToPort(${port}) called, current active port:`, currentActivePort);",
          "type": "template_data",
          "match": "logger.info(`switchToPort(${port}) called, current active port:`"
        },
        {
          "line": 198,
          "content": "logger.info(`Already connected to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Already connected to port ${port}`"
        },
        {
          "line": 202,
          "content": "logger.info(`Switching to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}`"
        },
        {
          "line": 205,
          "content": "logger.info(`Successfully switched to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched to port ${port}`"
        },
        {
          "line": 217,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspacePath"
        },
        {
          "line": 217,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspacePath"
        },
        {
          "line": 217,
          "content": "logger.info('Using workspace path for package.json analysis:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Using workspace path for package.json analysis:', workspace"
        },
        {
          "line": 224,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath"
        },
        {
          "line": 224,
          "content": "logger.info('Virtual workspace detected, using project root as fallback:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Virtual workspace detected, using"
        },
        {
          "line": 229,
          "content": "logger.info('Dev server detected via package.json:', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json:', packageJsonUrl"
        },
        {
          "line": 229,
          "content": "logger.info('Dev server detected via package.json:', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json:', packageJsonUrl"
        },
        {
          "line": 233,
          "content": "logger.info('Package.json analysis failed, trying terminal monitoring...');",
          "type": "direct_data",
          "match": "logger.info('Package.json analysis failed, trying terminal monitoring...'"
        },
        {
          "line": 233,
          "content": "logger.info('Package.json analysis failed, trying terminal monitoring...');",
          "type": "variable_data",
          "match": "logger.info('Package.json analysis failed, trying"
        },
        {
          "line": 236,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 236,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 236,
          "content": "logger.error('Error in enhanced terminal monitoring:', error);",
          "type": "error_object",
          "match": "logger.error('Error in enhanced terminal monitoring:', error"
        },
        {
          "line": 255,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "direct_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 255,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "variable_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 255,
          "content": "logger.info('Getting user app URL for port:', port);",
          "type": "ide_data",
          "match": "logger.info('Getting user app URL for port:', port"
        },
        {
          "line": 259,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Workspace path for port', port, ':', workspacePath"
        },
        {
          "line": 259,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 259,
          "content": "logger.info('Workspace path for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Workspace path for port', port"
        },
        {
          "line": 262,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "direct_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 262,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "variable_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 262,
          "content": "logger.info('No workspace path found for port', port);",
          "type": "ide_data",
          "match": "logger.info('No workspace path found for port', port"
        },
        {
          "line": 268,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath"
        },
        {
          "line": 268,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 268,
          "content": "logger.info('Skipping virtual workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Skipping virtual workspace for port', port"
        },
        {
          "line": 275,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "direct_data",
          "match": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl"
        },
        {
          "line": 275,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "variable_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 275,
          "content": "logger.info('Dev server detected via package.json for port', port, ':', packageJsonUrl);",
          "type": "ide_data",
          "match": "logger.info('Dev server detected via package.json for port', port"
        },
        {
          "line": 280,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No frontend found in workspace for port', port, ':', workspacePath"
        },
        {
          "line": 280,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 280,
          "content": "logger.info('No frontend found in workspace for port', port, ':', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('No frontend found in workspace for port', port"
        },
        {
          "line": 283,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting user app URL for port', port, ':', error"
        },
        {
          "line": 283,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting user app URL for port', port"
        },
        {
          "line": 283,
          "content": "logger.error('Error getting user app URL for port', port, ':', error);",
          "type": "ide_data",
          "match": "logger.error('Error getting user app URL for port', port"
        },
        {
          "line": 414,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 414,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 414,
          "content": "logger.error('Error getting connection status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting connection status:', error"
        },
        {
          "line": 431,
          "content": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task.title);",
          "type": "direct_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task.title"
        },
        {
          "line": 431,
          "content": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task.title);",
          "type": "variable_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task"
        },
        {
          "line": 431,
          "content": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task.title);",
          "type": "task_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending task to VSCode IDE:', task"
        },
        {
          "line": 438,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 438,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 438,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspace"
        },
        {
          "line": 480,
          "content": "logger.info('✅ [vscodeIDEService] Created task file at:', taskFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [vscodeIDEService] Created task file at:', taskFilePath"
        },
        {
          "line": 480,
          "content": "logger.info('✅ [vscodeIDEService] Created task file at:', taskFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [vscodeIDEService] Created task file at:', taskFilePath"
        },
        {
          "line": 480,
          "content": "logger.info('✅ [vscodeIDEService] Created task file at:', taskFilePath);",
          "type": "task_data",
          "match": "logger.info('✅ [vscodeIDEService] Created task file at:', task"
        },
        {
          "line": 486,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening file in VSCode IDE:', filePath"
        },
        {
          "line": 486,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening file in VSCode IDE:', filePath"
        },
        {
          "line": 486,
          "content": "logger.info('Opening file in VSCode IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening file in VSCode IDE:', file"
        },
        {
          "line": 499,
          "content": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error"
        },
        {
          "line": 499,
          "content": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error"
        },
        {
          "line": 499,
          "content": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [vscodeIDEService] Error sending task to VSCode IDE:', error"
        },
        {
          "line": 512,
          "content": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "direct_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks'"
        },
        {
          "line": 512,
          "content": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "variable_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', tasks"
        },
        {
          "line": 512,
          "content": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', tasks.length, 'tasks');",
          "type": "task_data",
          "match": "logger.info('🔍 [vscodeIDEService] Sending auto mode tasks to VSCode IDE:', task"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath"
        },
        {
          "line": 519,
          "content": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspacePath);",
          "type": "ide_data",
          "match": "logger.info('🔍 [vscodeIDEService] Using active IDE workspace path:', workspace"
        },
        {
          "line": 571,
          "content": "logger.info('✅ [vscodeIDEService] Created auto mode file at:', autoModeFilePath);",
          "type": "direct_data",
          "match": "logger.info('✅ [vscodeIDEService] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 571,
          "content": "logger.info('✅ [vscodeIDEService] Created auto mode file at:', autoModeFilePath);",
          "type": "variable_data",
          "match": "logger.info('✅ [vscodeIDEService] Created auto mode file at:', autoModeFilePath"
        },
        {
          "line": 578,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', filePath"
        },
        {
          "line": 578,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', filePath"
        },
        {
          "line": 578,
          "content": "logger.info('Opening auto mode file in VSCode IDE:', filePath);",
          "type": "file_content",
          "match": "logger.info('Opening auto mode file in VSCode IDE:', file"
        },
        {
          "line": 592,
          "content": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error"
        },
        {
          "line": 592,
          "content": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error"
        },
        {
          "line": 592,
          "content": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [vscodeIDEService] Error sending auto mode tasks to VSCode IDE:', error"
        }
      ]
    },
    "./backend/domain/services/workspace/WorkspacePathDetector.js": {
      "totalFindings": 30,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "template_data": 6,
        "error_object": 2,
        "ide_data": 1,
        "file_content": 1
      },
      "findings": [
        {
          "line": 89,
          "content": "logger.info(`Workspace path for port ${port} already set/cached:`, cached);",
          "type": "direct_data",
          "match": "logger.info(`Workspace path for port ${port} already set/cached:`, cached"
        },
        {
          "line": 89,
          "content": "logger.info(`Workspace path for port ${port} already set/cached:`, cached);",
          "type": "variable_data",
          "match": "logger.info(`Workspace path for port ${port} already set/cached:`, cached"
        },
        {
          "line": 89,
          "content": "logger.info(`Workspace path for port ${port} already set/cached:`, cached);",
          "type": "template_data",
          "match": "logger.info(`Workspace path for port ${port} already set/cached:`"
        },
        {
          "line": 95,
          "content": "logger.info(`Workspace detection already in progress for port ${port}, waiting...`);",
          "type": "direct_data",
          "match": "logger.info(`Workspace detection already in progress for port ${port}, waiting...`"
        },
        {
          "line": 95,
          "content": "logger.info(`Workspace detection already in progress for port ${port}, waiting...`);",
          "type": "variable_data",
          "match": "logger.info(`Workspace detection already in progress for port ${port}, waiting"
        },
        {
          "line": 95,
          "content": "logger.info(`Workspace detection already in progress for port ${port}, waiting...`);",
          "type": "template_data",
          "match": "logger.info(`Workspace detection already in progress for port ${port}, waiting...`"
        },
        {
          "line": 108,
          "content": "logger.info(`Trying to get pwd from terminal for port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Trying to get pwd from terminal for port ${port}...`"
        },
        {
          "line": 112,
          "content": "logger.info(`Detected IDE type: ${ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Detected IDE type: ${ideType}`"
        },
        {
          "line": 138,
          "content": "logger.info('Found terminal input, sending pwd command...');",
          "type": "direct_data",
          "match": "logger.info('Found terminal input, sending pwd command...'"
        },
        {
          "line": 138,
          "content": "logger.info('Found terminal input, sending pwd command...');",
          "type": "variable_data",
          "match": "logger.info('Found terminal input, sending"
        },
        {
          "line": 154,
          "content": "logger.info('Terminal output:', text);",
          "type": "direct_data",
          "match": "logger.info('Terminal output:', text"
        },
        {
          "line": 154,
          "content": "logger.info('Terminal output:', text);",
          "type": "variable_data",
          "match": "logger.info('Terminal output:', text"
        },
        {
          "line": 161,
          "content": "logger.info('Found path:', line);",
          "type": "direct_data",
          "match": "logger.info('Found path:', line"
        },
        {
          "line": 161,
          "content": "logger.info('Found path:', line);",
          "type": "variable_data",
          "match": "logger.info('Found path:', line"
        },
        {
          "line": 187,
          "content": "logger.info(`Terminal method failed, trying VS Code API for port ${port}...`);",
          "type": "direct_data",
          "match": "logger.info(`Terminal method failed, trying VS Code API for port ${port}...`"
        },
        {
          "line": 187,
          "content": "logger.info(`Terminal method failed, trying VS Code API for port ${port}...`);",
          "type": "variable_data",
          "match": "logger.info(`Terminal method failed, trying"
        },
        {
          "line": 187,
          "content": "logger.info(`Terminal method failed, trying VS Code API for port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Terminal method failed, trying VS Code API for port ${port}...`"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 223,
          "content": "logger.error('Error getting workspace path:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting workspace path:', error"
        },
        {
          "line": 235,
          "content": "logger.info(`Set workspace path for port ${port}:`, workspacePath);",
          "type": "direct_data",
          "match": "logger.info(`Set workspace path for port ${port}:`, workspacePath"
        },
        {
          "line": 235,
          "content": "logger.info(`Set workspace path for port ${port}:`, workspacePath);",
          "type": "variable_data",
          "match": "logger.info(`Set workspace path for port ${port}:`, workspacePath"
        },
        {
          "line": 235,
          "content": "logger.info(`Set workspace path for port ${port}:`, workspacePath);",
          "type": "template_data",
          "match": "logger.info(`Set workspace path for port ${port}:`"
        },
        {
          "line": 235,
          "content": "logger.info(`Set workspace path for port ${port}:`, workspacePath);",
          "type": "ide_data",
          "match": "logger.info(`Set workspace path for port ${port}:`, workspace"
        },
        {
          "line": 238,
          "content": "logger.error('Could not extract project root from file path:', filePath);",
          "type": "direct_data",
          "match": "logger.error('Could not extract project root from file path:', filePath"
        },
        {
          "line": 238,
          "content": "logger.error('Could not extract project root from file path:', filePath);",
          "type": "variable_data",
          "match": "logger.error('Could not extract project root from file path:', filePath"
        },
        {
          "line": 238,
          "content": "logger.error('Could not extract project root from file path:', filePath);",
          "type": "file_content",
          "match": "logger.error('Could not extract project root from file path:', file"
        },
        {
          "line": 247,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in workspace detection:', error"
        },
        {
          "line": 247,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in workspace detection:', error"
        },
        {
          "line": 247,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "error_object",
          "match": "logger.error('Error in workspace detection:', error"
        }
      ]
    },
    "./backend/domain/services/workspace/FileBasedWorkspaceDetector.js": {
      "totalFindings": 69,
      "byType": {
        "template_data": 14,
        "direct_data": 20,
        "variable_data": 20,
        "ide_data": 1,
        "error_object": 14
      },
      "findings": [
        {
          "line": 28,
          "content": "logger.info(`Using cached workspace info for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Using cached workspace info for port ${port}`"
        },
        {
          "line": 35,
          "content": "logger.info(`Found existing workspace data for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Found existing workspace data for port ${port}`"
        },
        {
          "line": 41,
          "content": "logger.info(`No existing data found for port ${port}, starting new detection...`);",
          "type": "direct_data",
          "match": "logger.info(`No existing data found for port ${port}, starting new detection...`"
        },
        {
          "line": 41,
          "content": "logger.info(`No existing data found for port ${port}, starting new detection...`);",
          "type": "variable_data",
          "match": "logger.info(`No existing data found for port ${port}, starting"
        },
        {
          "line": 41,
          "content": "logger.info(`No existing data found for port ${port}, starting new detection...`);",
          "type": "template_data",
          "match": "logger.info(`No existing data found for port ${port}, starting new detection...`"
        },
        {
          "line": 63,
          "content": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo.workspace);",
          "type": "direct_data",
          "match": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo.workspace"
        },
        {
          "line": 63,
          "content": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo.workspace);",
          "type": "variable_data",
          "match": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo"
        },
        {
          "line": 63,
          "content": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo.workspace);",
          "type": "template_data",
          "match": "logger.info(`Workspace info found for port ${port}:`"
        },
        {
          "line": 63,
          "content": "logger.info(`Workspace info found for port ${port}:`, workspaceInfo.workspace);",
          "type": "ide_data",
          "match": "logger.info(`Workspace info found for port ${port}:`, workspace"
        },
        {
          "line": 72,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in workspace detection:', error"
        },
        {
          "line": 72,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in workspace detection:', error"
        },
        {
          "line": 72,
          "content": "logger.error('Error in workspace detection:', error);",
          "type": "error_object",
          "match": "logger.error('Error in workspace detection:', error"
        },
        {
          "line": 91,
          "content": "logger.info(`Setting up terminal and file structure for port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Setting up terminal and file structure for port ${port}...`"
        },
        {
          "line": 114,
          "content": "logger.info(`File structure created for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`File structure created for port ${port}`"
        },
        {
          "line": 117,
          "content": "logger.error('Error setting up terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error setting up terminal:', error"
        },
        {
          "line": 117,
          "content": "logger.error('Error setting up terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error setting up terminal:', error"
        },
        {
          "line": 117,
          "content": "logger.error('Error setting up terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error setting up terminal:', error"
        },
        {
          "line": 139,
          "content": "logger.error('Error closing terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error closing terminal:', error"
        },
        {
          "line": 139,
          "content": "logger.error('Error closing terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error closing terminal:', error"
        },
        {
          "line": 139,
          "content": "logger.error('Error closing terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error closing terminal:', error"
        },
        {
          "line": 177,
          "content": "logger.info(`Executing terminal commands for port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Executing terminal commands for port ${port}...`"
        },
        {
          "line": 183,
          "content": "logger.info(`Detected project: ${projectName} at ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`Detected project: ${projectName} at ${workspacePath}`"
        },
        {
          "line": 203,
          "content": "logger.info(`Terminal commands executed for port ${port}, project ${projectName}`);",
          "type": "direct_data",
          "match": "logger.info(`Terminal commands executed for port ${port}, project ${projectName}`"
        },
        {
          "line": 203,
          "content": "logger.info(`Terminal commands executed for port ${port}, project ${projectName}`);",
          "type": "variable_data",
          "match": "logger.info(`Terminal commands executed for port ${port}, project"
        },
        {
          "line": 203,
          "content": "logger.info(`Terminal commands executed for port ${port}, project ${projectName}`);",
          "type": "template_data",
          "match": "logger.info(`Terminal commands executed for port ${port}, project ${projectName}`"
        },
        {
          "line": 206,
          "content": "logger.error('Error executing terminal commands:', error);",
          "type": "direct_data",
          "match": "logger.error('Error executing terminal commands:', error"
        },
        {
          "line": 206,
          "content": "logger.error('Error executing terminal commands:', error);",
          "type": "variable_data",
          "match": "logger.error('Error executing terminal commands:', error"
        },
        {
          "line": 206,
          "content": "logger.error('Error executing terminal commands:', error);",
          "type": "error_object",
          "match": "logger.error('Error executing terminal commands:', error"
        },
        {
          "line": 231,
          "content": "logger.error('Error getting current workspace:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting current workspace:', error"
        },
        {
          "line": 231,
          "content": "logger.error('Error getting current workspace:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting current workspace:', error"
        },
        {
          "line": 231,
          "content": "logger.error('Error getting current workspace:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting current workspace:', error"
        },
        {
          "line": 252,
          "content": "logger.error('Error extracting project name:', error);",
          "type": "direct_data",
          "match": "logger.error('Error extracting project name:', error"
        },
        {
          "line": 252,
          "content": "logger.error('Error extracting project name:', error);",
          "type": "variable_data",
          "match": "logger.error('Error extracting project name:', error"
        },
        {
          "line": 252,
          "content": "logger.error('Error extracting project name:', error);",
          "type": "error_object",
          "match": "logger.error('Error extracting project name:', error"
        },
        {
          "line": 276,
          "content": "logger.info(`Current project: ${currentProject}`);",
          "type": "template_data",
          "match": "logger.info(`Current project: ${currentProject}`"
        },
        {
          "line": 290,
          "content": "logger.info(`Using first available project: ${currentProject}`);",
          "type": "template_data",
          "match": "logger.info(`Using first available project: ${currentProject}`"
        },
        {
          "line": 311,
          "content": "logger.info(`Found existing files for port ${port}, project ${currentProject}, reading them...`);",
          "type": "direct_data",
          "match": "logger.info(`Found existing files for port ${port}, project ${currentProject}, reading them...`"
        },
        {
          "line": 311,
          "content": "logger.info(`Found existing files for port ${port}, project ${currentProject}, reading them...`);",
          "type": "variable_data",
          "match": "logger.info(`Found existing files for port ${port}, project"
        },
        {
          "line": 311,
          "content": "logger.info(`Found existing files for port ${port}, project ${currentProject}, reading them...`);",
          "type": "template_data",
          "match": "logger.info(`Found existing files for port ${port}, project ${currentProject}, reading them...`"
        },
        {
          "line": 315,
          "content": "logger.error('Error checking existing files:', error);",
          "type": "direct_data",
          "match": "logger.error('Error checking existing files:', error"
        },
        {
          "line": 315,
          "content": "logger.error('Error checking existing files:', error);",
          "type": "variable_data",
          "match": "logger.error('Error checking existing files:', error"
        },
        {
          "line": 315,
          "content": "logger.error('Error checking existing files:', error);",
          "type": "error_object",
          "match": "logger.error('Error checking existing files:', error"
        },
        {
          "line": 339,
          "content": "logger.info(`Reading workspace files for port ${port}, project ${projectName}...`);",
          "type": "direct_data",
          "match": "logger.info(`Reading workspace files for port ${port}, project ${projectName}...`"
        },
        {
          "line": 339,
          "content": "logger.info(`Reading workspace files for port ${port}, project ${projectName}...`);",
          "type": "variable_data",
          "match": "logger.info(`Reading workspace files for port ${port}, project"
        },
        {
          "line": 339,
          "content": "logger.info(`Reading workspace files for port ${port}, project ${projectName}...`);",
          "type": "template_data",
          "match": "logger.info(`Reading workspace files for port ${port}, project ${projectName}...`"
        },
        {
          "line": 359,
          "content": "logger.error('Error reading workspace.txt:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading workspace.txt:', error"
        },
        {
          "line": 359,
          "content": "logger.error('Error reading workspace.txt:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading workspace.txt:', error"
        },
        {
          "line": 359,
          "content": "logger.error('Error reading workspace.txt:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading workspace.txt:', error"
        },
        {
          "line": 369,
          "content": "logger.error('Error reading files.txt:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading files.txt:', error"
        },
        {
          "line": 369,
          "content": "logger.error('Error reading files.txt:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading files.txt:', error"
        },
        {
          "line": 369,
          "content": "logger.error('Error reading files.txt:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading files.txt:', error"
        },
        {
          "line": 378,
          "content": "logger.error('Error reading git-status.txt:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading git-status.txt:', error"
        },
        {
          "line": 378,
          "content": "logger.error('Error reading git-status.txt:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading git-status.txt:', error"
        },
        {
          "line": 378,
          "content": "logger.error('Error reading git-status.txt:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading git-status.txt:', error"
        },
        {
          "line": 387,
          "content": "logger.error('Error reading info.txt:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading info.txt:', error"
        },
        {
          "line": 387,
          "content": "logger.error('Error reading info.txt:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading info.txt:', error"
        },
        {
          "line": 387,
          "content": "logger.error('Error reading info.txt:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading info.txt:', error"
        },
        {
          "line": 396,
          "content": "logger.error('Error reading terminal-session.txt:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading terminal-session.txt:', error"
        },
        {
          "line": 396,
          "content": "logger.error('Error reading terminal-session.txt:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading terminal-session.txt:', error"
        },
        {
          "line": 396,
          "content": "logger.error('Error reading terminal-session.txt:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading terminal-session.txt:', error"
        },
        {
          "line": 399,
          "content": "logger.info(`Workspace files read for port ${port}, project ${projectName}`);",
          "type": "direct_data",
          "match": "logger.info(`Workspace files read for port ${port}, project ${projectName}`"
        },
        {
          "line": 399,
          "content": "logger.info(`Workspace files read for port ${port}, project ${projectName}`);",
          "type": "variable_data",
          "match": "logger.info(`Workspace files read for port ${port}, project"
        },
        {
          "line": 399,
          "content": "logger.info(`Workspace files read for port ${port}, project ${projectName}`);",
          "type": "template_data",
          "match": "logger.info(`Workspace files read for port ${port}, project ${projectName}`"
        },
        {
          "line": 403,
          "content": "logger.error('Error reading workspace files:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading workspace files:', error"
        },
        {
          "line": 403,
          "content": "logger.error('Error reading workspace files:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading workspace files:', error"
        },
        {
          "line": 403,
          "content": "logger.error('Error reading workspace files:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading workspace files:', error"
        },
        {
          "line": 511,
          "content": "logger.error('Error executing command:', error);",
          "type": "direct_data",
          "match": "logger.error('Error executing command:', error"
        },
        {
          "line": 511,
          "content": "logger.error('Error executing command:', error);",
          "type": "variable_data",
          "match": "logger.error('Error executing command:', error"
        },
        {
          "line": 511,
          "content": "logger.error('Error executing command:', error);",
          "type": "error_object",
          "match": "logger.error('Error executing command:', error"
        }
      ]
    },
    "./backend/domain/services/IDEAutomationService.js": {
      "totalFindings": 52,
      "byType": {
        "template_data": 17,
        "direct_data": 12,
        "variable_data": 12,
        "error_object": 11
      },
      "findings": [
        {
          "line": 106,
          "content": "logger.info(`Opening terminal for ${context.ideType} on port ${context.port}`);",
          "type": "template_data",
          "match": "logger.info(`Opening terminal for ${context.ideType} on port ${context.port}`"
        },
        {
          "line": 147,
          "content": "logger.info(`Terminal opened: ${this.terminalStatus.isOpen}`);",
          "type": "template_data",
          "match": "logger.info(`Terminal opened: ${this.terminalStatus.isOpen}`"
        },
        {
          "line": 157,
          "content": "logger.error('Failed to open terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to open terminal:', error"
        },
        {
          "line": 157,
          "content": "logger.error('Failed to open terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to open terminal:', error"
        },
        {
          "line": 157,
          "content": "logger.error('Failed to open terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to open terminal:', error"
        },
        {
          "line": 181,
          "content": "logger.info(`Executing command: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing command: ${command}`"
        },
        {
          "line": 214,
          "content": "logger.info(`Command executed: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Command executed: ${command}`"
        },
        {
          "line": 224,
          "content": "logger.error('Failed to execute terminal command:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to execute terminal command:', error"
        },
        {
          "line": 224,
          "content": "logger.error('Failed to execute terminal command:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to execute terminal command:', error"
        },
        {
          "line": 224,
          "content": "logger.error('Failed to execute terminal command:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to execute terminal command:', error"
        },
        {
          "line": 243,
          "content": "logger.info(`Monitoring terminal output for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Monitoring terminal output for ${context.ideType}`"
        },
        {
          "line": 259,
          "content": "logger.info(`Terminal output monitored: ${result ? 'URL found' : 'No URL'}`);",
          "type": "template_data",
          "match": "logger.info(`Terminal output monitored: ${result ? 'URL found' : 'No URL'}`"
        },
        {
          "line": 269,
          "content": "logger.error('Failed to monitor terminal output:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to monitor terminal output:', error"
        },
        {
          "line": 269,
          "content": "logger.error('Failed to monitor terminal output:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to monitor terminal output:', error"
        },
        {
          "line": 269,
          "content": "logger.error('Failed to monitor terminal output:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to monitor terminal output:', error"
        },
        {
          "line": 287,
          "content": "logger.info(`Restarting user app for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Restarting user app for ${context.ideType}`"
        },
        {
          "line": 300,
          "content": "logger.info(`User app restarted: ${result ? 'Success' : 'Failed'}`);",
          "type": "template_data",
          "match": "logger.info(`User app restarted: ${result ? 'Success' : 'Failed'}`"
        },
        {
          "line": 310,
          "content": "logger.error('Failed to restart user app:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to restart user app:', error"
        },
        {
          "line": 310,
          "content": "logger.error('Failed to restart user app:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to restart user app:', error"
        },
        {
          "line": 310,
          "content": "logger.error('Failed to restart user app:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to restart user app:', error"
        },
        {
          "line": 328,
          "content": "logger.info(`Capturing terminal logs for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Capturing terminal logs for ${context.ideType}`"
        },
        {
          "line": 344,
          "content": "logger.info(`Terminal logs captured: ${logs.length} entries`);",
          "type": "template_data",
          "match": "logger.info(`Terminal logs captured: ${logs.length} entries`"
        },
        {
          "line": 355,
          "content": "logger.error('Failed to capture terminal logs:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to capture terminal logs:', error"
        },
        {
          "line": 355,
          "content": "logger.error('Failed to capture terminal logs:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to capture terminal logs:', error"
        },
        {
          "line": 355,
          "content": "logger.error('Failed to capture terminal logs:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to capture terminal logs:', error"
        },
        {
          "line": 381,
          "content": "logger.info(`Analyzing project for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Analyzing project for ${context.ideType}`"
        },
        {
          "line": 415,
          "content": "logger.error('Failed to analyze project:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze project:', error"
        },
        {
          "line": 415,
          "content": "logger.error('Failed to analyze project:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to analyze project:', error"
        },
        {
          "line": 415,
          "content": "logger.error('Failed to analyze project:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to analyze project:', error"
        },
        {
          "line": 437,
          "content": "logger.info(`Re-analyzing project for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Re-analyzing project for ${context.ideType}`"
        },
        {
          "line": 456,
          "content": "logger.error('Failed to re-analyze project:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to re-analyze project:', error"
        },
        {
          "line": 456,
          "content": "logger.error('Failed to re-analyze project:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to re-analyze project:', error"
        },
        {
          "line": 456,
          "content": "logger.error('Failed to re-analyze project:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to re-analyze project:', error"
        },
        {
          "line": 474,
          "content": "logger.info(`Getting workspace info for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Getting workspace info for ${context.ideType}`"
        },
        {
          "line": 497,
          "content": "logger.info(`Workspace info retrieved: ${workspaceInfo ? 'Success' : 'No info'}`);",
          "type": "template_data",
          "match": "logger.info(`Workspace info retrieved: ${workspaceInfo ? 'Success' : 'No info'}`"
        },
        {
          "line": 502,
          "content": "logger.error('Failed to get workspace info:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to get workspace info:', error"
        },
        {
          "line": 502,
          "content": "logger.error('Failed to get workspace info:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to get workspace info:', error"
        },
        {
          "line": 502,
          "content": "logger.error('Failed to get workspace info:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to get workspace info:', error"
        },
        {
          "line": 520,
          "content": "logger.info(`Detecting package.json for ${context.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Detecting package.json for ${context.ideType}`"
        },
        {
          "line": 543,
          "content": "logger.info(`Package.json detected: ${packageJsonUrl ? 'Success' : 'No package.json'}`);",
          "type": "template_data",
          "match": "logger.info(`Package.json detected: ${packageJsonUrl ? 'Success' : 'No package.json'}`"
        },
        {
          "line": 548,
          "content": "logger.error('Failed to detect package.json:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to detect package.json:', error"
        },
        {
          "line": 548,
          "content": "logger.error('Failed to detect package.json:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to detect package.json:', error"
        },
        {
          "line": 548,
          "content": "logger.error('Failed to detect package.json:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to detect package.json:', error"
        },
        {
          "line": 609,
          "content": "logger.info(`Port changed to ${port}, IDE type: ${this.ideType}`);",
          "type": "direct_data",
          "match": "logger.info(`Port changed to ${port}, IDE type: ${this.ideType}`"
        },
        {
          "line": 609,
          "content": "logger.info(`Port changed to ${port}, IDE type: ${this.ideType}`);",
          "type": "variable_data",
          "match": "logger.info(`Port changed to ${port}, IDE"
        },
        {
          "line": 609,
          "content": "logger.info(`Port changed to ${port}, IDE type: ${this.ideType}`);",
          "type": "template_data",
          "match": "logger.info(`Port changed to ${port}, IDE type: ${this.ideType}`"
        },
        {
          "line": 611,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 611,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 611,
          "content": "logger.error('Failed to handle port change:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to handle port change:', error"
        },
        {
          "line": 626,
          "content": "logger.error('Failed to handle terminal output change:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to handle terminal output change:', error"
        },
        {
          "line": 626,
          "content": "logger.error('Failed to handle terminal output change:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to handle terminal output change:', error"
        },
        {
          "line": 626,
          "content": "logger.error('Failed to handle terminal output change:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to handle terminal output change:', error"
        }
      ]
    },
    "./backend/domain/services/ide-mirror/FrameBuffer.js": {
      "totalFindings": 46,
      "byType": {
        "direct_data": 13,
        "variable_data": 12,
        "template_data": 12,
        "error_object": 9
      },
      "findings": [
        {
          "line": 77,
          "content": "logger.warn(`Buffer overflow for session ${sessionId}, frame rejected`);",
          "type": "direct_data",
          "match": "logger.warn(`Buffer overflow for session ${sessionId}, frame rejected`"
        },
        {
          "line": 77,
          "content": "logger.warn(`Buffer overflow for session ${sessionId}, frame rejected`);",
          "type": "variable_data",
          "match": "logger.warn(`Buffer overflow for session ${sessionId}, frame"
        },
        {
          "line": 77,
          "content": "logger.warn(`Buffer overflow for session ${sessionId}, frame rejected`);",
          "type": "template_data",
          "match": "logger.warn(`Buffer overflow for session ${sessionId}, frame rejected`"
        },
        {
          "line": 95,
          "content": "logger.error(`Error adding frame for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error adding frame for session ${sessionId}:`, error.message"
        },
        {
          "line": 95,
          "content": "logger.error(`Error adding frame for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error adding frame for session ${sessionId}:`, error"
        },
        {
          "line": 95,
          "content": "logger.error(`Error adding frame for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error adding frame for session ${sessionId}:`"
        },
        {
          "line": 95,
          "content": "logger.error(`Error adding frame for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error adding frame for session ${sessionId}:`, error"
        },
        {
          "line": 115,
          "content": "logger.error(`Error getting latest frame for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting latest frame for session ${sessionId}:`, error.message"
        },
        {
          "line": 115,
          "content": "logger.error(`Error getting latest frame for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting latest frame for session ${sessionId}:`, error"
        },
        {
          "line": 115,
          "content": "logger.error(`Error getting latest frame for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting latest frame for session ${sessionId}:`"
        },
        {
          "line": 115,
          "content": "logger.error(`Error getting latest frame for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting latest frame for session ${sessionId}:`, error"
        },
        {
          "line": 137,
          "content": "logger.error(`Error getting recent frames for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting recent frames for session ${sessionId}:`, error.message"
        },
        {
          "line": 137,
          "content": "logger.error(`Error getting recent frames for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting recent frames for session ${sessionId}:`, error"
        },
        {
          "line": 137,
          "content": "logger.error(`Error getting recent frames for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting recent frames for session ${sessionId}:`"
        },
        {
          "line": 137,
          "content": "logger.error(`Error getting recent frames for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting recent frames for session ${sessionId}:`, error"
        },
        {
          "line": 158,
          "content": "logger.error(`Error getting frame by number for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting frame by number for session ${sessionId}:`, error.message"
        },
        {
          "line": 158,
          "content": "logger.error(`Error getting frame by number for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting frame by number for session ${sessionId}:`, error"
        },
        {
          "line": 158,
          "content": "logger.error(`Error getting frame by number for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting frame by number for session ${sessionId}:`"
        },
        {
          "line": 158,
          "content": "logger.error(`Error getting frame by number for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting frame by number for session ${sessionId}:`, error"
        },
        {
          "line": 178,
          "content": "logger.info(`Cleared buffer for session ${sessionId}, freed ${removedSize} bytes`);",
          "type": "direct_data",
          "match": "logger.info(`Cleared buffer for session ${sessionId}, freed ${removedSize} bytes`"
        },
        {
          "line": 178,
          "content": "logger.info(`Cleared buffer for session ${sessionId}, freed ${removedSize} bytes`);",
          "type": "variable_data",
          "match": "logger.info(`Cleared buffer for session ${sessionId}, freed"
        },
        {
          "line": 178,
          "content": "logger.info(`Cleared buffer for session ${sessionId}, freed ${removedSize} bytes`);",
          "type": "template_data",
          "match": "logger.info(`Cleared buffer for session ${sessionId}, freed ${removedSize} bytes`"
        },
        {
          "line": 184,
          "content": "logger.error(`Error clearing buffer for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error clearing buffer for session ${sessionId}:`, error.message"
        },
        {
          "line": 184,
          "content": "logger.error(`Error clearing buffer for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error clearing buffer for session ${sessionId}:`, error"
        },
        {
          "line": 184,
          "content": "logger.error(`Error clearing buffer for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error clearing buffer for session ${sessionId}:`"
        },
        {
          "line": 184,
          "content": "logger.error(`Error clearing buffer for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error clearing buffer for session ${sessionId}:`, error"
        },
        {
          "line": 204,
          "content": "logger.info(`Cleared all buffers, ${clearedCount} sessions affected`);",
          "type": "direct_data",
          "match": "logger.info(`Cleared all buffers, ${clearedCount} sessions affected`"
        },
        {
          "line": 204,
          "content": "logger.info(`Cleared all buffers, ${clearedCount} sessions affected`);",
          "type": "template_data",
          "match": "logger.info(`Cleared all buffers, ${clearedCount} sessions affected`"
        },
        {
          "line": 208,
          "content": "logger.error('Error clearing all buffers:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error clearing all buffers:', error.message"
        },
        {
          "line": 208,
          "content": "logger.error('Error clearing all buffers:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error clearing all buffers:', error"
        },
        {
          "line": 208,
          "content": "logger.error('Error clearing all buffers:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error clearing all buffers:', error"
        },
        {
          "line": 241,
          "content": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed ${removedSize} bytes`);",
          "type": "direct_data",
          "match": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed ${removedSize} bytes`"
        },
        {
          "line": 241,
          "content": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed ${removedSize} bytes`);",
          "type": "variable_data",
          "match": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed"
        },
        {
          "line": 241,
          "content": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed ${removedSize} bytes`);",
          "type": "template_data",
          "match": "logger.info(`Cleanup for session ${sessionId}: removed ${removedCount} frames, freed ${removedSize} bytes`"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during cleanup for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error during cleanup for session ${sessionId}:`, error.message"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during cleanup for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error during cleanup for session ${sessionId}:`, error"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during cleanup for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error during cleanup for session ${sessionId}:`"
        },
        {
          "line": 247,
          "content": "logger.error(`Error during cleanup for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error during cleanup for session ${sessionId}:`, error"
        },
        {
          "line": 318,
          "content": "logger.info(`Periodic cleanup completed: removed ${totalRemoved} frames`);",
          "type": "template_data",
          "match": "logger.info(`Periodic cleanup completed: removed ${totalRemoved} frames`"
        },
        {
          "line": 322,
          "content": "logger.error('Error during periodic cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error during periodic cleanup:', error.message"
        },
        {
          "line": 322,
          "content": "logger.error('Error during periodic cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error during periodic cleanup:', error"
        },
        {
          "line": 322,
          "content": "logger.error('Error during periodic cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error during periodic cleanup:', error"
        },
        {
          "line": 374,
          "content": "logger.error(`Error getting stats for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting stats for session ${sessionId}:`, error.message"
        },
        {
          "line": 374,
          "content": "logger.error(`Error getting stats for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting stats for session ${sessionId}:`, error"
        },
        {
          "line": 374,
          "content": "logger.error(`Error getting stats for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting stats for session ${sessionId}:`"
        },
        {
          "line": 374,
          "content": "logger.error(`Error getting stats for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting stats for session ${sessionId}:`, error"
        }
      ]
    },
    "./backend/domain/services/ide-mirror/ScreenshotStreamingService.js": {
      "totalFindings": 82,
      "byType": {
        "direct_data": 19,
        "variable_data": 19,
        "template_data": 28,
        "error_object": 16
      },
      "findings": [
        {
          "line": 53,
          "content": "logger.info('Initialized with port-based architecture, default FPS:', this.defaultFPS);",
          "type": "direct_data",
          "match": "logger.info('Initialized with port-based architecture, default FPS:', this.defaultFPS"
        },
        {
          "line": 53,
          "content": "logger.info('Initialized with port-based architecture, default FPS:', this.defaultFPS);",
          "type": "variable_data",
          "match": "logger.info('Initialized with port-based architecture, default"
        },
        {
          "line": 63,
          "content": "logger.info(`Starting streaming for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Starting streaming for port ${port}`"
        },
        {
          "line": 99,
          "content": "logger.info(`Streaming started for port ${port} at ${portOptions.fps} FPS`);",
          "type": "template_data",
          "match": "logger.info(`Streaming started for port ${port} at ${portOptions.fps} FPS`"
        },
        {
          "line": 128,
          "content": "logger.error(`Failed to start streaming for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to start streaming for port ${port}:`, error.message"
        },
        {
          "line": 128,
          "content": "logger.error(`Failed to start streaming for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to start streaming for port ${port}:`, error"
        },
        {
          "line": 128,
          "content": "logger.error(`Failed to start streaming for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to start streaming for port ${port}:`"
        },
        {
          "line": 128,
          "content": "logger.error(`Failed to start streaming for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to start streaming for port ${port}:`, error"
        },
        {
          "line": 155,
          "content": "logger.info(`Starting streaming for session ${sessionId} on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Starting streaming for session ${sessionId} on port ${port}`"
        },
        {
          "line": 183,
          "content": "logger.error(`Error starting streaming for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error starting streaming for session ${sessionId}:`, error.message"
        },
        {
          "line": 183,
          "content": "logger.error(`Error starting streaming for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error starting streaming for session ${sessionId}:`, error"
        },
        {
          "line": 183,
          "content": "logger.error(`Error starting streaming for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error starting streaming for session ${sessionId}:`"
        },
        {
          "line": 183,
          "content": "logger.error(`Error starting streaming for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error starting streaming for session ${sessionId}:`, error"
        },
        {
          "line": 213,
          "content": "logger.error(`Port ${port} not found for frame capture loop`);",
          "type": "template_data",
          "match": "logger.error(`Port ${port} not found for frame capture loop`"
        },
        {
          "line": 217,
          "content": "logger.info(`Starting frame capture loop for port ${port} with ${frameInterval}ms interval`);",
          "type": "template_data",
          "match": "logger.info(`Starting frame capture loop for port ${port} with ${frameInterval}ms interval`"
        },
        {
          "line": 221,
          "content": "logger.info(`Port ${port} stopped, ending capture loop`);",
          "type": "direct_data",
          "match": "logger.info(`Port ${port} stopped, ending capture loop`"
        },
        {
          "line": 221,
          "content": "logger.info(`Port ${port} stopped, ending capture loop`);",
          "type": "variable_data",
          "match": "logger.info(`Port ${port} stopped, ending"
        },
        {
          "line": 221,
          "content": "logger.info(`Port ${port} stopped, ending capture loop`);",
          "type": "template_data",
          "match": "logger.info(`Port ${port} stopped, ending capture loop`"
        },
        {
          "line": 228,
          "content": "logger.error(`Frame capture error in loop for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Frame capture error in loop for port ${port}:`, error.message"
        },
        {
          "line": 228,
          "content": "logger.error(`Frame capture error in loop for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Frame capture error in loop for port ${port}:`, error"
        },
        {
          "line": 228,
          "content": "logger.error(`Frame capture error in loop for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Frame capture error in loop for port ${port}:`"
        },
        {
          "line": 228,
          "content": "logger.error(`Frame capture error in loop for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Frame capture error in loop for port ${port}:`, error"
        },
        {
          "line": 243,
          "content": "logger.info(`Frame capture setup complete (no continuous streaming to avoid filesystem errors) for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Frame capture setup complete (no continuous streaming to avoid filesystem errors) for port ${port}`"
        },
        {
          "line": 254,
          "content": "logger.warn(`Port ${port} not found for frame capture`);",
          "type": "template_data",
          "match": "logger.warn(`Port ${port} not found for frame capture`"
        },
        {
          "line": 293,
          "content": "logger.warn(`Failed to add frame to buffer for port ${port}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to add frame to buffer for port ${port}`"
        },
        {
          "line": 310,
          "content": "logger.error(`Frame capture error for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Frame capture error for port ${port}:`, error.message"
        },
        {
          "line": 310,
          "content": "logger.error(`Frame capture error for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Frame capture error for port ${port}:`, error"
        },
        {
          "line": 310,
          "content": "logger.error(`Frame capture error for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Frame capture error for port ${port}:`"
        },
        {
          "line": 310,
          "content": "logger.error(`Frame capture error for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Frame capture error for port ${port}:`, error"
        },
        {
          "line": 336,
          "content": "logger.info('Page closed, reconnecting...');",
          "type": "direct_data",
          "match": "logger.info('Page closed, reconnecting...'"
        },
        {
          "line": 336,
          "content": "logger.info('Page closed, reconnecting...');",
          "type": "variable_data",
          "match": "logger.info('Page closed, reconnecting"
        },
        {
          "line": 354,
          "content": "logger.error(`Screenshot capture failed for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Screenshot capture failed for port ${port}:`, error.message"
        },
        {
          "line": 354,
          "content": "logger.error(`Screenshot capture failed for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Screenshot capture failed for port ${port}:`, error"
        },
        {
          "line": 354,
          "content": "logger.error(`Screenshot capture failed for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Screenshot capture failed for port ${port}:`"
        },
        {
          "line": 354,
          "content": "logger.error(`Screenshot capture failed for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Screenshot capture failed for port ${port}:`, error"
        },
        {
          "line": 369,
          "content": "logger.info(`Switching browser from port ${currentPort} to ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching browser from port ${currentPort} to ${port}`"
        },
        {
          "line": 375,
          "content": "logger.info(`Reconnecting browser to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Reconnecting browser to port ${port}`"
        },
        {
          "line": 380,
          "content": "logger.error(`Browser connection error for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Browser connection error for port ${port}:`, error.message"
        },
        {
          "line": 380,
          "content": "logger.error(`Browser connection error for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Browser connection error for port ${port}:`, error"
        },
        {
          "line": 380,
          "content": "logger.error(`Browser connection error for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Browser connection error for port ${port}:`"
        },
        {
          "line": 380,
          "content": "logger.error(`Browser connection error for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Browser connection error for port ${port}:`, error"
        },
        {
          "line": 414,
          "content": "logger.error(`WebSocket streaming error for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`WebSocket streaming error for port ${port}:`, error.message"
        },
        {
          "line": 414,
          "content": "logger.error(`WebSocket streaming error for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`WebSocket streaming error for port ${port}:`, error"
        },
        {
          "line": 414,
          "content": "logger.error(`WebSocket streaming error for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`WebSocket streaming error for port ${port}:`"
        },
        {
          "line": 414,
          "content": "logger.error(`WebSocket streaming error for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`WebSocket streaming error for port ${port}:`, error"
        },
        {
          "line": 560,
          "content": "logger.info(`Streaming paused for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Streaming paused for port ${port}`"
        },
        {
          "line": 565,
          "content": "logger.error(`Error pausing streaming for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error pausing streaming for port ${port}:`, error.message"
        },
        {
          "line": 565,
          "content": "logger.error(`Error pausing streaming for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error pausing streaming for port ${port}:`, error"
        },
        {
          "line": 565,
          "content": "logger.error(`Error pausing streaming for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error pausing streaming for port ${port}:`"
        },
        {
          "line": 565,
          "content": "logger.error(`Error pausing streaming for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error pausing streaming for port ${port}:`, error"
        },
        {
          "line": 622,
          "content": "logger.info(`Streaming resumed for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Streaming resumed for port ${port}`"
        },
        {
          "line": 627,
          "content": "logger.error(`Error resuming streaming for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error resuming streaming for port ${port}:`, error.message"
        },
        {
          "line": 627,
          "content": "logger.error(`Error resuming streaming for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error resuming streaming for port ${port}:`, error"
        },
        {
          "line": 627,
          "content": "logger.error(`Error resuming streaming for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error resuming streaming for port ${port}:`"
        },
        {
          "line": 627,
          "content": "logger.error(`Error resuming streaming for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error resuming streaming for port ${port}:`, error"
        },
        {
          "line": 666,
          "content": "logger.info(`Stopping streaming for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Stopping streaming for port ${port}`"
        },
        {
          "line": 691,
          "content": "logger.info(`Streaming stopped for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Streaming stopped for port ${port}`"
        },
        {
          "line": 702,
          "content": "logger.error(`Error stopping streaming for port ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error stopping streaming for port ${port}:`, error.message"
        },
        {
          "line": 702,
          "content": "logger.error(`Error stopping streaming for port ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error stopping streaming for port ${port}:`, error"
        },
        {
          "line": 702,
          "content": "logger.error(`Error stopping streaming for port ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error stopping streaming for port ${port}:`"
        },
        {
          "line": 702,
          "content": "logger.error(`Error stopping streaming for port ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error stopping streaming for port ${port}:`, error"
        },
        {
          "line": 788,
          "content": "logger.info(`Updated configuration for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Updated configuration for port ${port}`"
        },
        {
          "line": 793,
          "content": "logger.error(`Error updating port config for ${port}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error updating port config for ${port}:`, error.message"
        },
        {
          "line": 793,
          "content": "logger.error(`Error updating port config for ${port}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error updating port config for ${port}:`, error"
        },
        {
          "line": 793,
          "content": "logger.error(`Error updating port config for ${port}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error updating port config for ${port}:`"
        },
        {
          "line": 793,
          "content": "logger.error(`Error updating port config for ${port}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error updating port config for ${port}:`, error"
        },
        {
          "line": 821,
          "content": "logger.warn('Error getting compression stats:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error getting compression stats:', error.message"
        },
        {
          "line": 821,
          "content": "logger.warn('Error getting compression stats:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error getting compression stats:', error"
        },
        {
          "line": 821,
          "content": "logger.warn('Error getting compression stats:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error getting compression stats:', error"
        },
        {
          "line": 832,
          "content": "logger.warn('Error getting buffer stats:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error getting buffer stats:', error.message"
        },
        {
          "line": 832,
          "content": "logger.warn('Error getting buffer stats:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error getting buffer stats:', error"
        },
        {
          "line": 832,
          "content": "logger.warn('Error getting buffer stats:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error getting buffer stats:', error"
        },
        {
          "line": 843,
          "content": "logger.warn('Error getting ports/sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error getting ports/sessions:', error.message"
        },
        {
          "line": 843,
          "content": "logger.warn('Error getting ports/sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error getting ports/sessions:', error"
        },
        {
          "line": 843,
          "content": "logger.warn('Error getting ports/sessions:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error getting ports/sessions:', error"
        },
        {
          "line": 876,
          "content": "logger.info(`Stopped all streaming ports: ${stoppedCount} ports`);",
          "type": "template_data",
          "match": "logger.info(`Stopped all streaming ports: ${stoppedCount} ports`"
        },
        {
          "line": 880,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error stopping all streaming:', error.message"
        },
        {
          "line": 880,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error stopping all streaming:', error"
        },
        {
          "line": 880,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error stopping all streaming:', error"
        },
        {
          "line": 907,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error during cleanup:', error.message"
        },
        {
          "line": 907,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 907,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error during cleanup:', error"
        }
      ]
    },
    "./backend/domain/services/ide-mirror/RegionDetector.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1,
        "template_data": 4
      },
      "findings": [
        {
          "line": 80,
          "content": "logger.error('Error detecting regions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error detecting regions:', error.message"
        },
        {
          "line": 80,
          "content": "logger.error('Error detecting regions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error detecting regions:', error"
        },
        {
          "line": 80,
          "content": "logger.error('Error detecting regions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error detecting regions:', error"
        },
        {
          "line": 180,
          "content": "logger.info(`Region detection ${enabled ? 'enabled' : 'disabled'}`);",
          "type": "template_data",
          "match": "logger.info(`Region detection ${enabled ? 'enabled' : 'disabled'}`"
        },
        {
          "line": 193,
          "content": "logger.info(`Threshold updated to ${threshold}`);",
          "type": "template_data",
          "match": "logger.info(`Threshold updated to ${threshold}`"
        },
        {
          "line": 206,
          "content": "logger.info(`Minimum region size updated to ${minSize} pixels`);",
          "type": "template_data",
          "match": "logger.info(`Minimum region size updated to ${minSize} pixels`"
        },
        {
          "line": 219,
          "content": "logger.info(`Maximum regions updated to ${maxRegions}`);",
          "type": "template_data",
          "match": "logger.info(`Maximum regions updated to ${maxRegions}`"
        }
      ]
    },
    "./backend/domain/services/ide-mirror/CompressionEngine.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 145,
          "content": "logger.warn(`Attempt ${attempt + 1} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Attempt ${attempt + 1} failed:`, error.message"
        },
        {
          "line": 145,
          "content": "logger.warn(`Attempt ${attempt + 1} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Attempt ${attempt + 1} failed:`, error"
        },
        {
          "line": 145,
          "content": "logger.warn(`Attempt ${attempt + 1} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Attempt ${attempt + 1} failed:`"
        },
        {
          "line": 145,
          "content": "logger.warn(`Attempt ${attempt + 1} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Attempt ${attempt + 1} failed:`, error"
        },
        {
          "line": 181,
          "content": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error.message"
        },
        {
          "line": 181,
          "content": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error"
        },
        {
          "line": 181,
          "content": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Batch compression failed for batch ${i / batchSize}:`"
        },
        {
          "line": 181,
          "content": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Batch compression failed for batch ${i / batchSize}:`, error"
        }
      ]
    },
    "./backend/domain/services/CoverageAnalyzerService.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 4,
        "object_data": 2
      },
      "findings": [
        {
          "line": 45,
          "content": "logger.warn('Could not get current coverage', { error: error.message });",
          "type": "direct_data",
          "match": "logger.warn('Could not get current coverage', { error: error.message }"
        },
        {
          "line": 45,
          "content": "logger.warn('Could not get current coverage', { error: error.message });",
          "type": "object_data",
          "match": "logger.warn('Could not get current coverage', { error: error.message }"
        },
        {
          "line": 84,
          "content": "logger.error('Failed to analyze file', { filePath, error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze file', { filePath, error: error.message }"
        },
        {
          "line": 84,
          "content": "logger.error('Failed to analyze file', { filePath, error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to analyze file', { filePath, error: error.message }"
        },
        {
          "line": 119,
          "content": "logger.info('Generated missing tests', {",
          "type": "direct_data",
          "match": "logger.info('Generated missing tests', { "
        },
        {
          "line": 133,
          "content": "logger.error('Failed to generate tests', {",
          "type": "direct_data",
          "match": "logger.error('Failed to generate tests', { "
        }
      ]
    },
    "./backend/domain/services/TaskMonitoringService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 449,
          "content": "logger.error('Error updating monitoring session:', error);",
          "type": "direct_data",
          "match": "logger.error('Error updating monitoring session:', error"
        },
        {
          "line": 449,
          "content": "logger.error('Error updating monitoring session:', error);",
          "type": "variable_data",
          "match": "logger.error('Error updating monitoring session:', error"
        },
        {
          "line": 449,
          "content": "logger.error('Error updating monitoring session:', error);",
          "type": "error_object",
          "match": "logger.error('Error updating monitoring session:', error"
        }
      ]
    },
    "./backend/domain/workflows/execution/ExecutionOptimizer.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 5,
        "variable_data": 2,
        "request_response": 2
      },
      "findings": [
        {
          "line": 57,
          "content": "this.logger.info('ExecutionOptimizer: Starting workflow optimization', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionOptimizer: Starting workflow optimization', {"
        },
        {
          "line": 144,
          "content": "this.logger.info('ExecutionOptimizer: Workflow optimization completed', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionOptimizer: Workflow optimization completed', {"
        },
        {
          "line": 154,
          "content": "this.logger.error('ExecutionOptimizer: Workflow optimization failed', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionOptimizer: Workflow optimization failed', {"
        },
        {
          "line": 1182,
          "content": "this.logger.debug('Preallocating resources', requirements);",
          "type": "direct_data",
          "match": "logger.debug('Preallocating resources', requirements"
        },
        {
          "line": 1182,
          "content": "this.logger.debug('Preallocating resources', requirements);",
          "type": "variable_data",
          "match": "logger.debug('Preallocating resources', requirements"
        },
        {
          "line": 1182,
          "content": "this.logger.debug('Preallocating resources', requirements);",
          "type": "request_response",
          "match": "logger.debug('Preallocating resources', req"
        },
        {
          "line": 1192,
          "content": "this.logger.debug('Releasing resources', requirements);",
          "type": "direct_data",
          "match": "logger.debug('Releasing resources', requirements"
        },
        {
          "line": 1192,
          "content": "this.logger.debug('Releasing resources', requirements);",
          "type": "variable_data",
          "match": "logger.debug('Releasing resources', requirements"
        },
        {
          "line": 1192,
          "content": "this.logger.debug('Releasing resources', requirements);",
          "type": "request_response",
          "match": "logger.debug('Releasing resources', req"
        }
      ]
    },
    "./backend/domain/workflows/execution/WorkflowOptimizer.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 9,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 120,
          "content": "this.logger.info('WorkflowOptimizer: Starting workflow optimization', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Starting workflow optimization', {"
        },
        {
          "line": 129,
          "content": "this.logger.info('WorkflowOptimizer: Using cached optimization', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Using cached optimization', {"
        },
        {
          "line": 143,
          "content": "this.logger.info('WorkflowOptimizer: Using advanced optimization', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Using advanced optimization', {"
        },
        {
          "line": 162,
          "content": "this.logger.info('WorkflowOptimizer: Advanced optimization applied', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Advanced optimization applied', {"
        },
        {
          "line": 171,
          "content": "this.logger.warn('WorkflowOptimizer: Advanced optimization failed, falling back to basic rules', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowOptimizer: Advanced optimization failed, falling back to basic rules', {"
        },
        {
          "line": 171,
          "content": "this.logger.warn('WorkflowOptimizer: Advanced optimization failed, falling back to basic rules', {",
          "type": "variable_data",
          "match": "logger.warn('WorkflowOptimizer: Advanced optimization failed, falling"
        },
        {
          "line": 198,
          "content": "this.logger.info('WorkflowOptimizer: Rule applied successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Rule applied successfully', {"
        },
        {
          "line": 206,
          "content": "this.logger.warn('WorkflowOptimizer: Rule failed', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowOptimizer: Rule failed', {"
        },
        {
          "line": 225,
          "content": "this.logger.info('WorkflowOptimizer: Optimization completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowOptimizer: Optimization completed', {"
        },
        {
          "line": 235,
          "content": "this.logger.error('WorkflowOptimizer: Optimization failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowOptimizer: Optimization failed', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/ExecutionCache.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 9
      },
      "findings": [
        {
          "line": 74,
          "content": "this.logger.info('Cache hit', {",
          "type": "direct_data",
          "match": "logger.info('Cache hit', {"
        },
        {
          "line": 100,
          "content": "this.logger.debug('Result not worth caching', {",
          "type": "direct_data",
          "match": "logger.debug('Result not worth caching', {"
        },
        {
          "line": 133,
          "content": "this.logger.info('Result cached', {",
          "type": "direct_data",
          "match": "logger.info('Result cached', {"
        },
        {
          "line": 266,
          "content": "this.logger.warn('Failed to hash context', {",
          "type": "direct_data",
          "match": "logger.warn('Failed to hash context', {"
        },
        {
          "line": 295,
          "content": "this.logger.warn('Failed to hash workflow', {",
          "type": "direct_data",
          "match": "logger.warn('Failed to hash workflow', {"
        },
        {
          "line": 349,
          "content": "this.logger.info('Evicted oldest entry', {",
          "type": "direct_data",
          "match": "logger.info('Evicted oldest entry', {"
        },
        {
          "line": 367,
          "content": "this.logger.info('Cleanup interval started', {",
          "type": "direct_data",
          "match": "logger.info('Cleanup interval started', {"
        },
        {
          "line": 400,
          "content": "this.logger.info('Cleaned expired entries', {",
          "type": "direct_data",
          "match": "logger.info('Cleaned expired entries', {"
        },
        {
          "line": 532,
          "content": "this.logger.info('Invalidated entries', {",
          "type": "direct_data",
          "match": "logger.info('Invalidated entries', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/ExecutionMetrics.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 7
      },
      "findings": [
        {
          "line": 92,
          "content": "this.logger.debug('Execution started', {",
          "type": "direct_data",
          "match": "logger.debug('Execution started', {"
        },
        {
          "line": 110,
          "content": "this.logger.warn('No execution found for end recording', {",
          "type": "direct_data",
          "match": "logger.warn('No execution found for end recording', {"
        },
        {
          "line": 133,
          "content": "this.logger.debug('Execution ended', {",
          "type": "direct_data",
          "match": "logger.debug('Execution ended', {"
        },
        {
          "line": 192,
          "content": "this.logger.warn('No step found for end recording', {",
          "type": "direct_data",
          "match": "logger.warn('No step found for end recording', {"
        },
        {
          "line": 265,
          "content": "this.logger.debug('Error recorded', {",
          "type": "direct_data",
          "match": "logger.debug('Error recorded', {"
        },
        {
          "line": 355,
          "content": "this.logger.info('Metrics collection started', {",
          "type": "direct_data",
          "match": "logger.info('Metrics collection started', {"
        },
        {
          "line": 441,
          "content": "this.logger.debug('Cleaned old metrics', {",
          "type": "direct_data",
          "match": "logger.debug('Cleaned old metrics', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/SequentialExecutionEngine.js": {
      "totalFindings": 15,
      "byType": {
        "direct_data": 11,
        "variable_data": 2,
        "object_data": 1,
        "configuration": 1
      },
      "findings": [
        {
          "line": 148,
          "content": "this.logger.info('SequentialExecutionEngine: Starting enhanced workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Starting enhanced workflow execution', {"
        },
        {
          "line": 163,
          "content": "this.logger.info('SequentialExecutionEngine: Using cached result', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Using cached result', {"
        },
        {
          "line": 176,
          "content": "this.logger.info('SequentialExecutionEngine: Execution prediction', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Execution prediction', {"
        },
        {
          "line": 186,
          "content": "this.logger.info('SequentialExecutionEngine: Resources allocated', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Resources allocated', {"
        },
        {
          "line": 208,
          "content": "this.logger.info('SequentialExecutionEngine: Advanced workflow optimization completed', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Advanced workflow optimization completed', {"
        },
        {
          "line": 217,
          "content": "this.logger.warn('SequentialExecutionEngine: Advanced optimization failed, using basic optimization', {",
          "type": "direct_data",
          "match": "logger.warn('SequentialExecutionEngine: Advanced optimization failed, using basic optimization', {"
        },
        {
          "line": 217,
          "content": "this.logger.warn('SequentialExecutionEngine: Advanced optimization failed, using basic optimization', {",
          "type": "variable_data",
          "match": "logger.warn('SequentialExecutionEngine: Advanced optimization failed, using"
        },
        {
          "line": 230,
          "content": "this.logger.info('SequentialExecutionEngine: Workflow optimization completed', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Workflow optimization completed', {"
        },
        {
          "line": 308,
          "content": "this.logger.error('SequentialExecutionEngine: Workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.error('SequentialExecutionEngine: Workflow execution failed', {"
        },
        {
          "line": 545,
          "content": "this.logger.info('SequentialExecutionEngine: Execution cancelled', {",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Execution cancelled', {"
        },
        {
          "line": 586,
          "content": "this.logger.info('SequentialExecutionEngine: Strategy registered', { name });",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Strategy registered', { name }"
        },
        {
          "line": 586,
          "content": "this.logger.info('SequentialExecutionEngine: Strategy registered', { name });",
          "type": "object_data",
          "match": "logger.info('SequentialExecutionEngine: Strategy registered', { name }"
        },
        {
          "line": 624,
          "content": "this.logger.info('SequentialExecutionEngine: Configuration updated', config);",
          "type": "direct_data",
          "match": "logger.info('SequentialExecutionEngine: Configuration updated', config"
        },
        {
          "line": 624,
          "content": "this.logger.info('SequentialExecutionEngine: Configuration updated', config);",
          "type": "variable_data",
          "match": "logger.info('SequentialExecutionEngine: Configuration updated', config"
        },
        {
          "line": 624,
          "content": "this.logger.info('SequentialExecutionEngine: Configuration updated', config);",
          "type": "configuration",
          "match": "logger.info('SequentialExecutionEngine: Configuration updated', config"
        }
      ]
    },
    "./backend/domain/workflows/execution/resources/ResourceMonitor.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 9
      },
      "findings": [
        {
          "line": 66,
          "content": "this.logger.info('ResourceMonitor: Monitoring started', {",
          "type": "direct_data",
          "match": "logger.info('ResourceMonitor: Monitoring started', {"
        },
        {
          "line": 115,
          "content": "this.logger.error('ResourceMonitor: Monitoring cycle failed', {",
          "type": "direct_data",
          "match": "logger.error('ResourceMonitor: Monitoring cycle failed', {"
        },
        {
          "line": 190,
          "content": "this.logger.error('ResourceMonitor: Failed to get system resources', {",
          "type": "direct_data",
          "match": "logger.error('ResourceMonitor: Failed to get system resources', {"
        },
        {
          "line": 226,
          "content": "this.logger.error('ResourceMonitor: Failed to get process resources', {",
          "type": "direct_data",
          "match": "logger.error('ResourceMonitor: Failed to get process resources', {"
        },
        {
          "line": 379,
          "content": "this.logger.warn('ResourceMonitor: Alert triggered', {",
          "type": "direct_data",
          "match": "logger.warn('ResourceMonitor: Alert triggered', {"
        },
        {
          "line": 402,
          "content": "this.logger.error('ResourceMonitor: Critical alert handling', {",
          "type": "direct_data",
          "match": "logger.error('ResourceMonitor: Critical alert handling', {"
        },
        {
          "line": 422,
          "content": "this.logger.warn('ResourceMonitor: Unknown critical alert type', {",
          "type": "direct_data",
          "match": "logger.warn('ResourceMonitor: Unknown critical alert type', {"
        },
        {
          "line": 546,
          "content": "this.logger.info('ResourceMonitor: Alert thresholds updated', {",
          "type": "direct_data",
          "match": "logger.info('ResourceMonitor: Alert thresholds updated', {"
        },
        {
          "line": 558,
          "content": "this.logger.info('ResourceMonitor: Alert configuration updated', {",
          "type": "direct_data",
          "match": "logger.info('ResourceMonitor: Alert configuration updated', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/resources/ResourceAllocator.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 8
      },
      "findings": [
        {
          "line": 104,
          "content": "this.logger.info('ResourceAllocator: Requesting allocation', {",
          "type": "direct_data",
          "match": "logger.info('ResourceAllocator: Requesting allocation', {"
        },
        {
          "line": 135,
          "content": "this.logger.error('ResourceAllocator: Allocation request failed', {",
          "type": "direct_data",
          "match": "logger.error('ResourceAllocator: Allocation request failed', {"
        },
        {
          "line": 184,
          "content": "this.logger.info('ResourceAllocator: Resources allocated', {",
          "type": "direct_data",
          "match": "logger.info('ResourceAllocator: Resources allocated', {"
        },
        {
          "line": 205,
          "content": "this.logger.info('ResourceAllocator: Releasing resources', {",
          "type": "direct_data",
          "match": "logger.info('ResourceAllocator: Releasing resources', {"
        },
        {
          "line": 211,
          "content": "this.logger.warn('ResourceAllocator: No allocation found for release', {",
          "type": "direct_data",
          "match": "logger.warn('ResourceAllocator: No allocation found for release', {"
        },
        {
          "line": 233,
          "content": "this.logger.info('ResourceAllocator: Resources released', {",
          "type": "direct_data",
          "match": "logger.info('ResourceAllocator: Resources released', {"
        },
        {
          "line": 243,
          "content": "this.logger.error('ResourceAllocator: Resource release failed', {",
          "type": "direct_data",
          "match": "logger.error('ResourceAllocator: Resource release failed', {"
        },
        {
          "line": 512,
          "content": "this.logger.warn('ResourceAllocator: Failed to process queued allocation', {",
          "type": "direct_data",
          "match": "logger.warn('ResourceAllocator: Failed to process queued allocation', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/strategies/OptimizedSequentialStrategy.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 6,
        "variable_data": 1,
        "object_data": 1
      },
      "findings": [
        {
          "line": 36,
          "content": "this.logger.info('OptimizedSequentialStrategy: Starting optimized execution', {",
          "type": "direct_data",
          "match": "logger.info('OptimizedSequentialStrategy: Starting optimized execution', {"
        },
        {
          "line": 48,
          "content": "this.logger.info('OptimizedSequentialStrategy: Steps optimized', {",
          "type": "direct_data",
          "match": "logger.info('OptimizedSequentialStrategy: Steps optimized', {"
        },
        {
          "line": 70,
          "content": "this.logger.warn('OptimizedSequentialStrategy: Step failed, stopping execution', {",
          "type": "direct_data",
          "match": "logger.warn('OptimizedSequentialStrategy: Step failed, stopping execution', {"
        },
        {
          "line": 70,
          "content": "this.logger.warn('OptimizedSequentialStrategy: Step failed, stopping execution', {",
          "type": "variable_data",
          "match": "logger.warn('OptimizedSequentialStrategy: Step failed, stopping"
        },
        {
          "line": 98,
          "content": "this.logger.info('OptimizedSequentialStrategy: Execution completed', {",
          "type": "direct_data",
          "match": "logger.info('OptimizedSequentialStrategy: Execution completed', {"
        },
        {
          "line": 111,
          "content": "this.logger.error('OptimizedSequentialStrategy: Execution failed', {",
          "type": "direct_data",
          "match": "logger.error('OptimizedSequentialStrategy: Execution failed', {"
        },
        {
          "line": 760,
          "content": "this.logger.debug('Preloading dependency', { dependency });",
          "type": "direct_data",
          "match": "logger.debug('Preloading dependency', { dependency }"
        },
        {
          "line": 760,
          "content": "this.logger.debug('Preloading dependency', { dependency });",
          "type": "object_data",
          "match": "logger.debug('Preloading dependency', { dependency }"
        }
      ]
    },
    "./backend/domain/workflows/execution/strategies/SmartSequentialStrategy.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 6,
        "object_data": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info('SmartSequentialStrategy: Starting smart execution', {",
          "type": "direct_data",
          "match": "logger.info('SmartSequentialStrategy: Starting smart execution', {"
        },
        {
          "line": 48,
          "content": "this.logger.info('SmartSequentialStrategy: Workflow analyzed', {",
          "type": "direct_data",
          "match": "logger.info('SmartSequentialStrategy: Workflow analyzed', {"
        },
        {
          "line": 68,
          "content": "this.logger.info('SmartSequentialStrategy: Execution approach determined', {",
          "type": "direct_data",
          "match": "logger.info('SmartSequentialStrategy: Execution approach determined', {"
        },
        {
          "line": 100,
          "content": "this.logger.info('SmartSequentialStrategy: Execution completed', {",
          "type": "direct_data",
          "match": "logger.info('SmartSequentialStrategy: Execution completed', {"
        },
        {
          "line": 114,
          "content": "this.logger.error('SmartSequentialStrategy: Execution failed', {",
          "type": "direct_data",
          "match": "logger.error('SmartSequentialStrategy: Execution failed', {"
        },
        {
          "line": 1057,
          "content": "this.logger.debug('Preloading dependency', { dependency });",
          "type": "direct_data",
          "match": "logger.debug('Preloading dependency', { dependency }"
        },
        {
          "line": 1057,
          "content": "this.logger.debug('Preloading dependency', { dependency });",
          "type": "object_data",
          "match": "logger.debug('Preloading dependency', { dependency }"
        }
      ]
    },
    "./backend/domain/workflows/execution/strategies/BatchSequentialStrategy.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 9,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 38,
          "content": "this.logger.info('BatchSequentialStrategy: Starting batch execution', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Starting batch execution', {"
        },
        {
          "line": 51,
          "content": "this.logger.info('BatchSequentialStrategy: Steps batched', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Steps batched', {"
        },
        {
          "line": 64,
          "content": "this.logger.info('BatchSequentialStrategy: Executing batch', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Executing batch', {"
        },
        {
          "line": 77,
          "content": "this.logger.warn('BatchSequentialStrategy: Batch failed, stopping execution', {",
          "type": "direct_data",
          "match": "logger.warn('BatchSequentialStrategy: Batch failed, stopping execution', {"
        },
        {
          "line": 77,
          "content": "this.logger.warn('BatchSequentialStrategy: Batch failed, stopping execution', {",
          "type": "variable_data",
          "match": "logger.warn('BatchSequentialStrategy: Batch failed, stopping"
        },
        {
          "line": 106,
          "content": "this.logger.info('BatchSequentialStrategy: Execution completed', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Execution completed', {"
        },
        {
          "line": 119,
          "content": "this.logger.error('BatchSequentialStrategy: Execution failed', {",
          "type": "direct_data",
          "match": "logger.error('BatchSequentialStrategy: Execution failed', {"
        },
        {
          "line": 360,
          "content": "this.logger.info('BatchSequentialStrategy: Executing batch', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Executing batch', {"
        },
        {
          "line": 389,
          "content": "this.logger.info('BatchSequentialStrategy: Batch completed', {",
          "type": "direct_data",
          "match": "logger.info('BatchSequentialStrategy: Batch completed', {"
        },
        {
          "line": 402,
          "content": "this.logger.error('BatchSequentialStrategy: Batch failed', {",
          "type": "direct_data",
          "match": "logger.error('BatchSequentialStrategy: Batch failed', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/ExecutionPredictor.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 7
      },
      "findings": [
        {
          "line": 80,
          "content": "this.logger.info('ExecutionPredictor: Predicting execution time', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionPredictor: Predicting execution time', {"
        },
        {
          "line": 89,
          "content": "this.logger.info('ExecutionPredictor: Insufficient historical data', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionPredictor: Insufficient historical data', {"
        },
        {
          "line": 114,
          "content": "this.logger.info('ExecutionPredictor: Prediction completed', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionPredictor: Prediction completed', {"
        },
        {
          "line": 124,
          "content": "this.logger.error('ExecutionPredictor: Prediction failed', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionPredictor: Prediction failed', {"
        },
        {
          "line": 181,
          "content": "this.logger.error('ExecutionPredictor: Resource prediction failed', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionPredictor: Resource prediction failed', {"
        },
        {
          "line": 239,
          "content": "this.logger.debug('ExecutionPredictor: Learned from execution', {",
          "type": "direct_data",
          "match": "logger.debug('ExecutionPredictor: Learned from execution', {"
        },
        {
          "line": 248,
          "content": "this.logger.error('ExecutionPredictor: Learning failed', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionPredictor: Learning failed', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/ExecutionMonitor.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 6,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 111,
          "content": "this.logger.debug('ExecutionMonitor: Registered execution', {",
          "type": "direct_data",
          "match": "logger.debug('ExecutionMonitor: Registered execution', {"
        },
        {
          "line": 163,
          "content": "this.logger.debug('ExecutionMonitor: Updated execution', {",
          "type": "direct_data",
          "match": "logger.debug('ExecutionMonitor: Updated execution', {"
        },
        {
          "line": 209,
          "content": "this.logger.info('ExecutionMonitor: Execution completed', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionMonitor: Execution completed', {"
        },
        {
          "line": 247,
          "content": "this.logger.error('ExecutionMonitor: Error recorded', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionMonitor: Error recorded', {"
        },
        {
          "line": 279,
          "content": "this.logger.warn('ExecutionMonitor: Warning recorded', {",
          "type": "direct_data",
          "match": "logger.warn('ExecutionMonitor: Warning recorded', {"
        },
        {
          "line": 479,
          "content": "this.logger.warn('ExecutionMonitor: Alert triggered', alert);",
          "type": "direct_data",
          "match": "logger.warn('ExecutionMonitor: Alert triggered', alert"
        },
        {
          "line": 479,
          "content": "this.logger.warn('ExecutionMonitor: Alert triggered', alert);",
          "type": "variable_data",
          "match": "logger.warn('ExecutionMonitor: Alert triggered', alert"
        }
      ]
    },
    "./backend/domain/workflows/execution/optimization/ExecutionOptimizer.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 4
      },
      "findings": [
        {
          "line": 196,
          "content": "this.logger.info('ExecutionOptimizer: Starting workflow optimization', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionOptimizer: Starting workflow optimization', {"
        },
        {
          "line": 255,
          "content": "this.logger.info('ExecutionOptimizer: Workflow optimization completed', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionOptimizer: Workflow optimization completed', {"
        },
        {
          "line": 277,
          "content": "this.logger.error('ExecutionOptimizer: Workflow optimization failed', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionOptimizer: Workflow optimization failed', {"
        },
        {
          "line": 379,
          "content": "this.logger.info('ExecutionOptimizer: Combined steps', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionOptimizer: Combined steps', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/optimization/StepOptimizer.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 6
      },
      "findings": [
        {
          "line": 78,
          "content": "this.logger.debug('StepOptimizer: Optimizing step', {",
          "type": "direct_data",
          "match": "logger.debug('StepOptimizer: Optimizing step', {"
        },
        {
          "line": 87,
          "content": "this.logger.debug('StepOptimizer: Using cached optimization', {",
          "type": "direct_data",
          "match": "logger.debug('StepOptimizer: Using cached optimization', {"
        },
        {
          "line": 115,
          "content": "this.logger.debug('StepOptimizer: Rule applied successfully', {",
          "type": "direct_data",
          "match": "logger.debug('StepOptimizer: Rule applied successfully', {"
        },
        {
          "line": 122,
          "content": "this.logger.warn('StepOptimizer: Rule failed', {",
          "type": "direct_data",
          "match": "logger.warn('StepOptimizer: Rule failed', {"
        },
        {
          "line": 138,
          "content": "this.logger.debug('StepOptimizer: Step optimization completed', {",
          "type": "direct_data",
          "match": "logger.debug('StepOptimizer: Step optimization completed', {"
        },
        {
          "line": 146,
          "content": "this.logger.error('StepOptimizer: Step optimization failed', {",
          "type": "direct_data",
          "match": "logger.error('StepOptimizer: Step optimization failed', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/optimization/WorkflowAnalyzer.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 6
      },
      "findings": [
        {
          "line": 86,
          "content": "this.logger.info('WorkflowAnalyzer: Starting workflow analysis', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowAnalyzer: Starting workflow analysis', {"
        },
        {
          "line": 95,
          "content": "this.logger.info('WorkflowAnalyzer: Using cached analysis', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowAnalyzer: Using cached analysis', {"
        },
        {
          "line": 119,
          "content": "this.logger.debug('WorkflowAnalyzer: Rule analysis completed', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowAnalyzer: Rule analysis completed', {"
        },
        {
          "line": 125,
          "content": "this.logger.warn('WorkflowAnalyzer: Rule analysis failed', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowAnalyzer: Rule analysis failed', {"
        },
        {
          "line": 155,
          "content": "this.logger.info('WorkflowAnalyzer: Analysis completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowAnalyzer: Analysis completed', {"
        },
        {
          "line": 164,
          "content": "this.logger.error('WorkflowAnalyzer: Analysis failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowAnalyzer: Analysis failed', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/monitoring/ExecutionMonitor.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 270,
          "content": "this.logger.info('Registered execution for monitoring', {",
          "type": "direct_data",
          "match": "logger.info('Registered execution for monitoring', {"
        },
        {
          "line": 373,
          "content": "this.logger.info('Completed execution monitoring', {",
          "type": "direct_data",
          "match": "logger.info('Completed execution monitoring', {"
        },
        {
          "line": 459,
          "content": "this.logger.warn('Alert created', {",
          "type": "direct_data",
          "match": "logger.warn('Alert created', {"
        }
      ]
    },
    "./backend/domain/workflows/execution/ResourceManager.js": {
      "totalFindings": 16,
      "byType": {
        "direct_data": 15,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 59,
          "content": "this.logger.info('Allocating resources', {",
          "type": "direct_data",
          "match": "logger.info('Allocating resources', {"
        },
        {
          "line": 89,
          "content": "this.logger.info('Resources allocated', {",
          "type": "direct_data",
          "match": "logger.info('Resources allocated', {"
        },
        {
          "line": 97,
          "content": "this.logger.error('Resource allocation failed', {",
          "type": "direct_data",
          "match": "logger.error('Resource allocation failed', {"
        },
        {
          "line": 112,
          "content": "this.logger.info('Releasing resources', {",
          "type": "direct_data",
          "match": "logger.info('Releasing resources', {"
        },
        {
          "line": 135,
          "content": "this.logger.info('Resources released', {",
          "type": "direct_data",
          "match": "logger.info('Resources released', {"
        },
        {
          "line": 144,
          "content": "this.logger.error('Resource release failed', {",
          "type": "direct_data",
          "match": "logger.error('Resource release failed', {"
        },
        {
          "line": 269,
          "content": "this.logger.error('Failed to get system resource usage', {",
          "type": "direct_data",
          "match": "logger.error('Failed to get system resource usage', {"
        },
        {
          "line": 396,
          "content": "this.logger.error('Resource monitoring failed', {",
          "type": "direct_data",
          "match": "logger.error('Resource monitoring failed', {"
        },
        {
          "line": 402,
          "content": "this.logger.info('Resource monitoring started', {",
          "type": "direct_data",
          "match": "logger.info('Resource monitoring started', {"
        },
        {
          "line": 428,
          "content": "this.logger.warn('Resource violations detected', {",
          "type": "direct_data",
          "match": "logger.warn('Resource violations detected', {"
        },
        {
          "line": 437,
          "content": "// this.logger.debug('ResourceManager: Resource monitoring', {",
          "type": "direct_data",
          "match": "logger.debug('ResourceManager: Resource monitoring', {"
        },
        {
          "line": 515,
          "content": "this.logger.warn('High memory usage detected', {",
          "type": "direct_data",
          "match": "logger.warn('High memory usage detected', {"
        },
        {
          "line": 533,
          "content": "this.logger.warn('High CPU usage detected', {",
          "type": "direct_data",
          "match": "logger.warn('High CPU usage detected', {"
        },
        {
          "line": 545,
          "content": "this.logger.warn('High concurrent execution count', {",
          "type": "direct_data",
          "match": "logger.warn('High concurrent execution count', {"
        },
        {
          "line": 591,
          "content": "this.logger.info('Resource limits updated', newLimits);",
          "type": "direct_data",
          "match": "logger.info('Resource limits updated', newLimits"
        },
        {
          "line": 591,
          "content": "this.logger.info('Resource limits updated', newLimits);",
          "type": "variable_data",
          "match": "logger.info('Resource limits updated', newLimits"
        }
      ]
    },
    "./backend/domain/workflows/categories/testing/UnitTestWorkflow.js": {
      "totalFindings": 17,
      "byType": {
        "template_data": 8,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 74,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 103,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 111,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 111,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 111,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 111,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 124,
          "content": "logger.info(`📋 Executing step: ${stepConfig.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${stepConfig.name}`"
        },
        {
          "line": 138,
          "content": "logger.info(`✅ Step ${stepConfig.name} completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step ${stepConfig.name} completed`"
        },
        {
          "line": 140,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message"
        },
        {
          "line": 140,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 140,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`"
        },
        {
          "line": 140,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 156,
          "content": "logger.info(`📋 Executing step: ${stepConfig.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${stepConfig.name}`"
        },
        {
          "line": 170,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message"
        },
        {
          "line": 170,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 170,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`"
        },
        {
          "line": 170,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/BranchStrategy.js": {
      "totalFindings": 20,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 16
      },
      "findings": [
        {
          "line": 115,
          "content": "this.logger.info('Initialized branch strategies:', Array.from(this.strategies.keys()));",
          "type": "direct_data",
          "match": "logger.info('Initialized branch strategies:', Array.from(this.strategies.keys("
        },
        {
          "line": 115,
          "content": "this.logger.info('Initialized branch strategies:', Array.from(this.strategies.keys()));",
          "type": "variable_data",
          "match": "logger.info('Initialized branch strategies:', Array"
        },
        {
          "line": 147,
          "content": "this.logger.info(`Using explicit strategy: ${explicitStrategy}`);",
          "type": "template_data",
          "match": "logger.info(`Using explicit strategy: ${explicitStrategy}`"
        },
        {
          "line": 155,
          "content": "this.logger.info(`Using task type strategy: ${strategy} (task type: ${taskType})`);",
          "type": "template_data",
          "match": "logger.info(`Using task type strategy: ${strategy} (task type: ${taskType})`"
        },
        {
          "line": 163,
          "content": "this.logger.info(`Using priority strategy: ${strategy} (priority: ${priority})`);",
          "type": "template_data",
          "match": "logger.info(`Using priority strategy: ${strategy} (priority: ${priority})`"
        },
        {
          "line": 170,
          "content": "this.logger.info(`Using keyword strategy: ${keywordStrategy}`);",
          "type": "template_data",
          "match": "logger.info(`Using keyword strategy: ${keywordStrategy}`"
        },
        {
          "line": 175,
          "content": "this.logger.info(`Using default strategy: ${this.defaultStrategy}`);",
          "type": "template_data",
          "match": "logger.info(`Using default strategy: ${this.defaultStrategy}`"
        },
        {
          "line": 179,
          "content": "this.logger.error(`Error determining strategy: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error determining strategy: ${error.message}`"
        },
        {
          "line": 223,
          "content": "this.logger.info(`Generating branch name with strategy: ${strategyName}`);",
          "type": "template_data",
          "match": "logger.info(`Generating branch name with strategy: ${strategyName}`"
        },
        {
          "line": 227,
          "content": "this.logger.info(`Generated branch name: ${branchName}`);",
          "type": "template_data",
          "match": "logger.info(`Generated branch name: ${branchName}`"
        },
        {
          "line": 250,
          "content": "this.logger.info(`Validating task with strategy: ${strategyName}`);",
          "type": "template_data",
          "match": "logger.info(`Validating task with strategy: ${strategyName}`"
        },
        {
          "line": 258,
          "content": "this.logger.info(`Validation result:`, validation);",
          "type": "direct_data",
          "match": "logger.info(`Validation result:`, validation"
        },
        {
          "line": 258,
          "content": "this.logger.info(`Validation result:`, validation);",
          "type": "variable_data",
          "match": "logger.info(`Validation result:`, validation"
        },
        {
          "line": 263,
          "content": "this.logger.error(`Validation error: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Validation error: ${error.message}`"
        },
        {
          "line": 292,
          "content": "this.logger.error(`Error getting configuration: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error getting configuration: ${error.message}`"
        },
        {
          "line": 318,
          "content": "this.logger.error(`Error getting protection rules: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error getting protection rules: ${error.message}`"
        },
        {
          "line": 340,
          "content": "this.logger.error(`Error getting merge strategy: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error getting merge strategy: ${error.message}`"
        },
        {
          "line": 355,
          "content": "this.logger.warn(`Overwriting existing strategy: ${name}`);",
          "type": "template_data",
          "match": "logger.warn(`Overwriting existing strategy: ${name}`"
        },
        {
          "line": 359,
          "content": "this.logger.info(`Added custom strategy: ${name}`);",
          "type": "template_data",
          "match": "logger.info(`Added custom strategy: ${name}`"
        },
        {
          "line": 373,
          "content": "this.logger.info(`Removed strategy: ${name}`);",
          "type": "template_data",
          "match": "logger.info(`Removed strategy: ${name}`"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/MergeStrategy.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 14,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 173,
          "content": "this.logger.info(`Using explicit merge method: ${explicitMethod}`);",
          "type": "template_data",
          "match": "logger.info(`Using explicit merge method: ${explicitMethod}`"
        },
        {
          "line": 181,
          "content": "this.logger.info(`Using task type merge method: ${method} (task type: ${taskType})`);",
          "type": "template_data",
          "match": "logger.info(`Using task type merge method: ${method} (task type: ${taskType})`"
        },
        {
          "line": 189,
          "content": "this.logger.info(`Using branch type merge method: ${method} (branch type: ${branchType})`);",
          "type": "template_data",
          "match": "logger.info(`Using branch type merge method: ${method} (branch type: ${branchType})`"
        },
        {
          "line": 194,
          "content": "this.logger.info(`Using default merge method: ${this.defaultConfig.method}`);",
          "type": "template_data",
          "match": "logger.info(`Using default merge method: ${this.defaultConfig.method}`"
        },
        {
          "line": 198,
          "content": "this.logger.error(`Error determining merge method: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error determining merge method: ${error.message}`"
        },
        {
          "line": 214,
          "content": "this.logger.info(`Using explicit automation level: ${explicitLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using explicit automation level: ${explicitLevel}`"
        },
        {
          "line": 222,
          "content": "this.logger.info(`Using priority automation level: ${level} (priority: ${priority})`);",
          "type": "template_data",
          "match": "logger.info(`Using priority automation level: ${level} (priority: ${priority})`"
        },
        {
          "line": 227,
          "content": "this.logger.info(`Using default automation level: ${this.defaultConfig.automationLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using default automation level: ${this.defaultConfig.automationLevel}`"
        },
        {
          "line": 231,
          "content": "this.logger.error(`Error determining automation level: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error determining automation level: ${error.message}`"
        },
        {
          "line": 261,
          "content": "this.logger.info(`Merge configuration:`, {",
          "type": "direct_data",
          "match": "logger.info(`Merge configuration:`, {"
        },
        {
          "line": 270,
          "content": "this.logger.error(`Error getting merge configuration: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Error getting merge configuration: ${error.message}`"
        },
        {
          "line": 436,
          "content": "this.logger.warn(`Overwriting existing merge method: ${name}`);",
          "type": "template_data",
          "match": "logger.warn(`Overwriting existing merge method: ${name}`"
        },
        {
          "line": 449,
          "content": "this.logger.info(`Added custom merge method: ${name}`);",
          "type": "template_data",
          "match": "logger.info(`Added custom merge method: ${name}`"
        },
        {
          "line": 459,
          "content": "this.logger.warn(`Overwriting existing automation level: ${name}`);",
          "type": "template_data",
          "match": "logger.warn(`Overwriting existing automation level: ${name}`"
        },
        {
          "line": 472,
          "content": "this.logger.info(`Added custom automation level: ${name}`);",
          "type": "template_data",
          "match": "logger.info(`Added custom automation level: ${name}`"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/strategies/FeatureBranchStrategy.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 58,
          "content": "this.logger.info('FeatureBranchStrategy: Generated branch name', {",
          "type": "direct_data",
          "match": "logger.info('FeatureBranchStrategy: Generated branch name', {"
        },
        {
          "line": 68,
          "content": "this.logger.error('FeatureBranchStrategy: Failed to generate branch name', {",
          "type": "direct_data",
          "match": "logger.error('FeatureBranchStrategy: Failed to generate branch name', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/strategies/HotfixBranchStrategy.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 65,
          "content": "this.logger.info('HotfixBranchStrategy: Generated branch name', {",
          "type": "direct_data",
          "match": "logger.info('HotfixBranchStrategy: Generated branch name', {"
        },
        {
          "line": 76,
          "content": "this.logger.error('HotfixBranchStrategy: Failed to generate branch name', {",
          "type": "direct_data",
          "match": "logger.error('HotfixBranchStrategy: Failed to generate branch name', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/AutoReviewService.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 7
      },
      "findings": [
        {
          "line": 75,
          "content": "this.logger.info('AutoReviewService: Starting pull request review', {",
          "type": "direct_data",
          "match": "logger.info('AutoReviewService: Starting pull request review', {"
        },
        {
          "line": 148,
          "content": "this.logger.info('AutoReviewService: Pull request review completed', {",
          "type": "direct_data",
          "match": "logger.info('AutoReviewService: Pull request review completed', {"
        },
        {
          "line": 162,
          "content": "this.logger.error('AutoReviewService: Pull request review failed', {",
          "type": "direct_data",
          "match": "logger.error('AutoReviewService: Pull request review failed', {"
        },
        {
          "line": 211,
          "content": "this.logger.warn('AutoReviewService: Code quality review failed', {",
          "type": "direct_data",
          "match": "logger.warn('AutoReviewService: Code quality review failed', {"
        },
        {
          "line": 250,
          "content": "this.logger.warn('AutoReviewService: Security review failed', {",
          "type": "direct_data",
          "match": "logger.warn('AutoReviewService: Security review failed', {"
        },
        {
          "line": 289,
          "content": "this.logger.warn('AutoReviewService: Test review failed', {",
          "type": "direct_data",
          "match": "logger.warn('AutoReviewService: Test review failed', {"
        },
        {
          "line": 328,
          "content": "this.logger.warn('AutoReviewService: Performance review failed', {",
          "type": "direct_data",
          "match": "logger.warn('AutoReviewService: Performance review failed', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/GitWorkflowAudit.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 5,
        "template_data": 1
      },
      "findings": [
        {
          "line": 75,
          "content": "this.logger.info('GitWorkflowAudit: Workflow completed', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowAudit: Workflow completed', {"
        },
        {
          "line": 121,
          "content": "this.logger.error('GitWorkflowAudit: Workflow failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowAudit: Workflow failed', {"
        },
        {
          "line": 295,
          "content": "this.logger.warn('GitWorkflowAudit: Permission denied', {",
          "type": "direct_data",
          "match": "logger.warn('GitWorkflowAudit: Permission denied', {"
        },
        {
          "line": 336,
          "content": "this.logger.warn('GitWorkflowAudit: Validation failed', {",
          "type": "direct_data",
          "match": "logger.warn('GitWorkflowAudit: Validation failed', {"
        },
        {
          "line": 377,
          "content": "this.logger.error('GitWorkflowAudit: Security violation detected', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowAudit: Security violation detected', {"
        },
        {
          "line": 571,
          "content": "this.logger.info(`GitWorkflowAudit: Auditing ${enabled ? 'enabled' : 'disabled'}`);",
          "type": "template_data",
          "match": "logger.info(`GitWorkflowAudit: Auditing ${enabled ? 'enabled' : 'disabled'}`"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/PullRequestManager.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 45,
          "content": "this.logger.info('PullRequestManager: Creating pull request', {",
          "type": "direct_data",
          "match": "logger.info('PullRequestManager: Creating pull request', {"
        },
        {
          "line": 102,
          "content": "this.logger.info('PullRequestManager: Pull request created successfully', {",
          "type": "direct_data",
          "match": "logger.info('PullRequestManager: Pull request created successfully', {"
        },
        {
          "line": 111,
          "content": "this.logger.error('PullRequestManager: Failed to create pull request', {",
          "type": "direct_data",
          "match": "logger.error('PullRequestManager: Failed to create pull request', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/git/GitWorkflowManager.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 20,
        "variable_data": 4
      },
      "findings": [
        {
          "line": 41,
          "content": "this.logger.info('GitWorkflowManager: Starting git workflow', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Starting git workflow', {"
        },
        {
          "line": 114,
          "content": "this.logger.info('GitWorkflowManager: Git workflow completed successfully', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Git workflow completed successfully', {"
        },
        {
          "line": 125,
          "content": "this.logger.error('GitWorkflowManager: Git workflow failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Git workflow failed', {"
        },
        {
          "line": 171,
          "content": "this.logger.info('GitWorkflowManager: Creating branch', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Creating branch', {"
        },
        {
          "line": 221,
          "content": "this.logger.error('GitWorkflowManager: Branch creation failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Branch creation failed', {"
        },
        {
          "line": 246,
          "content": "this.logger.info('GitWorkflowManager: Executing workflow steps', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Executing workflow steps', {"
        },
        {
          "line": 254,
          "content": "this.logger.warn('GitWorkflowManager: No workflow found in context, using default execution');",
          "type": "direct_data",
          "match": "logger.warn('GitWorkflowManager: No workflow found in context, using default execution'"
        },
        {
          "line": 254,
          "content": "this.logger.warn('GitWorkflowManager: No workflow found in context, using default execution');",
          "type": "variable_data",
          "match": "logger.warn('GitWorkflowManager: No workflow found in context, using"
        },
        {
          "line": 278,
          "content": "this.logger.error('GitWorkflowManager: Workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Workflow execution failed', {"
        },
        {
          "line": 386,
          "content": "this.logger.info('GitWorkflowManager: Skipping PR creation for full auto mode', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Skipping PR creation for full auto mode', {"
        },
        {
          "line": 399,
          "content": "this.logger.warn('GitWorkflowManager: No pull request manager available, skipping PR creation');",
          "type": "direct_data",
          "match": "logger.warn('GitWorkflowManager: No pull request manager available, skipping PR creation'"
        },
        {
          "line": 399,
          "content": "this.logger.warn('GitWorkflowManager: No pull request manager available, skipping PR creation');",
          "type": "variable_data",
          "match": "logger.warn('GitWorkflowManager: No pull request manager available, skipping"
        },
        {
          "line": 409,
          "content": "this.logger.info('GitWorkflowManager: Creating pull request', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Creating pull request', {"
        },
        {
          "line": 458,
          "content": "this.logger.error('GitWorkflowManager: Pull request creation failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Pull request creation failed', {"
        },
        {
          "line": 486,
          "content": "this.logger.info('GitWorkflowManager: Skipping auto review', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Skipping auto review', {"
        },
        {
          "line": 500,
          "content": "this.logger.warn('GitWorkflowManager: No auto review service available, skipping review');",
          "type": "direct_data",
          "match": "logger.warn('GitWorkflowManager: No auto review service available, skipping review'"
        },
        {
          "line": 500,
          "content": "this.logger.warn('GitWorkflowManager: No auto review service available, skipping review');",
          "type": "variable_data",
          "match": "logger.warn('GitWorkflowManager: No auto review service available, skipping"
        },
        {
          "line": 510,
          "content": "this.logger.info('GitWorkflowManager: Performing auto review', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Performing auto review', {"
        },
        {
          "line": 555,
          "content": "this.logger.error('GitWorkflowManager: Auto review failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Auto review failed', {"
        },
        {
          "line": 583,
          "content": "this.logger.info('GitWorkflowManager: Skipping merge for manual mode', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Skipping merge for manual mode', {"
        },
        {
          "line": 595,
          "content": "this.logger.info('GitWorkflowManager: Merging changes', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Merging changes', {"
        },
        {
          "line": 605,
          "content": "this.logger.info('GitWorkflowManager: Merge cannot be automated, manual intervention required', {",
          "type": "direct_data",
          "match": "logger.info('GitWorkflowManager: Merge cannot be automated, manual intervention required', {"
        },
        {
          "line": 605,
          "content": "this.logger.info('GitWorkflowManager: Merge cannot be automated, manual intervention required', {",
          "type": "variable_data",
          "match": "logger.info('GitWorkflowManager: Merge cannot be automated, manual"
        },
        {
          "line": 660,
          "content": "this.logger.error('GitWorkflowManager: Merge failed', {",
          "type": "direct_data",
          "match": "logger.error('GitWorkflowManager: Merge failed', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/analysis/CodeQualityWorkflow.js": {
      "totalFindings": 12,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3,
        "template_data": 3
      },
      "findings": [
        {
          "line": 41,
          "content": "logger.error('❌ Failed to initialize Code Quality Workflow:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to initialize Code Quality Workflow:', error.message"
        },
        {
          "line": 41,
          "content": "logger.error('❌ Failed to initialize Code Quality Workflow:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to initialize Code Quality Workflow:', error"
        },
        {
          "line": 41,
          "content": "logger.error('❌ Failed to initialize Code Quality Workflow:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to initialize Code Quality Workflow:', error"
        },
        {
          "line": 113,
          "content": "logger.info(`📋 Executing workflow step: ${step.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing workflow step: ${step.name}`"
        },
        {
          "line": 125,
          "content": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error.message"
        },
        {
          "line": 125,
          "content": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error"
        },
        {
          "line": 125,
          "content": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Workflow step \"${step.name}\" failed:`"
        },
        {
          "line": 125,
          "content": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Workflow step \"${step.name}\" failed:`, error"
        },
        {
          "line": 149,
          "content": "logger.info(`✅ Code Quality Workflow completed. Quality Score: ${results.summary.qualityScore}/100`);",
          "type": "template_data",
          "match": "logger.info(`✅ Code Quality Workflow completed. Quality Score: ${results.summary.qualityScore}/100`"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code Quality Workflow execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Code Quality Workflow execution failed:', error.message"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code Quality Workflow execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Code Quality Workflow execution failed:', error"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code Quality Workflow execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Code Quality Workflow execution failed:', error"
        }
      ]
    },
    "./backend/domain/workflows/categories/documentation/DocumentationWorkflow.js": {
      "totalFindings": 19,
      "byType": {
        "template_data": 8,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 3
      },
      "findings": [
        {
          "line": 75,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 112,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 120,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 120,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 120,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 120,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 138,
          "content": "logger.warn('⚠️ Could not load documentation framework, proceeding without it');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ Could not load documentation framework, proceeding without it'"
        },
        {
          "line": 138,
          "content": "logger.warn('⚠️ Could not load documentation framework, proceeding without it');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ Could not load documentation framework, proceeding"
        },
        {
          "line": 145,
          "content": "logger.info(`📋 Executing step: ${stepConfig.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${stepConfig.name}`"
        },
        {
          "line": 167,
          "content": "logger.info(`✅ Step ${stepConfig.name} completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step ${stepConfig.name} completed`"
        },
        {
          "line": 169,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message"
        },
        {
          "line": 169,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 169,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`"
        },
        {
          "line": 169,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 185,
          "content": "logger.info(`📋 Executing step: ${stepConfig.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${stepConfig.name}`"
        },
        {
          "line": 199,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message"
        },
        {
          "line": 199,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 199,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`"
        },
        {
          "line": 199,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/workflows/categories/refactoring/CodeRefactoringWorkflow.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 6,
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 74,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 99,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 107,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 107,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 107,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 107,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 120,
          "content": "logger.info(`📋 Executing step: ${stepConfig.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${stepConfig.name}`"
        },
        {
          "line": 142,
          "content": "logger.info(`✅ Step ${stepConfig.name} completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step ${stepConfig.name} completed`"
        },
        {
          "line": 144,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message"
        },
        {
          "line": 144,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        },
        {
          "line": 144,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`"
        },
        {
          "line": 144,
          "content": "logger.error(`❌ Step ${stepConfig.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step ${stepConfig.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/workflows/categories/generate/ScriptGenerationWorkflow.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 32,
          "content": "this.logger.info('ScriptGenerationWorkflow: Starting script generation', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationWorkflow: Starting script generation', {"
        },
        {
          "line": 49,
          "content": "this.logger.info('ScriptGenerationWorkflow: Script generation completed', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationWorkflow: Script generation completed', {"
        },
        {
          "line": 71,
          "content": "this.logger.error('ScriptGenerationWorkflow: Script generation failed', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationWorkflow: Script generation failed', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/generate/DocumentationGenerationWorkflow.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 33,
          "content": "this.logger.info('DocumentationGenerationWorkflow: Starting documentation generation', {",
          "type": "direct_data",
          "match": "logger.info('DocumentationGenerationWorkflow: Starting documentation generation', {"
        },
        {
          "line": 53,
          "content": "this.logger.info('DocumentationGenerationWorkflow: Documentation generation completed', {",
          "type": "direct_data",
          "match": "logger.info('DocumentationGenerationWorkflow: Documentation generation completed', {"
        },
        {
          "line": 75,
          "content": "this.logger.error('DocumentationGenerationWorkflow: Documentation generation failed', {",
          "type": "direct_data",
          "match": "logger.error('DocumentationGenerationWorkflow: Documentation generation failed', {"
        }
      ]
    },
    "./backend/domain/workflows/categories/automation/AutomationRuleEngine.js": {
      "totalFindings": 32,
      "byType": {
        "template_data": 14,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6
      },
      "findings": [
        {
          "line": 26,
          "content": "this.logger.info(`Added rule: ${automationRule.name}`);",
          "type": "template_data",
          "match": "logger.info(`Added rule: ${automationRule.name}`"
        },
        {
          "line": 28,
          "content": "this.logger.error(`Failed to add rule:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to add rule:`, error.message"
        },
        {
          "line": 28,
          "content": "this.logger.error(`Failed to add rule:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to add rule:`, error"
        },
        {
          "line": 28,
          "content": "this.logger.error(`Failed to add rule:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to add rule:`, error"
        },
        {
          "line": 41,
          "content": "this.logger.info(`Removed rule: ${rule.name}`);",
          "type": "template_data",
          "match": "logger.info(`Removed rule: ${rule.name}`"
        },
        {
          "line": 87,
          "content": "this.logger.info(`Evaluating rules for task ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Evaluating rules for task ${task.id}`"
        },
        {
          "line": 103,
          "content": "this.logger.info(`Using cached result: ${cached.automationLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using cached result: ${cached.automationLevel}`"
        },
        {
          "line": 114,
          "content": "this.logger.info(`Rule matched: ${rule.name}`);",
          "type": "template_data",
          "match": "logger.info(`Rule matched: ${rule.name}`"
        },
        {
          "line": 136,
          "content": "this.logger.info(`Rule ${rule.name} set automation level to: ${automationLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Rule ${rule.name} set automation level to: ${automationLevel}`"
        },
        {
          "line": 141,
          "content": "this.logger.error(`Error evaluating rule ${rule.name}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error evaluating rule ${rule.name}:`, error.message"
        },
        {
          "line": 141,
          "content": "this.logger.error(`Error evaluating rule ${rule.name}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error evaluating rule ${rule.name}:`, error"
        },
        {
          "line": 141,
          "content": "this.logger.error(`Error evaluating rule ${rule.name}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error evaluating rule ${rule.name}:`"
        },
        {
          "line": 141,
          "content": "this.logger.error(`Error evaluating rule ${rule.name}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error evaluating rule ${rule.name}:`, error"
        },
        {
          "line": 150,
          "content": "this.logger.error(`Error evaluating rules:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error evaluating rules:`, error.message"
        },
        {
          "line": 150,
          "content": "this.logger.error(`Error evaluating rules:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error evaluating rules:`, error"
        },
        {
          "line": 150,
          "content": "this.logger.error(`Error evaluating rules:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error evaluating rules:`, error"
        },
        {
          "line": 171,
          "content": "this.logger.error(`Error evaluating rule ${ruleId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error evaluating rule ${ruleId}:`, error.message"
        },
        {
          "line": 171,
          "content": "this.logger.error(`Error evaluating rule ${ruleId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error evaluating rule ${ruleId}:`, error"
        },
        {
          "line": 171,
          "content": "this.logger.error(`Error evaluating rule ${ruleId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error evaluating rule ${ruleId}:`"
        },
        {
          "line": 171,
          "content": "this.logger.error(`Error evaluating rule ${ruleId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error evaluating rule ${ruleId}:`, error"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Error executing rule ${ruleId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error executing rule ${ruleId}:`, error.message"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Error executing rule ${ruleId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error executing rule ${ruleId}:`, error"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Error executing rule ${ruleId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error executing rule ${ruleId}:`"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Error executing rule ${ruleId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error executing rule ${ruleId}:`, error"
        },
        {
          "line": 205,
          "content": "this.logger.info(`Enabled rule: ${rule.name}`);",
          "type": "template_data",
          "match": "logger.info(`Enabled rule: ${rule.name}`"
        },
        {
          "line": 217,
          "content": "this.logger.info(`Disabled rule: ${rule.name}`);",
          "type": "template_data",
          "match": "logger.info(`Disabled rule: ${rule.name}`"
        },
        {
          "line": 230,
          "content": "this.logger.info(`Set priority for rule ${rule.name}: ${priority}`);",
          "type": "template_data",
          "match": "logger.info(`Set priority for rule ${rule.name}: ${priority}`"
        },
        {
          "line": 253,
          "content": "this.logger.error(`Failed to load rule:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to load rule:`, error.message"
        },
        {
          "line": 253,
          "content": "this.logger.error(`Failed to load rule:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to load rule:`, error"
        },
        {
          "line": 253,
          "content": "this.logger.error(`Failed to load rule:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to load rule:`, error"
        },
        {
          "line": 257,
          "content": "this.logger.info(`Loaded ${this.rules.size} rules`);",
          "type": "template_data",
          "match": "logger.info(`Loaded ${this.rules.size} rules`"
        },
        {
          "line": 384,
          "content": "this.logger.info(`Created ${this.rules.size} default rules`);",
          "type": "template_data",
          "match": "logger.info(`Created ${this.rules.size} default rules`"
        }
      ]
    },
    "./backend/domain/workflows/categories/automation/AutomationManager.js": {
      "totalFindings": 39,
      "byType": {
        "template_data": 9,
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10
      },
      "findings": [
        {
          "line": 32,
          "content": "this.logger.info(`Determining automation level for task ${task.id}`);",
          "type": "template_data",
          "match": "logger.info(`Determining automation level for task ${task.id}`"
        },
        {
          "line": 39,
          "content": "this.logger.info(`Using user preference: ${userLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using user preference: ${userLevel}`"
        },
        {
          "line": 49,
          "content": "this.logger.info(`Using project setting: ${projectLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using project setting: ${projectLevel}`"
        },
        {
          "line": 57,
          "content": "this.logger.info(`Using task type level: ${taskLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using task type level: ${taskLevel}`"
        },
        {
          "line": 64,
          "content": "this.logger.info(`Using full auto based on confidence: ${confidence}`);",
          "type": "template_data",
          "match": "logger.info(`Using full auto based on confidence: ${confidence}`"
        },
        {
          "line": 71,
          "content": "this.logger.info(`Using rule-based level: ${ruleLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using rule-based level: ${ruleLevel}`"
        },
        {
          "line": 75,
          "content": "this.logger.info(`Using default level: ${this.defaultLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Using default level: ${this.defaultLevel}`"
        },
        {
          "line": 79,
          "content": "this.logger.error(`Error determining automation level:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error determining automation level:`, error.message"
        },
        {
          "line": 79,
          "content": "this.logger.error(`Error determining automation level:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error determining automation level:`, error"
        },
        {
          "line": 79,
          "content": "this.logger.error(`Error determining automation level:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error determining automation level:`, error"
        },
        {
          "line": 94,
          "content": "this.logger.error(`Error calculating confidence:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error calculating confidence:`, error.message"
        },
        {
          "line": 94,
          "content": "this.logger.error(`Error calculating confidence:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error calculating confidence:`, error"
        },
        {
          "line": 94,
          "content": "this.logger.error(`Error calculating confidence:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error calculating confidence:`, error"
        },
        {
          "line": 108,
          "content": "this.logger.info(`Set user preference: ${level}`);",
          "type": "template_data",
          "match": "logger.info(`Set user preference: ${level}`"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Failed to set user preference:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to set user preference:`, error.message"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Failed to set user preference:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to set user preference:`, error"
        },
        {
          "line": 110,
          "content": "this.logger.error(`Failed to set user preference:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to set user preference:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Failed to get user preference:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get user preference:`, error.message"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Failed to get user preference:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get user preference:`, error"
        },
        {
          "line": 124,
          "content": "this.logger.error(`Failed to get user preference:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get user preference:`, error"
        },
        {
          "line": 138,
          "content": "this.logger.info(`Set project setting for ${projectId}: ${level}`);",
          "type": "template_data",
          "match": "logger.info(`Set project setting for ${projectId}: ${level}`"
        },
        {
          "line": 140,
          "content": "this.logger.error(`Failed to set project setting:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to set project setting:`, error.message"
        },
        {
          "line": 140,
          "content": "this.logger.error(`Failed to set project setting:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to set project setting:`, error"
        },
        {
          "line": 140,
          "content": "this.logger.error(`Failed to set project setting:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to set project setting:`, error"
        },
        {
          "line": 154,
          "content": "this.logger.error(`Failed to get project setting:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get project setting:`, error.message"
        },
        {
          "line": 154,
          "content": "this.logger.error(`Failed to get project setting:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get project setting:`, error"
        },
        {
          "line": 154,
          "content": "this.logger.error(`Failed to get project setting:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get project setting:`, error"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Error checking confirmation requirement:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error checking confirmation requirement:`, error.message"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Error checking confirmation requirement:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error checking confirmation requirement:`, error"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Error checking confirmation requirement:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error checking confirmation requirement:`, error"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Error checking human review requirement:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error checking human review requirement:`, error.message"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Error checking human review requirement:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error checking human review requirement:`, error"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Error checking human review requirement:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error checking human review requirement:`, error"
        },
        {
          "line": 223,
          "content": "this.logger.error(`Error checking full automation:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error checking full automation:`, error.message"
        },
        {
          "line": 223,
          "content": "this.logger.error(`Error checking full automation:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error checking full automation:`, error"
        },
        {
          "line": 223,
          "content": "this.logger.error(`Error checking full automation:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error checking full automation:`, error"
        },
        {
          "line": 239,
          "content": "this.logger.error(`Error getting confidence threshold:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting confidence threshold:`, error.message"
        },
        {
          "line": 239,
          "content": "this.logger.error(`Error getting confidence threshold:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting confidence threshold:`, error"
        },
        {
          "line": 239,
          "content": "this.logger.error(`Error getting confidence threshold:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting confidence threshold:`, error"
        }
      ]
    },
    "./backend/domain/workflows/categories/automation/ProjectAutomationSettings.js": {
      "totalFindings": 37,
      "byType": {
        "template_data": 10,
        "direct_data": 9,
        "variable_data": 9,
        "error_object": 9
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.info(`Setting automation for project ${projectId}: ${automationLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Setting automation for project ${projectId}: ${automationLevel}`"
        },
        {
          "line": 62,
          "content": "this.logger.error(`Failed to set setting for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to set setting for project ${projectId}:`, error.message"
        },
        {
          "line": 62,
          "content": "this.logger.error(`Failed to set setting for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to set setting for project ${projectId}:`, error"
        },
        {
          "line": 62,
          "content": "this.logger.error(`Failed to set setting for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to set setting for project ${projectId}:`"
        },
        {
          "line": 62,
          "content": "this.logger.error(`Failed to set setting for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to set setting for project ${projectId}:`, error"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to get setting for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get setting for project ${projectId}:`, error.message"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to get setting for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get setting for project ${projectId}:`, error"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to get setting for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to get setting for project ${projectId}:`"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to get setting for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get setting for project ${projectId}:`, error"
        },
        {
          "line": 169,
          "content": "this.logger.error(`Failed to add rule for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to add rule for project ${projectId}:`, error.message"
        },
        {
          "line": 169,
          "content": "this.logger.error(`Failed to add rule for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to add rule for project ${projectId}:`, error"
        },
        {
          "line": 169,
          "content": "this.logger.error(`Failed to add rule for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to add rule for project ${projectId}:`"
        },
        {
          "line": 169,
          "content": "this.logger.error(`Failed to add rule for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to add rule for project ${projectId}:`, error"
        },
        {
          "line": 206,
          "content": "this.logger.error(`Failed to remove rule for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to remove rule for project ${projectId}:`, error.message"
        },
        {
          "line": 206,
          "content": "this.logger.error(`Failed to remove rule for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to remove rule for project ${projectId}:`, error"
        },
        {
          "line": 206,
          "content": "this.logger.error(`Failed to remove rule for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to remove rule for project ${projectId}:`"
        },
        {
          "line": 206,
          "content": "this.logger.error(`Failed to remove rule for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to remove rule for project ${projectId}:`, error"
        },
        {
          "line": 243,
          "content": "this.logger.error(`Failed to add exception for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to add exception for project ${projectId}:`, error.message"
        },
        {
          "line": 243,
          "content": "this.logger.error(`Failed to add exception for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to add exception for project ${projectId}:`, error"
        },
        {
          "line": 243,
          "content": "this.logger.error(`Failed to add exception for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to add exception for project ${projectId}:`"
        },
        {
          "line": 243,
          "content": "this.logger.error(`Failed to add exception for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to add exception for project ${projectId}:`, error"
        },
        {
          "line": 280,
          "content": "this.logger.error(`Failed to remove exception for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to remove exception for project ${projectId}:`, error.message"
        },
        {
          "line": 280,
          "content": "this.logger.error(`Failed to remove exception for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to remove exception for project ${projectId}:`, error"
        },
        {
          "line": 280,
          "content": "this.logger.error(`Failed to remove exception for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to remove exception for project ${projectId}:`"
        },
        {
          "line": 280,
          "content": "this.logger.error(`Failed to remove exception for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to remove exception for project ${projectId}:`, error"
        },
        {
          "line": 292,
          "content": "this.logger.info(`Deleting setting for project ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Deleting setting for project ${projectId}`"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to delete setting for project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to delete setting for project ${projectId}:`, error.message"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to delete setting for project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to delete setting for project ${projectId}:`, error"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to delete setting for project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to delete setting for project ${projectId}:`"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to delete setting for project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to delete setting for project ${projectId}:`, error"
        },
        {
          "line": 334,
          "content": "this.logger.error('Failed to get all project settings:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get all project settings:', error.message"
        },
        {
          "line": 334,
          "content": "this.logger.error('Failed to get all project settings:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get all project settings:', error"
        },
        {
          "line": 334,
          "content": "this.logger.error('Failed to get all project settings:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get all project settings:', error"
        },
        {
          "line": 352,
          "content": "this.logger.error(`Failed to get projects by automation level ${automationLevel}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get projects by automation level ${automationLevel}:`, error.message"
        },
        {
          "line": 352,
          "content": "this.logger.error(`Failed to get projects by automation level ${automationLevel}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get projects by automation level ${automationLevel}:`, error"
        },
        {
          "line": 352,
          "content": "this.logger.error(`Failed to get projects by automation level ${automationLevel}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to get projects by automation level ${automationLevel}:`"
        },
        {
          "line": 352,
          "content": "this.logger.error(`Failed to get projects by automation level ${automationLevel}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get projects by automation level ${automationLevel}:`, error"
        }
      ]
    },
    "./backend/domain/workflows/categories/automation/UserPreferenceManager.js": {
      "totalFindings": 24,
      "byType": {
        "template_data": 6,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.info(`Setting user preference: ${automationLevel}`);",
          "type": "template_data",
          "match": "logger.info(`Setting user preference: ${automationLevel}`"
        },
        {
          "line": 57,
          "content": "this.logger.error(`Failed to set preference for user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to set preference for user ${userId}:`, error.message"
        },
        {
          "line": 57,
          "content": "this.logger.error(`Failed to set preference for user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to set preference for user ${userId}:`, error"
        },
        {
          "line": 57,
          "content": "this.logger.error(`Failed to set preference for user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to set preference for user ${userId}:`"
        },
        {
          "line": 57,
          "content": "this.logger.error(`Failed to set preference for user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to set preference for user ${userId}:`, error"
        },
        {
          "line": 105,
          "content": "this.logger.error(`Failed to get preference for user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get preference for user ${userId}:`, error.message"
        },
        {
          "line": 105,
          "content": "this.logger.error(`Failed to get preference for user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get preference for user ${userId}:`, error"
        },
        {
          "line": 105,
          "content": "this.logger.error(`Failed to get preference for user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to get preference for user ${userId}:`"
        },
        {
          "line": 105,
          "content": "this.logger.error(`Failed to get preference for user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get preference for user ${userId}:`, error"
        },
        {
          "line": 162,
          "content": "this.logger.error(`Failed to update metadata for user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to update metadata for user ${userId}:`, error.message"
        },
        {
          "line": 162,
          "content": "this.logger.error(`Failed to update metadata for user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to update metadata for user ${userId}:`, error"
        },
        {
          "line": 162,
          "content": "this.logger.error(`Failed to update metadata for user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to update metadata for user ${userId}:`"
        },
        {
          "line": 162,
          "content": "this.logger.error(`Failed to update metadata for user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to update metadata for user ${userId}:`, error"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Failed to delete preference for user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to delete preference for user ${userId}:`, error.message"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Failed to delete preference for user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to delete preference for user ${userId}:`, error"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Failed to delete preference for user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to delete preference for user ${userId}:`"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Failed to delete preference for user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to delete preference for user ${userId}:`, error"
        },
        {
          "line": 214,
          "content": "this.logger.error('Failed to get all user preferences:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get all user preferences:', error.message"
        },
        {
          "line": 214,
          "content": "this.logger.error('Failed to get all user preferences:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get all user preferences:', error"
        },
        {
          "line": 214,
          "content": "this.logger.error('Failed to get all user preferences:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get all user preferences:', error"
        },
        {
          "line": 232,
          "content": "this.logger.error(`Failed to get users by automation level ${automationLevel}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get users by automation level ${automationLevel}:`, error.message"
        },
        {
          "line": 232,
          "content": "this.logger.error(`Failed to get users by automation level ${automationLevel}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get users by automation level ${automationLevel}:`, error"
        },
        {
          "line": 232,
          "content": "this.logger.error(`Failed to get users by automation level ${automationLevel}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to get users by automation level ${automationLevel}:`"
        },
        {
          "line": 232,
          "content": "this.logger.error(`Failed to get users by automation level ${automationLevel}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get users by automation level ${automationLevel}:`, error"
        }
      ]
    },
    "./backend/domain/entities/StreamingPort.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 5,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 76,
          "content": "logger.info(`Started streaming for port ${this.port}`);",
          "type": "template_data",
          "match": "logger.info(`Started streaming for port ${this.port}`"
        },
        {
          "line": 90,
          "content": "logger.info(`Stopped streaming for port ${this.port}`);",
          "type": "template_data",
          "match": "logger.info(`Stopped streaming for port ${this.port}`"
        },
        {
          "line": 102,
          "content": "logger.info(`Paused streaming for port ${this.port}`);",
          "type": "template_data",
          "match": "logger.info(`Paused streaming for port ${this.port}`"
        },
        {
          "line": 114,
          "content": "logger.info(`Resumed streaming for port ${this.port}`);",
          "type": "template_data",
          "match": "logger.info(`Resumed streaming for port ${this.port}`"
        },
        {
          "line": 148,
          "content": "logger.error(`Error for port ${this.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error for port ${this.port}:`, error"
        },
        {
          "line": 148,
          "content": "logger.error(`Error for port ${this.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error for port ${this.port}:`, error"
        },
        {
          "line": 148,
          "content": "logger.error(`Error for port ${this.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error for port ${this.port}:`"
        },
        {
          "line": 148,
          "content": "logger.error(`Error for port ${this.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error for port ${this.port}:`, error"
        }
      ]
    },
    "./backend/domain/frameworks/index.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize framework system:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to initialize framework system:', error.message"
        },
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize framework system:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to initialize framework system:', error"
        },
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize framework system:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to initialize framework system:', error"
        }
      ]
    },
    "./backend/domain/frameworks/FrameworkRegistry.js": {
      "totalFindings": 16,
      "byType": {
        "template_data": 7,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 61,
          "content": "logger.info(`✅ Framework \"${name}\" registered successfully in category \"${finalCategory}\"`);",
          "type": "template_data",
          "match": "logger.info(`✅ Framework \"${name}\" registered successfully in category \"${finalCategory}\"`"
        },
        {
          "line": 64,
          "content": "logger.error(`❌ Failed to register framework \"${name}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to register framework \"${name}\":`, error.message"
        },
        {
          "line": 64,
          "content": "logger.error(`❌ Failed to register framework \"${name}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to register framework \"${name}\":`, error"
        },
        {
          "line": 64,
          "content": "logger.error(`❌ Failed to register framework \"${name}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to register framework \"${name}\":`"
        },
        {
          "line": 64,
          "content": "logger.error(`❌ Failed to register framework \"${name}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to register framework \"${name}\":`, error"
        },
        {
          "line": 100,
          "content": "logger.error(`❌ Failed to load config \"${file}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to load config \"${file}\":`, error.message"
        },
        {
          "line": 100,
          "content": "logger.error(`❌ Failed to load config \"${file}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to load config \"${file}\":`, error"
        },
        {
          "line": 100,
          "content": "logger.error(`❌ Failed to load config \"${file}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to load config \"${file}\":`"
        },
        {
          "line": 100,
          "content": "logger.error(`❌ Failed to load config \"${file}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to load config \"${file}\":`, error"
        },
        {
          "line": 104,
          "content": "logger.info(`📦 Loaded ${this.frameworks.size} framework configurations`);",
          "type": "template_data",
          "match": "logger.info(`📦 Loaded ${this.frameworks.size} framework configurations`"
        },
        {
          "line": 106,
          "content": "logger.error('❌ Failed to load framework configs:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to load framework configs:', error.message"
        },
        {
          "line": 106,
          "content": "logger.error('❌ Failed to load framework configs:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to load framework configs:', error"
        },
        {
          "line": 106,
          "content": "logger.error('❌ Failed to load framework configs:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to load framework configs:', error"
        },
        {
          "line": 161,
          "content": "logger.info(`✅ Framework \"${name}\" updated successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ Framework \"${name}\" updated successfully`"
        },
        {
          "line": 189,
          "content": "logger.info(`🗑️ Framework \"${name}\" removed successfully`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ Framework \"${name}\" removed successfully`"
        },
        {
          "line": 248,
          "content": "logger.info(`✅ Framework \"${name}\" status set to \"${status}\"`);",
          "type": "template_data",
          "match": "logger.info(`✅ Framework \"${name}\" status set to \"${status}\"`"
        }
      ]
    },
    "./backend/domain/frameworks/FrameworkBuilder.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 6,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info(`📦 Using cached framework instance for \"${frameworkName}\"`);",
          "type": "template_data",
          "match": "logger.info(`📦 Using cached framework instance for \"${frameworkName}\"`"
        },
        {
          "line": 43,
          "content": "logger.info(`🔨 Framework \"${frameworkName}\" built successfully`);",
          "type": "template_data",
          "match": "logger.info(`🔨 Framework \"${frameworkName}\" built successfully`"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error"
        },
        {
          "line": 104,
          "content": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error.message"
        },
        {
          "line": 104,
          "content": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error"
        },
        {
          "line": 104,
          "content": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`"
        },
        {
          "line": 104,
          "content": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build step \"${stepConfig.name}\":`, error"
        },
        {
          "line": 217,
          "content": "logger.info(`🗑️ Cleared cache for framework \"${frameworkName}\"`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ Cleared cache for framework \"${frameworkName}\"`"
        },
        {
          "line": 260,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message"
        },
        {
          "line": 260,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error"
        },
        {
          "line": 260,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`"
        },
        {
          "line": 260,
          "content": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build framework \"${frameworkName}\":`, error"
        }
      ]
    },
    "./backend/domain/frameworks/categories/testing/IntegrationTestFramework.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 75,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/frameworks/categories/testing/UnitTestFramework.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 65,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 69,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 77,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 77,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 77,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 77,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/frameworks/categories/deployment/DeploymentFramework.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 77,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 81,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 89,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 89,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 89,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 89,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/frameworks/categories/analysis/CodeQualityFramework.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 2,
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 118,
          "content": "logger.info(`📋 Executing step: ${step.name}`);",
          "type": "template_data",
          "match": "logger.info(`📋 Executing step: ${step.name}`"
        },
        {
          "line": 131,
          "content": "logger.error(`❌ Step \"${step.name}\" failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Step \"${step.name}\" failed:`, error.message"
        },
        {
          "line": 131,
          "content": "logger.error(`❌ Step \"${step.name}\" failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Step \"${step.name}\" failed:`, error"
        },
        {
          "line": 131,
          "content": "logger.error(`❌ Step \"${step.name}\" failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Step \"${step.name}\" failed:`"
        },
        {
          "line": 131,
          "content": "logger.error(`❌ Step \"${step.name}\" failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Step \"${step.name}\" failed:`, error"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code quality analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Code quality analysis failed:', error.message"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code quality analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Code quality analysis failed:', error"
        },
        {
          "line": 153,
          "content": "logger.error('❌ Code quality analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Code quality analysis failed:', error"
        }
      ]
    },
    "./backend/domain/frameworks/categories/refactoring/CodeRefactoringFramework.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.info(`🚀 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing ${this.name}...`"
        },
        {
          "line": 75,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 83,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/steps/StepRegistry.js": {
      "totalFindings": 30,
      "byType": {
        "template_data": 13,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 5
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.info(`✅ Step \"${name}\" registered successfully in category \"${finalCategory}\"`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step \"${name}\" registered successfully in category \"${finalCategory}\"`"
        },
        {
          "line": 74,
          "content": "logger.error(`❌ Failed to register step \"${name}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to register step \"${name}\":`, error.message"
        },
        {
          "line": 74,
          "content": "logger.error(`❌ Failed to register step \"${name}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to register step \"${name}\":`, error"
        },
        {
          "line": 74,
          "content": "logger.error(`❌ Failed to register step \"${name}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to register step \"${name}\":`"
        },
        {
          "line": 74,
          "content": "logger.error(`❌ Failed to register step \"${name}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to register step \"${name}\":`, error"
        },
        {
          "line": 90,
          "content": "logger.info('📁 Categories directory not found, trying alternative path...');",
          "type": "direct_data",
          "match": "logger.info('📁 Categories directory not found, trying alternative path...'"
        },
        {
          "line": 90,
          "content": "logger.info('📁 Categories directory not found, trying alternative path...');",
          "type": "variable_data",
          "match": "logger.info('📁 Categories directory not found, trying"
        },
        {
          "line": 107,
          "content": "logger.info(`📦 Loaded ${this.steps.size} steps from alternative categories path`);",
          "type": "template_data",
          "match": "logger.info(`📦 Loaded ${this.steps.size} steps from alternative categories path`"
        },
        {
          "line": 127,
          "content": "logger.info(`📦 Loaded ${this.steps.size} steps from categories`);",
          "type": "template_data",
          "match": "logger.info(`📦 Loaded ${this.steps.size} steps from categories`"
        },
        {
          "line": 129,
          "content": "logger.error('❌ Failed to load steps from categories:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to load steps from categories:', error.message"
        },
        {
          "line": 129,
          "content": "logger.error('❌ Failed to load steps from categories:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to load steps from categories:', error"
        },
        {
          "line": 129,
          "content": "logger.error('❌ Failed to load steps from categories:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to load steps from categories:', error"
        },
        {
          "line": 155,
          "content": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error.message"
        },
        {
          "line": 155,
          "content": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error"
        },
        {
          "line": 155,
          "content": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`"
        },
        {
          "line": 155,
          "content": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to load step \"${file}\" from category \"${category}\":`, error"
        },
        {
          "line": 159,
          "content": "logger.error(`❌ Failed to load category \"${category}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to load category \"${category}\":`, error.message"
        },
        {
          "line": 159,
          "content": "logger.error(`❌ Failed to load category \"${category}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to load category \"${category}\":`, error"
        },
        {
          "line": 159,
          "content": "logger.error(`❌ Failed to load category \"${category}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to load category \"${category}\":`"
        },
        {
          "line": 159,
          "content": "logger.error(`❌ Failed to load category \"${category}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to load category \"${category}\":`, error"
        },
        {
          "line": 219,
          "content": "logger.info(`🚀 Executing step \"${name}\"...`);",
          "type": "template_data",
          "match": "logger.info(`🚀 Executing step \"${name}\"...`"
        },
        {
          "line": 232,
          "content": "logger.info(`✅ Step \"${name}\" executed successfully in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step \"${name}\" executed successfully in ${duration}ms`"
        },
        {
          "line": 241,
          "content": "logger.error(`❌ Failed to execute step \"${name}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to execute step \"${name}\":`, error.message"
        },
        {
          "line": 241,
          "content": "logger.error(`❌ Failed to execute step \"${name}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to execute step \"${name}\":`, error"
        },
        {
          "line": 241,
          "content": "logger.error(`❌ Failed to execute step \"${name}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to execute step \"${name}\":`"
        },
        {
          "line": 241,
          "content": "logger.error(`❌ Failed to execute step \"${name}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to execute step \"${name}\":`, error"
        },
        {
          "line": 319,
          "content": "logger.info(`✅ Step \"${name}\" updated successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step \"${name}\" updated successfully`"
        },
        {
          "line": 347,
          "content": "logger.info(`🗑️ Step \"${name}\" removed successfully`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ Step \"${name}\" removed successfully`"
        },
        {
          "line": 402,
          "content": "logger.info(`✅ Step \"${name}\" status set to \"${status}\"`);",
          "type": "template_data",
          "match": "logger.info(`✅ Step \"${name}\" status set to \"${status}\"`"
        },
        {
          "line": 630,
          "content": "logger.warn(`Executor for step \"${name}\" needs to be re-registered`);",
          "type": "template_data",
          "match": "logger.warn(`Executor for step \"${name}\" needs to be re-registered`"
        }
      ]
    },
    "./backend/domain/steps/index.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize step system:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to initialize step system:', error.message"
        },
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize step system:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to initialize step system:', error"
        },
        {
          "line": 32,
          "content": "logger.error('❌ Failed to initialize step system:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to initialize step system:', error"
        }
      ]
    },
    "./backend/domain/steps/StepBuilder.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 6,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info(`📦 Using cached step instance for \"${stepName}\"`);",
          "type": "template_data",
          "match": "logger.info(`📦 Using cached step instance for \"${stepName}\"`"
        },
        {
          "line": 43,
          "content": "logger.info(`🔨 Step \"${stepName}\" built successfully`);",
          "type": "template_data",
          "match": "logger.info(`🔨 Step \"${stepName}\" built successfully`"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`"
        },
        {
          "line": 46,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error"
        },
        {
          "line": 88,
          "content": "logger.info(`🔨 Step \"${instance.name}\" built from config`);",
          "type": "template_data",
          "match": "logger.info(`🔨 Step \"${instance.name}\" built from config`"
        },
        {
          "line": 91,
          "content": "logger.error(`❌ Failed to build step from config:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build step from config:`, error.message"
        },
        {
          "line": 91,
          "content": "logger.error(`❌ Failed to build step from config:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build step from config:`, error"
        },
        {
          "line": 91,
          "content": "logger.error(`❌ Failed to build step from config:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build step from config:`, error"
        },
        {
          "line": 147,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message"
        },
        {
          "line": 147,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error"
        },
        {
          "line": 147,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`"
        },
        {
          "line": 147,
          "content": "logger.error(`❌ Failed to build step \"${stepName}\":`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to build step \"${stepName}\":`, error"
        },
        {
          "line": 240,
          "content": "logger.info(`🗑️ Cleared cache for step \"${stepName}\"`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ Cleared cache for step \"${stepName}\"`"
        }
      ]
    },
    "./backend/domain/steps/categories/testing/testing_step.js": {
      "totalFindings": 32,
      "byType": {
        "template_data": 4,
        "direct_data": 11,
        "variable_data": 11,
        "error_object": 6
      },
      "findings": [
        {
          "line": 63,
          "content": "logger.info(`🧪 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🧪 Executing ${this.name}...`"
        },
        {
          "line": 78,
          "content": "logger.debug(`📊 Starting comprehensive testing for: ${projectPath}`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Starting comprehensive testing for: ${projectPath}`"
        },
        {
          "line": 113,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 121,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 121,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 121,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 121,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 141,
          "content": "logger.warn('⚠️ TestAnalyzer not available, skipping test analysis');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ TestAnalyzer not available, skipping test analysis'"
        },
        {
          "line": 141,
          "content": "logger.warn('⚠️ TestAnalyzer not available, skipping test analysis');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ TestAnalyzer not available, skipping"
        },
        {
          "line": 175,
          "content": "logger.error('❌ Test analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Test analysis failed:', error.message"
        },
        {
          "line": 175,
          "content": "logger.error('❌ Test analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Test analysis failed:', error"
        },
        {
          "line": 175,
          "content": "logger.error('❌ Test analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Test analysis failed:', error"
        },
        {
          "line": 190,
          "content": "logger.warn('⚠️ GenerateTestsHandler not available, skipping test generation');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ GenerateTestsHandler not available, skipping test generation'"
        },
        {
          "line": 190,
          "content": "logger.warn('⚠️ GenerateTestsHandler not available, skipping test generation');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ GenerateTestsHandler not available, skipping"
        },
        {
          "line": 215,
          "content": "logger.error('❌ Test generation failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Test generation failed:', error.message"
        },
        {
          "line": 215,
          "content": "logger.error('❌ Test generation failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Test generation failed:', error"
        },
        {
          "line": 215,
          "content": "logger.error('❌ Test generation failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Test generation failed:', error"
        },
        {
          "line": 230,
          "content": "logger.warn('⚠️ TestCorrectionService not available, skipping test fixing');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ TestCorrectionService not available, skipping test fixing'"
        },
        {
          "line": 230,
          "content": "logger.warn('⚠️ TestCorrectionService not available, skipping test fixing');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ TestCorrectionService not available, skipping"
        },
        {
          "line": 245,
          "content": "logger.error('❌ Test fixing failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Test fixing failed:', error.message"
        },
        {
          "line": 245,
          "content": "logger.error('❌ Test fixing failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Test fixing failed:', error"
        },
        {
          "line": 245,
          "content": "logger.error('❌ Test fixing failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Test fixing failed:', error"
        },
        {
          "line": 260,
          "content": "logger.warn('⚠️ CoverageAnalyzer not available, skipping coverage analysis');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ CoverageAnalyzer not available, skipping coverage analysis'"
        },
        {
          "line": 260,
          "content": "logger.warn('⚠️ CoverageAnalyzer not available, skipping coverage analysis');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ CoverageAnalyzer not available, skipping"
        },
        {
          "line": 277,
          "content": "logger.error('❌ Coverage analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Coverage analysis failed:', error.message"
        },
        {
          "line": 277,
          "content": "logger.error('❌ Coverage analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Coverage analysis failed:', error"
        },
        {
          "line": 277,
          "content": "logger.error('❌ Coverage analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Coverage analysis failed:', error"
        },
        {
          "line": 292,
          "content": "logger.warn('⚠️ AutoTestFixSystem not available, skipping auto test fix');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ AutoTestFixSystem not available, skipping auto test fix'"
        },
        {
          "line": 292,
          "content": "logger.warn('⚠️ AutoTestFixSystem not available, skipping auto test fix');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ AutoTestFixSystem not available, skipping"
        },
        {
          "line": 318,
          "content": "logger.error('❌ Auto test fix failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Auto test fix failed:', error.message"
        },
        {
          "line": 318,
          "content": "logger.error('❌ Auto test fix failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Auto test fix failed:', error"
        },
        {
          "line": 318,
          "content": "logger.error('❌ Auto test fix failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Auto test fix failed:', error"
        }
      ]
    },
    "./backend/domain/steps/categories/testing/run_unit_tests.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 39,
          "content": "logger.info(`🧪 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🧪 Executing ${this.name}...`"
        },
        {
          "line": 53,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 65,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 65,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 65,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 65,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/steps/categories/analysis/check_container_status.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 70,
          "content": "logger.info(`✅ Container status check completed. Health: ${results.data.health.status}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Container status check completed. Health: ${results.data.health.status}`"
        },
        {
          "line": 74,
          "content": "logger.error('❌ Container status check failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Container status check failed:', error.message"
        },
        {
          "line": 74,
          "content": "logger.error('❌ Container status check failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Container status check failed:', error"
        },
        {
          "line": 74,
          "content": "logger.error('❌ Container status check failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Container status check failed:', error"
        }
      ]
    },
    "./backend/domain/steps/categories/analysis/analysis_step.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 5,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 54,
          "content": "logger.info(`🔍 Executing ${this.name}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Executing ${this.name}...`"
        },
        {
          "line": 206,
          "content": "logger.info(`✅ Analysis results saved to repository with ID: ${analysisResult.id}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Analysis results saved to repository with ID: ${analysisResult.id}`"
        },
        {
          "line": 219,
          "content": "logger.warn(`⚠️ Analysis output generation failed: ${outputError.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ Analysis output generation failed: ${outputError.message}`"
        },
        {
          "line": 224,
          "content": "logger.info(`✅ ${this.name} completed successfully`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${this.name} completed successfully`"
        },
        {
          "line": 236,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error.message"
        },
        {
          "line": 236,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        },
        {
          "line": 236,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ ${this.name} failed:`"
        },
        {
          "line": 236,
          "content": "logger.error(`❌ ${this.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ ${this.name} failed:`, error"
        }
      ]
    },
    "./backend/domain/steps/categories/refactoring/refactor_step.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "template_data": 2,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 38,
          "content": "logger.info(`🔍 [RefactoringStep] Analysis result:`, {",
          "type": "direct_data",
          "match": "logger.info(`🔍 [RefactoringStep] Analysis result:`, {"
        },
        {
          "line": 51,
          "content": "logger.info(`🔍 [RefactoringStep] Task context:`, {",
          "type": "direct_data",
          "match": "logger.info(`🔍 [RefactoringStep] Task context:`, {"
        },
        {
          "line": 65,
          "content": "logger.info(`📊 Analysis found ${largeFiles.length} large files`);",
          "type": "template_data",
          "match": "logger.info(`📊 Analysis found ${largeFiles.length} large files`"
        },
        {
          "line": 66,
          "content": "logger.info(`🔧 Generated ${taskCount} refactoring tasks`);",
          "type": "template_data",
          "match": "logger.info(`🔧 Generated ${taskCount} refactoring tasks`"
        },
        {
          "line": 83,
          "content": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error"
        },
        {
          "line": 83,
          "content": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error"
        },
        {
          "line": 83,
          "content": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [RefactoringStep] Refactoring orchestration failed:', error"
        }
      ]
    },
    "./backend/domain/steps/categories/refactoring/refactor_analyze.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.info(`✅ [RefactorAnalyze] Analysis completed. Found ${largeFiles.length} large files`);",
          "type": "template_data",
          "match": "logger.info(`✅ [RefactorAnalyze] Analysis completed. Found ${largeFiles.length} large files`"
        },
        {
          "line": 91,
          "content": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error"
        },
        {
          "line": 91,
          "content": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error"
        },
        {
          "line": 91,
          "content": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [RefactorAnalyze] Analysis failed:', error"
        }
      ]
    },
    "./backend/domain/steps/categories/refactoring/refactor_generate_task.js": {
      "totalFindings": 35,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "template_data": 8,
        "error_object": 5,
        "task_data": 2
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`, largeFiles.slice(0, 3)); // Debug first 3 files",
          "type": "direct_data",
          "match": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`, largeFiles.slice(0, 3"
        },
        {
          "line": 33,
          "content": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`, largeFiles.slice(0, 3)); // Debug first 3 files",
          "type": "variable_data",
          "match": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`, largeFiles"
        },
        {
          "line": 33,
          "content": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`, largeFiles.slice(0, 3)); // Debug first 3 files",
          "type": "template_data",
          "match": "logger.info(`🔍 [RefactorGenerateTask] Received ${largeFiles.length} large files:`"
        },
        {
          "line": 45,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error.message"
        },
        {
          "line": 45,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error"
        },
        {
          "line": 45,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`"
        },
        {
          "line": 45,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to create task for ${fileInfo.path}:`, error"
        },
        {
          "line": 49,
          "content": "logger.info(`✅ [RefactorGenerateTask] Successfully created ${createdTasks.length} refactoring tasks`);",
          "type": "template_data",
          "match": "logger.info(`✅ [RefactorGenerateTask] Successfully created ${createdTasks.length} refactoring tasks`"
        },
        {
          "line": 63,
          "content": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error"
        },
        {
          "line": 63,
          "content": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error"
        },
        {
          "line": 63,
          "content": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [RefactorGenerateTask] Task generation failed:', error"
        },
        {
          "line": 76,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error.message"
        },
        {
          "line": 76,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error"
        },
        {
          "line": 76,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error.message);",
          "type": "error_object",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Error checking existing tasks:', error"
        },
        {
          "line": 85,
          "content": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping...`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping...`"
        },
        {
          "line": 85,
          "content": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping...`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping"
        },
        {
          "line": 85,
          "content": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping...`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ [RefactorGenerateTask] Task already exists for ${fileInfo.path}, skipping...`"
        },
        {
          "line": 96,
          "content": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "direct_data",
          "match": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`"
        },
        {
          "line": 96,
          "content": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "variable_data",
          "match": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping"
        },
        {
          "line": 96,
          "content": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [RefactorGenerateTask] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`"
        },
        {
          "line": 146,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error.message"
        },
        {
          "line": 146,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error"
        },
        {
          "line": 146,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error.message);",
          "type": "error_object",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] Failed to get projectId from ProjectMappingService:', error"
        },
        {
          "line": 169,
          "content": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task.projectId);",
          "type": "direct_data",
          "match": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task.projectId"
        },
        {
          "line": 169,
          "content": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task.projectId);",
          "type": "variable_data",
          "match": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task"
        },
        {
          "line": 169,
          "content": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task.projectId);",
          "type": "task_data",
          "match": "logger.info('🔍 [RefactorGenerateTask] Task created with projectId:', task"
        },
        {
          "line": 175,
          "content": "logger.info(`✅ [RefactorGenerateTask] Task saved to repository: ${taskId}`);",
          "type": "template_data",
          "match": "logger.info(`✅ [RefactorGenerateTask] Task saved to repository: ${taskId}`"
        },
        {
          "line": 177,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task created in memory only');",
          "type": "direct_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task created in memory only'"
        },
        {
          "line": 177,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task created in memory only');",
          "type": "variable_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task"
        },
        {
          "line": 177,
          "content": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task created in memory only');",
          "type": "task_data",
          "match": "logger.warn('⚠️ [RefactorGenerateTask] taskRepository.create not available, task"
        },
        {
          "line": 180,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error.message"
        },
        {
          "line": 180,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error"
        },
        {
          "line": 180,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`"
        },
        {
          "line": 180,
          "content": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [RefactorGenerateTask] Failed to save task ${taskId}:`, error"
        },
        {
          "line": 183,
          "content": "logger.info(`✅ [RefactorGenerateTask] Created refactoring task for ${fileInfo.path} (${fileInfo.lines} lines)`);",
          "type": "template_data",
          "match": "logger.info(`✅ [RefactorGenerateTask] Created refactoring task for ${fileInfo.path} (${fileInfo.lines} lines)`"
        }
      ]
    },
    "./backend/application/commands/categories/ide/ExecuteIDEActionCommand.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 90,
          "content": "this.logger.error('Validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 90,
          "content": "this.logger.error('Validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 90,
          "content": "this.logger.error('Validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 105,
          "content": "this.logger.info('Executing command', {",
          "type": "direct_data",
          "match": "logger.info('Executing command', {"
        },
        {
          "line": 163,
          "content": "this.logger.info('Command executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command executed successfully', {"
        },
        {
          "line": 171,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 171,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 171,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command execution failed:', error"
        }
      ]
    },
    "./backend/application/commands/categories/ide/SwitchIDEPortCommand.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 73,
          "content": "this.logger.error('Validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 73,
          "content": "this.logger.error('Validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 73,
          "content": "this.logger.error('Validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 88,
          "content": "this.logger.info('Executing command', {",
          "type": "direct_data",
          "match": "logger.info('Executing command', {"
        },
        {
          "line": 138,
          "content": "this.logger.info('Command executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command executed successfully', {"
        },
        {
          "line": 146,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 146,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 146,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command execution failed:', error"
        }
      ]
    },
    "./backend/application/commands/categories/ide/GetIDESelectorsCommand.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 86,
          "content": "this.logger.info('Executing command', {",
          "type": "direct_data",
          "match": "logger.info('Executing command', {"
        },
        {
          "line": 140,
          "content": "this.logger.info('Command executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command executed successfully', {"
        },
        {
          "line": 148,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 148,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 148,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command execution failed:', error"
        }
      ]
    },
    "./backend/application/commands/categories/ide/OpenFileExplorerCommand.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 86,
          "content": "this.logger.info('Executing command', {",
          "type": "direct_data",
          "match": "logger.info('Executing command', {"
        },
        {
          "line": 136,
          "content": "this.logger.info('Command executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command executed successfully', {"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command execution failed:', error"
        }
      ]
    },
    "./backend/application/commands/categories/ide/OpenCommandPaletteCommand.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 71,
          "content": "this.logger.error('Validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Validation error:', error"
        },
        {
          "line": 86,
          "content": "this.logger.info('Executing command', {",
          "type": "direct_data",
          "match": "logger.info('Executing command', {"
        },
        {
          "line": 136,
          "content": "this.logger.info('Command executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command executed successfully', {"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command execution failed:', error"
        },
        {
          "line": 144,
          "content": "this.logger.error('Command execution failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command execution failed:', error"
        }
      ]
    },
    "./backend/application/handlers/workflow/HandlerAudit.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 6,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 86,
          "content": "logger.error('HandlerAudit: Failed to audit handler execution', {",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Failed to audit handler execution', {"
        },
        {
          "line": 129,
          "content": "logger.error('HandlerAudit: Failed to audit handler registration', {",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Failed to audit handler registration', {"
        },
        {
          "line": 182,
          "content": "logger.error('HandlerAudit: Failed to audit handler failure', {",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Failed to audit handler failure', {"
        },
        {
          "line": 222,
          "content": "logger.error('HandlerAudit: Failed to audit security event', {",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Failed to audit security event', {"
        },
        {
          "line": 433,
          "content": "logger.error('HandlerAudit: Security event check failed', error.message);",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Security event check failed', error.message"
        },
        {
          "line": 433,
          "content": "logger.error('HandlerAudit: Security event check failed', error.message);",
          "type": "variable_data",
          "match": "logger.error('HandlerAudit: Security event check failed', error"
        },
        {
          "line": 433,
          "content": "logger.error('HandlerAudit: Security event check failed', error.message);",
          "type": "error_object",
          "match": "logger.error('HandlerAudit: Security event check failed', error"
        },
        {
          "line": 459,
          "content": "logger.error('HandlerAudit: Compliance violation check failed', error.message);",
          "type": "direct_data",
          "match": "logger.error('HandlerAudit: Compliance violation check failed', error.message"
        },
        {
          "line": 459,
          "content": "logger.error('HandlerAudit: Compliance violation check failed', error.message);",
          "type": "variable_data",
          "match": "logger.error('HandlerAudit: Compliance violation check failed', error"
        },
        {
          "line": 459,
          "content": "logger.error('HandlerAudit: Compliance violation check failed', error.message);",
          "type": "error_object",
          "match": "logger.error('HandlerAudit: Compliance violation check failed', error"
        }
      ]
    },
    "./backend/application/handlers/workflow/HandlerRegistry.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 84,
          "content": "logger.error('Handler-Registrierung fehlgeschlagen:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Handler-Registrierung fehlgeschlagen:', error.message"
        },
        {
          "line": 84,
          "content": "logger.error('Handler-Registrierung fehlgeschlagen:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Handler-Registrierung fehlgeschlagen:', error"
        },
        {
          "line": 84,
          "content": "logger.error('Handler-Registrierung fehlgeschlagen:', error.message);",
          "type": "error_object",
          "match": "logger.error('Handler-Registrierung fehlgeschlagen:', error"
        },
        {
          "line": 399,
          "content": "logger.error('Registry-Zustand import fehlgeschlagen:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Registry-Zustand import fehlgeschlagen:', error.message"
        },
        {
          "line": 399,
          "content": "logger.error('Registry-Zustand import fehlgeschlagen:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Registry-Zustand import fehlgeschlagen:', error"
        },
        {
          "line": 399,
          "content": "logger.error('Registry-Zustand import fehlgeschlagen:', error.message);",
          "type": "error_object",
          "match": "logger.error('Registry-Zustand import fehlgeschlagen:', error"
        }
      ]
    },
    "./backend/application/handlers/workflow/adapters/CommandHandlerAdapter.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "template_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 147,
          "content": "logger.warn(`Failed to load command class ${commandType}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to load command class ${commandType}:`, error.message"
        },
        {
          "line": 147,
          "content": "logger.warn(`Failed to load command class ${commandType}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to load command class ${commandType}:`, error"
        },
        {
          "line": 147,
          "content": "logger.warn(`Failed to load command class ${commandType}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Failed to load command class ${commandType}:`"
        },
        {
          "line": 147,
          "content": "logger.warn(`Failed to load command class ${commandType}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to load command class ${commandType}:`, error"
        }
      ]
    },
    "./backend/application/handlers/workflow/adapters/ServiceHandlerAdapter.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "template_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 190,
          "content": "logger.warn(`Failed to create service instance ${serviceName}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Failed to create service instance ${serviceName}:`, error.message"
        },
        {
          "line": 190,
          "content": "logger.warn(`Failed to create service instance ${serviceName}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Failed to create service instance ${serviceName}:`, error"
        },
        {
          "line": 190,
          "content": "logger.warn(`Failed to create service instance ${serviceName}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Failed to create service instance ${serviceName}:`"
        },
        {
          "line": 190,
          "content": "logger.warn(`Failed to create service instance ${serviceName}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Failed to create service instance ${serviceName}:`, error"
        }
      ]
    },
    "./backend/application/handlers/workflow/HandlerMetrics.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 84,
          "content": "logger.error('HandlerMetrics: Failed to record handler execution', {",
          "type": "direct_data",
          "match": "logger.error('HandlerMetrics: Failed to record handler execution', {"
        },
        {
          "line": 131,
          "content": "logger.error('HandlerMetrics: Failed to record handler failure', {",
          "type": "direct_data",
          "match": "logger.error('HandlerMetrics: Failed to record handler failure', {"
        },
        {
          "line": 448,
          "content": "logger.error('HandlerMetrics: Aggregation failed', error.message);",
          "type": "direct_data",
          "match": "logger.error('HandlerMetrics: Aggregation failed', error.message"
        },
        {
          "line": 448,
          "content": "logger.error('HandlerMetrics: Aggregation failed', error.message);",
          "type": "variable_data",
          "match": "logger.error('HandlerMetrics: Aggregation failed', error"
        },
        {
          "line": 448,
          "content": "logger.error('HandlerMetrics: Aggregation failed', error.message);",
          "type": "error_object",
          "match": "logger.error('HandlerMetrics: Aggregation failed', error"
        },
        {
          "line": 526,
          "content": "logger.error('HandlerMetrics: Import failed', error.message);",
          "type": "direct_data",
          "match": "logger.error('HandlerMetrics: Import failed', error.message"
        },
        {
          "line": 526,
          "content": "logger.error('HandlerMetrics: Import failed', error.message);",
          "type": "variable_data",
          "match": "logger.error('HandlerMetrics: Import failed', error"
        },
        {
          "line": 526,
          "content": "logger.error('HandlerMetrics: Import failed', error.message);",
          "type": "error_object",
          "match": "logger.error('HandlerMetrics: Import failed', error"
        }
      ]
    },
    "./backend/application/handlers/workflow/HandlerOptimizer.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 3,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 122,
          "content": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error.message"
        },
        {
          "line": 122,
          "content": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error"
        },
        {
          "line": 122,
          "content": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error.message);",
          "type": "template_data",
          "match": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`"
        },
        {
          "line": 122,
          "content": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error.message);",
          "type": "error_object",
          "match": "logger.error(`HandlerOptimizer: Strategy ${strategyKey} failed`, error"
        },
        {
          "line": 132,
          "content": "logger.error('HandlerOptimizer: Optimization failed', {",
          "type": "direct_data",
          "match": "logger.error('HandlerOptimizer: Optimization failed', {"
        },
        {
          "line": 668,
          "content": "logger.error('HandlerOptimizer: Periodic optimization failed', error.message);",
          "type": "direct_data",
          "match": "logger.error('HandlerOptimizer: Periodic optimization failed', error.message"
        },
        {
          "line": 668,
          "content": "logger.error('HandlerOptimizer: Periodic optimization failed', error.message);",
          "type": "variable_data",
          "match": "logger.error('HandlerOptimizer: Periodic optimization failed', error"
        },
        {
          "line": 668,
          "content": "logger.error('HandlerOptimizer: Periodic optimization failed', error.message);",
          "type": "error_object",
          "match": "logger.error('HandlerOptimizer: Periodic optimization failed', error"
        }
      ]
    },
    "./backend/application/handlers/categories/analysis/AdvancedAnalysisHandler.js": {
      "totalFindings": 20,
      "byType": {
        "direct_data": 14,
        "variable_data": 6
      },
      "findings": [
        {
          "line": 30,
          "content": "this.logger.info('AdvancedAnalysisHandler: Starting advanced analysis', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Starting advanced analysis', {"
        },
        {
          "line": 70,
          "content": "this.logger.info('AdvancedAnalysisHandler: Advanced analysis completed successfully', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Advanced analysis completed successfully', {"
        },
        {
          "line": 89,
          "content": "this.logger.error('AdvancedAnalysisHandler: Advanced analysis failed', {",
          "type": "direct_data",
          "match": "logger.error('AdvancedAnalysisHandler: Advanced analysis failed', {"
        },
        {
          "line": 247,
          "content": "this.logger.info('AdvancedAnalysisHandler: Performing advanced analysis', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Performing advanced analysis', {"
        },
        {
          "line": 291,
          "content": "this.logger.error('AdvancedAnalysisHandler: Advanced analysis failed', {",
          "type": "direct_data",
          "match": "logger.error('AdvancedAnalysisHandler: Advanced analysis failed', {"
        },
        {
          "line": 413,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis data is up-to-date, skipping save', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis data is up-to-date, skipping save', {"
        },
        {
          "line": 413,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis data is up-to-date, skipping save', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis data is up-to-date, skipping"
        },
        {
          "line": 448,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis result saved to repository', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis result saved to repository', {"
        },
        {
          "line": 460,
          "content": "this.logger.error('AdvancedAnalysisHandler: Failed to save analysis result to repository', {",
          "type": "direct_data",
          "match": "logger.error('AdvancedAnalysisHandler: Failed to save analysis result to repository', {"
        },
        {
          "line": 480,
          "content": "this.logger.warn('AdvancedAnalysisHandler: Failed to check existing analysis', {",
          "type": "direct_data",
          "match": "logger.warn('AdvancedAnalysisHandler: Failed to check existing analysis', {"
        },
        {
          "line": 505,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis is recent, checking for data changes', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis is recent, checking for data changes', {"
        },
        {
          "line": 505,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis is recent, checking for data changes', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis is recent, checking"
        },
        {
          "line": 521,
          "content": "this.logger.info('AdvancedAnalysisHandler: Significant score change detected, updating analysis', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Significant score change detected, updating analysis', {"
        },
        {
          "line": 521,
          "content": "this.logger.info('AdvancedAnalysisHandler: Significant score change detected, updating analysis', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: Significant score change detected, updating"
        },
        {
          "line": 536,
          "content": "this.logger.info('AdvancedAnalysisHandler: Violation count changed, updating analysis', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Violation count changed, updating analysis', {"
        },
        {
          "line": 536,
          "content": "this.logger.info('AdvancedAnalysisHandler: Violation count changed, updating analysis', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: Violation count changed, updating"
        },
        {
          "line": 546,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis is older than 24 hours, updating', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis is older than 24 hours, updating', {"
        },
        {
          "line": 546,
          "content": "this.logger.info('AdvancedAnalysisHandler: Analysis is older than 24 hours, updating', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: Analysis is older than 24 hours, updating"
        },
        {
          "line": 552,
          "content": "this.logger.info('AdvancedAnalysisHandler: No significant changes detected, skipping update', {",
          "type": "direct_data",
          "match": "logger.info('AdvancedAnalysisHandler: No significant changes detected, skipping update', {"
        },
        {
          "line": 552,
          "content": "this.logger.info('AdvancedAnalysisHandler: No significant changes detected, skipping update', {",
          "type": "variable_data",
          "match": "logger.info('AdvancedAnalysisHandler: No significant changes detected, skipping"
        }
      ]
    },
    "./backend/application/handlers/categories/refactoring/RestructureArchitectureHandler.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "template_data": 1,
        "error_object": 3
      },
      "findings": [
        {
          "line": 100,
          "content": "this.logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 100,
          "content": "this.logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 100,
          "content": "this.logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Architecture restructuring failed for project ${command.projectPath}:`"
        },
        {
          "line": 100,
          "content": "this.logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Architecture restructuring failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 294,
          "content": "this.logger.warn('Could not analyze dependencies:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Could not analyze dependencies:', error.message"
        },
        {
          "line": 294,
          "content": "this.logger.warn('Could not analyze dependencies:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Could not analyze dependencies:', error"
        },
        {
          "line": 294,
          "content": "this.logger.warn('Could not analyze dependencies:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Could not analyze dependencies:', error"
        },
        {
          "line": 824,
          "content": "this.logger.error('Failed to save architecture restructuring results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save architecture restructuring results:', error"
        },
        {
          "line": 824,
          "content": "this.logger.error('Failed to save architecture restructuring results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save architecture restructuring results:', error"
        },
        {
          "line": 824,
          "content": "this.logger.error('Failed to save architecture restructuring results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save architecture restructuring results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/refactoring/OrganizeModulesHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 86,
          "content": "this.logger.error(`Module organization failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Module organization failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 86,
          "content": "this.logger.error(`Module organization failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Module organization failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 86,
          "content": "this.logger.error(`Module organization failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Module organization failed for project ${command.projectPath}:`"
        },
        {
          "line": 86,
          "content": "this.logger.error(`Module organization failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Module organization failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 763,
          "content": "this.logger.error('Failed to save organization results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save organization results:', error"
        },
        {
          "line": 763,
          "content": "this.logger.error('Failed to save organization results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save organization results:', error"
        },
        {
          "line": 763,
          "content": "this.logger.error('Failed to save organization results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save organization results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/refactoring/CleanDependenciesHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 98,
          "content": "this.logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Dependency cleaning failed for project ${command.projectPath}:`"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Dependency cleaning failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 693,
          "content": "this.logger.error('Failed to save dependency cleaning results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save dependency cleaning results:', error"
        },
        {
          "line": 693,
          "content": "this.logger.error('Failed to save dependency cleaning results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save dependency cleaning results:', error"
        },
        {
          "line": 693,
          "content": "this.logger.error('Failed to save dependency cleaning results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save dependency cleaning results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/refactoring/AutoRefactorHandler.js": {
      "totalFindings": 48,
      "byType": {
        "direct_data": 18,
        "variable_data": 13,
        "template_data": 13,
        "error_object": 4
      },
      "findings": [
        {
          "line": 21,
          "content": "this.logger.info('AutoRefactorHandler: Starting auto refactor', {",
          "type": "direct_data",
          "match": "logger.info('AutoRefactorHandler: Starting auto refactor', {"
        },
        {
          "line": 45,
          "content": "this.logger.info('AutoRefactorHandler: Auto refactor completed', {",
          "type": "direct_data",
          "match": "logger.info('AutoRefactorHandler: Auto refactor completed', {"
        },
        {
          "line": 60,
          "content": "this.logger.error('AutoRefactorHandler: Auto refactor failed', {",
          "type": "direct_data",
          "match": "logger.error('AutoRefactorHandler: Auto refactor failed', {"
        },
        {
          "line": 87,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] Analysis data needs refresh, running fresh analysis...');",
          "type": "direct_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] Analysis data needs refresh, running fresh analysis...'"
        },
        {
          "line": 87,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] Analysis data needs refresh, running fresh analysis...');",
          "type": "variable_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] Analysis data needs refresh, running"
        },
        {
          "line": 129,
          "content": "this.logger.info('⚠️ [AutoRefactorHandler] No analyses found in database, creating standard analysis...');",
          "type": "direct_data",
          "match": "logger.info('⚠️ [AutoRefactorHandler] No analyses found in database, creating standard analysis...'"
        },
        {
          "line": 129,
          "content": "this.logger.info('⚠️ [AutoRefactorHandler] No analyses found in database, creating standard analysis...');",
          "type": "variable_data",
          "match": "logger.info('⚠️ [AutoRefactorHandler] No analyses found in database, creating"
        },
        {
          "line": 143,
          "content": "this.logger.info(`📊 [AutoRefactorHandler] Manually counted lines for ${file.file || file.path}: ${lines}`);",
          "type": "template_data",
          "match": "logger.info(`📊 [AutoRefactorHandler] Manually counted lines for ${file.file || file.path}: ${lines}`"
        },
        {
          "line": 145,
          "content": "this.logger.warn(`⚠️ [AutoRefactorHandler] Could not count lines for ${file.file || file.path}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [AutoRefactorHandler] Could not count lines for ${file.file || file.path}: ${error.message}`"
        },
        {
          "line": 161,
          "content": "this.logger.info(`✅ [AutoRefactorHandler] Found ${validatedLargeFiles.length} valid large files from analysis data`);",
          "type": "template_data",
          "match": "logger.info(`✅ [AutoRefactorHandler] Found ${validatedLargeFiles.length} valid large files from analysis data`"
        },
        {
          "line": 169,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error"
        },
        {
          "line": 169,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error"
        },
        {
          "line": 169,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [AutoRefactorHandler] Error reading analysis from database:', error"
        },
        {
          "line": 182,
          "content": "this.logger.info('🔍 [AutoRefactorHandler] Creating standard analysis for project:', projectId);",
          "type": "direct_data",
          "match": "logger.info('🔍 [AutoRefactorHandler] Creating standard analysis for project:', projectId"
        },
        {
          "line": 182,
          "content": "this.logger.info('🔍 [AutoRefactorHandler] Creating standard analysis for project:', projectId);",
          "type": "variable_data",
          "match": "logger.info('🔍 [AutoRefactorHandler] Creating standard analysis for project:', projectId"
        },
        {
          "line": 251,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error"
        },
        {
          "line": 251,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error"
        },
        {
          "line": 251,
          "content": "this.logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [AutoRefactorHandler] Error creating standard analysis:', error"
        },
        {
          "line": 284,
          "content": "this.logger.info(`📁 [AutoRefactorHandler] Found large files in source:`, source.length, 'files');",
          "type": "direct_data",
          "match": "logger.info(`📁 [AutoRefactorHandler] Found large files in source:`, source.length, 'files'"
        },
        {
          "line": 284,
          "content": "this.logger.info(`📁 [AutoRefactorHandler] Found large files in source:`, source.length, 'files');",
          "type": "variable_data",
          "match": "logger.info(`📁 [AutoRefactorHandler] Found large files in source:`, source"
        },
        {
          "line": 300,
          "content": "this.logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original=${file.lines}`);",
          "type": "direct_data",
          "match": "logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original=${file.lines}`"
        },
        {
          "line": 300,
          "content": "this.logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original=${file.lines}`);",
          "type": "variable_data",
          "match": "logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original"
        },
        {
          "line": 300,
          "content": "this.logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original=${file.lines}`);",
          "type": "template_data",
          "match": "logger.info(`📊 [AutoRefactorHandler] File ${filePath}: lines=${lines}, original=${file.lines}`"
        },
        {
          "line": 318,
          "content": "this.logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`, largeFiles.map(f => `${f.path} (${f.lines} lines)`));",
          "type": "direct_data",
          "match": "logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`, largeFiles.map(f => `${f.path} (${f.lines} lines"
        },
        {
          "line": 318,
          "content": "this.logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`, largeFiles.map(f => `${f.path} (${f.lines} lines)`));",
          "type": "variable_data",
          "match": "logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`, largeFiles"
        },
        {
          "line": 318,
          "content": "this.logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`, largeFiles.map(f => `${f.path} (${f.lines} lines)`));",
          "type": "template_data",
          "match": "logger.info(`🔍 [AutoRefactorHandler] Found ${largeFiles.length} large files to refactor:`"
        },
        {
          "line": 333,
          "content": "this.logger.info(`🔍 [AutoRefactorHandler] Creating refactoring tasks for ${largeFiles.length} files...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 [AutoRefactorHandler] Creating refactoring tasks for ${largeFiles.length} files...`"
        },
        {
          "line": 342,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error.message"
        },
        {
          "line": 342,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error"
        },
        {
          "line": 342,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`"
        },
        {
          "line": 342,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [AutoRefactorHandler] Failed to create task for ${file.path}:`, error"
        },
        {
          "line": 346,
          "content": "this.logger.info(`✅ [AutoRefactorHandler] Successfully created ${tasks.length} refactoring tasks`);",
          "type": "template_data",
          "match": "logger.info(`✅ [AutoRefactorHandler] Successfully created ${tasks.length} refactoring tasks`"
        },
        {
          "line": 368,
          "content": "this.logger.info(`📊 [AutoRefactorHandler] Manually counted lines for ${fileInfo.path}: ${lines}`);",
          "type": "template_data",
          "match": "logger.info(`📊 [AutoRefactorHandler] Manually counted lines for ${fileInfo.path}: ${lines}`"
        },
        {
          "line": 370,
          "content": "this.logger.warn(`⚠️ [AutoRefactorHandler] Could not count lines for ${fileInfo.path}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [AutoRefactorHandler] Could not count lines for ${fileInfo.path}: ${error.message}`"
        },
        {
          "line": 376,
          "content": "this.logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "direct_data",
          "match": "logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`"
        },
        {
          "line": 376,
          "content": "this.logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "variable_data",
          "match": "logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping"
        },
        {
          "line": 376,
          "content": "this.logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [AutoRefactorHandler] Invalid line count for ${fileInfo.path}: ${lines}, skipping...`"
        },
        {
          "line": 421,
          "content": "this.logger.info(`✅ [AutoRefactorHandler] Created refactoring task for ${fileInfo.path} (${fileInfo.lines} lines)`);",
          "type": "template_data",
          "match": "logger.info(`✅ [AutoRefactorHandler] Created refactoring task for ${fileInfo.path} (${fileInfo.lines} lines)`"
        },
        {
          "line": 510,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] No analysis found, refresh needed');",
          "type": "direct_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] No analysis found, refresh needed'"
        },
        {
          "line": 510,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] No analysis found, refresh needed');",
          "type": "variable_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] No analysis found, refresh"
        },
        {
          "line": 519,
          "content": "this.logger.info(`🔄 [AutoRefactorHandler] Analysis data is ${Math.round(analysisAge / 60000)} minutes old, refresh needed`);",
          "type": "template_data",
          "match": "logger.info(`🔄 [AutoRefactorHandler] Analysis data is ${Math.round(analysisAge / 60000)} minutes old, refresh needed`"
        },
        {
          "line": 536,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] Analysis data has invalid line counts, refresh needed');",
          "type": "direct_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] Analysis data has invalid line counts, refresh needed'"
        },
        {
          "line": 536,
          "content": "this.logger.info('🔄 [AutoRefactorHandler] Analysis data has invalid line counts, refresh needed');",
          "type": "variable_data",
          "match": "logger.info('🔄 [AutoRefactorHandler] Analysis data has invalid line counts, refresh"
        },
        {
          "line": 545,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error.message"
        },
        {
          "line": 545,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error"
        },
        {
          "line": 545,
          "content": "this.logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [AutoRefactorHandler] Error checking analysis refresh need:`, error"
        },
        {
          "line": 652,
          "content": "this.logger.warn('AutoRefactorHandler: Failed to analyze dependencies', {",
          "type": "direct_data",
          "match": "logger.warn('AutoRefactorHandler: Failed to analyze dependencies', {"
        },
        {
          "line": 684,
          "content": "this.logger.warn('AutoRefactorHandler: Failed to analyze architecture', {",
          "type": "direct_data",
          "match": "logger.warn('AutoRefactorHandler: Failed to analyze architecture', {"
        }
      ]
    },
    "./backend/application/handlers/categories/refactoring/SplitLargeFilesHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 7
      },
      "findings": [
        {
          "line": 33,
          "content": "this.logger.info('Starting file splitting operation', {",
          "type": "direct_data",
          "match": "logger.info('Starting file splitting operation', {"
        },
        {
          "line": 69,
          "content": "this.logger.info('File splitting completed successfully', {",
          "type": "direct_data",
          "match": "logger.info('File splitting completed successfully', {"
        },
        {
          "line": 79,
          "content": "this.logger.error('File splitting failed', {",
          "type": "direct_data",
          "match": "logger.error('File splitting failed', {"
        },
        {
          "line": 103,
          "content": "this.logger.info('Executing file splitting', {",
          "type": "direct_data",
          "match": "logger.info('Executing file splitting', {"
        },
        {
          "line": 169,
          "content": "this.logger.info('Analysis result saved', {",
          "type": "direct_data",
          "match": "logger.info('Analysis result saved', {"
        },
        {
          "line": 231,
          "content": "this.logger.error('Error finding large files', {",
          "type": "direct_data",
          "match": "logger.error('Error finding large files', {"
        },
        {
          "line": 280,
          "content": "this.logger.error('Error splitting file', {",
          "type": "direct_data",
          "match": "logger.error('Error splitting file', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/OpenCommandPaletteHandler.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 85,
          "content": "this.logger.info('Handling command', {",
          "type": "direct_data",
          "match": "logger.info('Handling command', {"
        },
        {
          "line": 144,
          "content": "this.logger.info('Command handled successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command handled successfully', {"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command handling failed:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/CloseChatHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 58,
          "content": "this.logger.info('Closing chat session', {",
          "type": "direct_data",
          "match": "logger.info('Closing chat session', {"
        },
        {
          "line": 87,
          "content": "this.logger.info('Chat session closed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Chat session closed successfully', {"
        },
        {
          "line": 100,
          "content": "this.logger.error('Failed to close chat session', {",
          "type": "direct_data",
          "match": "logger.error('Failed to close chat session', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/OpenTerminalHandler.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 61,
          "content": "this.logger.info(`Terminal opened successfully: ${result.success}`);",
          "type": "template_data",
          "match": "logger.info(`Terminal opened successfully: ${result.success}`"
        },
        {
          "line": 71,
          "content": "this.logger.error(`Failed to open terminal:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to open terminal:`, error"
        },
        {
          "line": 71,
          "content": "this.logger.error(`Failed to open terminal:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to open terminal:`, error"
        },
        {
          "line": 71,
          "content": "this.logger.error(`Failed to open terminal:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to open terminal:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/ListChatsHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 58,
          "content": "this.logger.info('Listing chat sessions', {",
          "type": "direct_data",
          "match": "logger.info('Listing chat sessions', {"
        },
        {
          "line": 91,
          "content": "this.logger.info('Chat sessions listed successfully', {",
          "type": "direct_data",
          "match": "logger.info('Chat sessions listed successfully', {"
        },
        {
          "line": 118,
          "content": "this.logger.error('Failed to list chat sessions', {",
          "type": "direct_data",
          "match": "logger.error('Failed to list chat sessions', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/CreateChatHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 60,
          "content": "this.logger.info('Creating chat session', {",
          "type": "direct_data",
          "match": "logger.info('Creating chat session', {"
        },
        {
          "line": 104,
          "content": "this.logger.info('Chat session created successfully', {",
          "type": "direct_data",
          "match": "logger.info('Chat session created successfully', {"
        },
        {
          "line": 124,
          "content": "this.logger.error('Failed to create chat session', {",
          "type": "direct_data",
          "match": "logger.error('Failed to create chat session', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/AnalyzeAgainHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 73,
          "content": "this.logger.error(`Failed to re-analyze project:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to re-analyze project:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to re-analyze project:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to re-analyze project:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to re-analyze project:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to re-analyze project:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/SwitchChatHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 58,
          "content": "this.logger.info('Switching chat session', {",
          "type": "direct_data",
          "match": "logger.info('Switching chat session', {"
        },
        {
          "line": 88,
          "content": "this.logger.info('Chat session switched successfully', {",
          "type": "direct_data",
          "match": "logger.info('Chat session switched successfully', {"
        },
        {
          "line": 108,
          "content": "this.logger.error('Failed to switch chat session', {",
          "type": "direct_data",
          "match": "logger.error('Failed to switch chat session', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/ExecuteTerminalHandler.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 65,
          "content": "this.logger.info(`Terminal command executed successfully: ${command.command}`);",
          "type": "template_data",
          "match": "logger.info(`Terminal command executed successfully: ${command.command}`"
        },
        {
          "line": 75,
          "content": "this.logger.error(`Failed to execute terminal command:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to execute terminal command:`, error"
        },
        {
          "line": 75,
          "content": "this.logger.error(`Failed to execute terminal command:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to execute terminal command:`, error"
        },
        {
          "line": 75,
          "content": "this.logger.error(`Failed to execute terminal command:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to execute terminal command:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/GetWorkspaceInfoHandler.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to get workspace info:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get workspace info:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to get workspace info:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get workspace info:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to get workspace info:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get workspace info:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/GetChatHistoryHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 58,
          "content": "this.logger.info('Retrieving chat history', {",
          "type": "direct_data",
          "match": "logger.info('Retrieving chat history', {"
        },
        {
          "line": 94,
          "content": "this.logger.info('Chat history retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.info('Chat history retrieved successfully', {"
        },
        {
          "line": 121,
          "content": "this.logger.error('Failed to retrieve chat history', {",
          "type": "direct_data",
          "match": "logger.error('Failed to retrieve chat history', {"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/ExecuteIDEActionHandler.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 85,
          "content": "this.logger.info('Handling command', {",
          "type": "direct_data",
          "match": "logger.info('Handling command', {"
        },
        {
          "line": 156,
          "content": "this.logger.info('Command handled successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command handled successfully', {"
        },
        {
          "line": 165,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 165,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 165,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command handling failed:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/SwitchIDEPortHandler.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 85,
          "content": "this.logger.info('Handling command', {",
          "type": "direct_data",
          "match": "logger.info('Handling command', {"
        },
        {
          "line": 142,
          "content": "this.logger.info('Command handled successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command handled successfully', {"
        },
        {
          "line": 151,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 151,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 151,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command handling failed:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/AnalyzeProjectHandler.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 74,
          "content": "this.logger.error(`Failed to analyze project:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to analyze project:`, error"
        },
        {
          "line": 74,
          "content": "this.logger.error(`Failed to analyze project:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to analyze project:`, error"
        },
        {
          "line": 74,
          "content": "this.logger.error(`Failed to analyze project:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to analyze project:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/MonitorTerminalOutputHandler.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 72,
          "content": "this.logger.error(`Failed to monitor terminal output:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to monitor terminal output:`, error"
        },
        {
          "line": 72,
          "content": "this.logger.error(`Failed to monitor terminal output:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to monitor terminal output:`, error"
        },
        {
          "line": 72,
          "content": "this.logger.error(`Failed to monitor terminal output:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to monitor terminal output:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/GetIDESelectorsHandler.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 85,
          "content": "this.logger.info('Handling command', {",
          "type": "direct_data",
          "match": "logger.info('Handling command', {"
        },
        {
          "line": 149,
          "content": "this.logger.info('Command handled successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command handled successfully', {"
        },
        {
          "line": 158,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 158,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 158,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command handling failed:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/DetectPackageJsonHandler.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to detect package.json:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to detect package.json:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to detect package.json:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to detect package.json:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to detect package.json:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to detect package.json:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/TerminalLogCaptureHandler.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 63,
          "content": "this.logger.info(`Terminal logs captured successfully: ${result.count} entries`);",
          "type": "template_data",
          "match": "logger.info(`Terminal logs captured successfully: ${result.count} entries`"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to capture terminal logs:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to capture terminal logs:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to capture terminal logs:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to capture terminal logs:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to capture terminal logs:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to capture terminal logs:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/RestartUserAppHandler.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info(`Handling command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Handling command: ${command.commandId}`"
        },
        {
          "line": 63,
          "content": "this.logger.info(`User app restarted successfully: ${command.appName || 'default'}`);",
          "type": "template_data",
          "match": "logger.info(`User app restarted successfully: ${command.appName || 'default'}`"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to restart user app:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to restart user app:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to restart user app:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to restart user app:`, error"
        },
        {
          "line": 73,
          "content": "this.logger.error(`Failed to restart user app:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to restart user app:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/ide/OpenFileExplorerHandler.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 63,
          "content": "this.logger.error('Command validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Command validation error:', error"
        },
        {
          "line": 85,
          "content": "this.logger.info('Handling command', {",
          "type": "direct_data",
          "match": "logger.info('Handling command', {"
        },
        {
          "line": 144,
          "content": "this.logger.info('Command handled successfully', {",
          "type": "direct_data",
          "match": "logger.info('Command handled successfully', {"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Command handling failed:', error"
        },
        {
          "line": 153,
          "content": "this.logger.error('Command handling failed:', error);",
          "type": "error_object",
          "match": "logger.error('Command handling failed:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/PortStreamingHandler.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 25,
          "content": "logger.info(`Processing command: ${command.commandId} for port ${command.port}`);",
          "type": "template_data",
          "match": "logger.info(`Processing command: ${command.commandId} for port ${command.port}`"
        },
        {
          "line": 65,
          "content": "logger.info(`Successfully executed ${command.action} for port ${command.port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully executed ${command.action} for port ${command.port}`"
        },
        {
          "line": 77,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error.message"
        },
        {
          "line": 77,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        },
        {
          "line": 77,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`"
        },
        {
          "line": 77,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/StartStreamingHandler.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "logger.info(`Processing command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Processing command: ${command.commandId}`"
        },
        {
          "line": 53,
          "content": "logger.info(`Successfully started streaming for session ${command.sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully started streaming for session ${command.sessionId}`"
        },
        {
          "line": 64,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error.message"
        },
        {
          "line": 64,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        },
        {
          "line": 64,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`"
        },
        {
          "line": 64,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/StopStreamingHandler.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 3,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "logger.info(`Processing command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Processing command: ${command.commandId}`"
        },
        {
          "line": 51,
          "content": "logger.info(`Successfully stopped streaming for session ${command.sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully stopped streaming for session ${command.sessionId}`"
        },
        {
          "line": 62,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error.message"
        },
        {
          "line": 62,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        },
        {
          "line": 62,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error handling command ${command.commandId}:`"
        },
        {
          "line": 62,
          "content": "logger.error(`Error handling command ${command.commandId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error handling command ${command.commandId}:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/GetChatHistoryHandler.js": {
      "totalFindings": 28,
      "byType": {
        "template_data": 11,
        "direct_data": 7,
        "variable_data": 7,
        "ide_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 84,
          "content": "logger.info(`getMessagesByPort called with port: ${port}`);",
          "type": "template_data",
          "match": "logger.info(`getMessagesByPort called with port: ${port}`"
        },
        {
          "line": 89,
          "content": "logger.info(`Found ${filteredMessages.length} messages for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${filteredMessages.length} messages for port ${port}`"
        },
        {
          "line": 151,
          "content": "logger.info(`getPortChatHistory called with port: ${port}`);",
          "type": "template_data",
          "match": "logger.info(`getPortChatHistory called with port: ${port}`"
        },
        {
          "line": 161,
          "content": "logger.info(`Extracting live chat from IDE on port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Extracting live chat from IDE on port ${port}...`"
        },
        {
          "line": 162,
          "content": "logger.info(`IDE Service type:`, ideService.constructor.name);",
          "type": "direct_data",
          "match": "logger.info(`IDE Service type:`, ideService.constructor.name"
        },
        {
          "line": 162,
          "content": "logger.info(`IDE Service type:`, ideService.constructor.name);",
          "type": "variable_data",
          "match": "logger.info(`IDE Service type:`, ideService"
        },
        {
          "line": 162,
          "content": "logger.info(`IDE Service type:`, ideService.constructor.name);",
          "type": "ide_data",
          "match": "logger.info(`IDE Service type:`, ide"
        },
        {
          "line": 163,
          "content": "logger.info(`IDE Service methods:`, Object.getOwnPropertyNames(Object.getPrototypeOf(ideService)));",
          "type": "direct_data",
          "match": "logger.info(`IDE Service methods:`, Object.getOwnPropertyNames(Object.getPrototypeOf(ideService"
        },
        {
          "line": 163,
          "content": "logger.info(`IDE Service methods:`, Object.getOwnPropertyNames(Object.getPrototypeOf(ideService)));",
          "type": "variable_data",
          "match": "logger.info(`IDE Service methods:`, Object"
        },
        {
          "line": 166,
          "content": "//logger.info(`Extracted ${liveMessages.length} live messages:`, liveMessages);",
          "type": "direct_data",
          "match": "logger.info(`Extracted ${liveMessages.length} live messages:`, liveMessages"
        },
        {
          "line": 166,
          "content": "//logger.info(`Extracted ${liveMessages.length} live messages:`, liveMessages);",
          "type": "variable_data",
          "match": "logger.info(`Extracted ${liveMessages.length} live messages:`, liveMessages"
        },
        {
          "line": 166,
          "content": "//logger.info(`Extracted ${liveMessages.length} live messages:`, liveMessages);",
          "type": "template_data",
          "match": "logger.info(`Extracted ${liveMessages.length} live messages:`"
        },
        {
          "line": 168,
          "content": "logger.info(`No IDE service found for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`No IDE service found for port ${port}`"
        },
        {
          "line": 171,
          "content": "logger.info(`Failed to extract live chat: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`Failed to extract live chat: ${error.message}`"
        },
        {
          "line": 172,
          "content": "logger.error(`Full error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Full error:`, error"
        },
        {
          "line": 172,
          "content": "logger.error(`Full error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Full error:`, error"
        },
        {
          "line": 172,
          "content": "logger.error(`Full error:`, error);",
          "type": "error_object",
          "match": "logger.error(`Full error:`, error"
        },
        {
          "line": 215,
          "content": "logger.info(`Available IDEs:`, availableIDEs);",
          "type": "direct_data",
          "match": "logger.info(`Available IDEs:`, availableIDEs"
        },
        {
          "line": 215,
          "content": "logger.info(`Available IDEs:`, availableIDEs);",
          "type": "variable_data",
          "match": "logger.info(`Available IDEs:`, availableIDEs"
        },
        {
          "line": 222,
          "content": "logger.info(`No IDE found for port ${port} in available IDEs:`, availableIDEs);",
          "type": "direct_data",
          "match": "logger.info(`No IDE found for port ${port} in available IDEs:`, availableIDEs"
        },
        {
          "line": 222,
          "content": "logger.info(`No IDE found for port ${port} in available IDEs:`, availableIDEs);",
          "type": "variable_data",
          "match": "logger.info(`No IDE found for port ${port} in available IDEs:`, availableIDEs"
        },
        {
          "line": 222,
          "content": "logger.info(`No IDE found for port ${port} in available IDEs:`, availableIDEs);",
          "type": "template_data",
          "match": "logger.info(`No IDE found for port ${port} in available IDEs:`"
        },
        {
          "line": 224,
          "content": "logger.info(`Using port range fallback for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Using port range fallback for port ${port}`"
        },
        {
          "line": 237,
          "content": "logger.info(`Detected IDE type ${ideType} for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Detected IDE type ${ideType} for port ${port}`"
        },
        {
          "line": 255,
          "content": "logger.error(`Error getting IDE service for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting IDE service for port ${port}:`, error"
        },
        {
          "line": 255,
          "content": "logger.error(`Error getting IDE service for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting IDE service for port ${port}:`, error"
        },
        {
          "line": 255,
          "content": "logger.error(`Error getting IDE service for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting IDE service for port ${port}:`"
        },
        {
          "line": 255,
          "content": "logger.error(`Error getting IDE service for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting IDE service for port ${port}:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/DocsTasksHandler.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 6,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 42,
          "content": "logger.info(`Workspace root: ${workspaceRoot}`);",
          "type": "template_data",
          "match": "logger.info(`Workspace root: ${workspaceRoot}`"
        },
        {
          "line": 44,
          "content": "logger.info(`Features directory resolved: ${featuresDir}`);",
          "type": "template_data",
          "match": "logger.info(`Features directory resolved: ${featuresDir}`"
        },
        {
          "line": 94,
          "content": "logger.info(`Found ${tasks.length} documentation tasks from database`);",
          "type": "template_data",
          "match": "logger.info(`Found ${tasks.length} documentation tasks from database`"
        },
        {
          "line": 102,
          "content": "logger.error('Error getting docs tasks:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting docs tasks:', error"
        },
        {
          "line": 102,
          "content": "logger.error('Error getting docs tasks:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting docs tasks:', error"
        },
        {
          "line": 102,
          "content": "logger.error('Error getting docs tasks:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting docs tasks:', error"
        },
        {
          "line": 161,
          "content": "logger.info(`Successfully retrieved task details for: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully retrieved task details for: ${task.title}`"
        },
        {
          "line": 168,
          "content": "logger.error('Error getting task details:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting task details:', error"
        },
        {
          "line": 168,
          "content": "logger.error('Error getting task details:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting task details:', error"
        },
        {
          "line": 168,
          "content": "logger.error('Error getting task details:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting task details:', error"
        },
        {
          "line": 187,
          "content": "logger.warn(`Path traversal attempt detected: ${filename}`);",
          "type": "template_data",
          "match": "logger.warn(`Path traversal attempt detected: ${filename}`"
        },
        {
          "line": 193,
          "content": "logger.warn(`Invalid filename characters: ${filename}`);",
          "type": "template_data",
          "match": "logger.warn(`Invalid filename characters: ${filename}`"
        },
        {
          "line": 271,
          "content": "logger.error('Error converting markdown to HTML:', error);",
          "type": "direct_data",
          "match": "logger.error('Error converting markdown to HTML:', error"
        },
        {
          "line": 271,
          "content": "logger.error('Error converting markdown to HTML:', error);",
          "type": "variable_data",
          "match": "logger.error('Error converting markdown to HTML:', error"
        },
        {
          "line": 271,
          "content": "logger.error('Error converting markdown to HTML:', error);",
          "type": "error_object",
          "match": "logger.error('Error converting markdown to HTML:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/SendMessageHandler.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 1,
        "direct_data": 5,
        "variable_data": 2,
        "error_object": 2
      },
      "findings": [
        {
          "line": 51,
          "content": "logger.info(`Active port: ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`Active port: ${activePort}`"
        },
        {
          "line": 89,
          "content": "this.logger.info('SendMessageHandler: Sending message', {",
          "type": "direct_data",
          "match": "logger.info('SendMessageHandler: Sending message', {"
        },
        {
          "line": 110,
          "content": "this.logger.info('SendMessageHandler: Message sent', {",
          "type": "direct_data",
          "match": "logger.info('SendMessageHandler: Message sent', {"
        },
        {
          "line": 119,
          "content": "this.logger.error('SendMessageHandler: Message sending failed', {",
          "type": "direct_data",
          "match": "logger.error('SendMessageHandler: Message sending failed', {"
        },
        {
          "line": 243,
          "content": "logger.error('Error:', error);",
          "type": "direct_data",
          "match": "logger.error('Error:', error"
        },
        {
          "line": 243,
          "content": "logger.error('Error:', error);",
          "type": "variable_data",
          "match": "logger.error('Error:', error"
        },
        {
          "line": 243,
          "content": "logger.error('Error:', error);",
          "type": "error_object",
          "match": "logger.error('Error:', error"
        },
        {
          "line": 307,
          "content": "logger.error('Error:', error);",
          "type": "direct_data",
          "match": "logger.error('Error:', error"
        },
        {
          "line": 307,
          "content": "logger.error('Error:', error);",
          "type": "variable_data",
          "match": "logger.error('Error:', error"
        },
        {
          "line": 307,
          "content": "logger.error('Error:', error);",
          "type": "error_object",
          "match": "logger.error('Error:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/management/CreateTaskHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 7
      },
      "findings": [
        {
          "line": 49,
          "content": "this.logger.info('Handling CreateTaskCommand', {",
          "type": "direct_data",
          "match": "logger.info('Handling CreateTaskCommand', {"
        },
        {
          "line": 73,
          "content": "this.logger.warn('Business validation warnings', {",
          "type": "direct_data",
          "match": "logger.warn('Business validation warnings', {"
        },
        {
          "line": 140,
          "content": "this.logger.info('Task created successfully', {",
          "type": "direct_data",
          "match": "logger.info('Task created successfully', {"
        },
        {
          "line": 154,
          "content": "this.logger.error('Failed to handle CreateTaskCommand', {",
          "type": "direct_data",
          "match": "logger.error('Failed to handle CreateTaskCommand', {"
        },
        {
          "line": 193,
          "content": "this.logger.error('Failed to handle CreateTaskCommand with template', {",
          "type": "direct_data",
          "match": "logger.error('Failed to handle CreateTaskCommand with template', {"
        },
        {
          "line": 222,
          "content": "this.logger.error('Failed to handle CreateTaskCommand with suggestion', {",
          "type": "direct_data",
          "match": "logger.error('Failed to handle CreateTaskCommand with suggestion', {"
        },
        {
          "line": 320,
          "content": "this.logger.error('Error checking if handler can process command', {",
          "type": "direct_data",
          "match": "logger.error('Error checking if handler can process command', {"
        }
      ]
    },
    "./backend/application/handlers/categories/management/ProcessTodoListHandler.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 2,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 2
      },
      "findings": [
        {
          "line": 32,
          "content": "this.logger.info(`Processing TODO list command: ${command.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`Processing TODO list command: ${command.commandId}`"
        },
        {
          "line": 102,
          "content": "this.logger.info(`TODO list processing completed: ${session.id}`);",
          "type": "template_data",
          "match": "logger.info(`TODO list processing completed: ${session.id}`"
        },
        {
          "line": 112,
          "content": "this.logger.error(`TODO list processing failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`TODO list processing failed:`, error.message"
        },
        {
          "line": 112,
          "content": "this.logger.error(`TODO list processing failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`TODO list processing failed:`, error"
        },
        {
          "line": 112,
          "content": "this.logger.error(`TODO list processing failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`TODO list processing failed:`, error"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to save error state:`, saveError.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to save error state:`, saveError.message"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to save error state:`, saveError.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to save error state:`, saveError"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Failed to stream progress:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to stream progress:`, error.message"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Failed to stream progress:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to stream progress:`, error"
        },
        {
          "line": 192,
          "content": "this.logger.error(`Failed to stream progress:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to stream progress:`, error"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/GenerateConfigsHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 139,
          "content": "this.logger.error(`Configuration generation failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Configuration generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 139,
          "content": "this.logger.error(`Configuration generation failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Configuration generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 139,
          "content": "this.logger.error(`Configuration generation failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Configuration generation failed for project ${command.projectPath}:`"
        },
        {
          "line": 139,
          "content": "this.logger.error(`Configuration generation failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Configuration generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 1027,
          "content": "this.logger.error('Failed to save configuration generation results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save configuration generation results:', error"
        },
        {
          "line": 1027,
          "content": "this.logger.error('Failed to save configuration generation results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save configuration generation results:', error"
        },
        {
          "line": 1027,
          "content": "this.logger.error('Failed to save configuration generation results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save configuration generation results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/services/ScriptGenerationService.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.info('ScriptGenerationService: Starting script generation', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationService: Starting script generation', {"
        },
        {
          "line": 62,
          "content": "this.logger.error('ScriptGenerationService: Script generation failed', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationService: Script generation failed', {"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/services/TaskManagementService.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 8
      },
      "findings": [
        {
          "line": 42,
          "content": "this.logger.info('TaskManagementService: Created script generation task', {",
          "type": "direct_data",
          "match": "logger.info('TaskManagementService: Created script generation task', {"
        },
        {
          "line": 50,
          "content": "this.logger.error('TaskManagementService: Failed to create script generation task', {",
          "type": "direct_data",
          "match": "logger.error('TaskManagementService: Failed to create script generation task', {"
        },
        {
          "line": 81,
          "content": "this.logger.info('TaskManagementService: Created execution record', {",
          "type": "direct_data",
          "match": "logger.info('TaskManagementService: Created execution record', {"
        },
        {
          "line": 88,
          "content": "this.logger.error('TaskManagementService: Failed to create execution record', {",
          "type": "direct_data",
          "match": "logger.error('TaskManagementService: Failed to create execution record', {"
        },
        {
          "line": 121,
          "content": "this.logger.info('TaskManagementService: Updated execution record', {",
          "type": "direct_data",
          "match": "logger.info('TaskManagementService: Updated execution record', {"
        },
        {
          "line": 127,
          "content": "this.logger.error('TaskManagementService: Failed to update execution record', {",
          "type": "direct_data",
          "match": "logger.error('TaskManagementService: Failed to update execution record', {"
        },
        {
          "line": 155,
          "content": "this.logger.info('TaskManagementService: Updated task status', {",
          "type": "direct_data",
          "match": "logger.info('TaskManagementService: Updated task status', {"
        },
        {
          "line": 161,
          "content": "this.logger.error('TaskManagementService: Failed to update task status', {",
          "type": "direct_data",
          "match": "logger.error('TaskManagementService: Failed to update task status', {"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/services/EventPublishingService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 32,
          "content": "this.logger.warn('EventPublishingService: Failed to publish script generation started event', {",
          "type": "direct_data",
          "match": "logger.warn('EventPublishingService: Failed to publish script generation started event', {"
        },
        {
          "line": 65,
          "content": "this.logger.warn('EventPublishingService: Failed to publish script generation completed event', {",
          "type": "direct_data",
          "match": "logger.warn('EventPublishingService: Failed to publish script generation completed event', {"
        },
        {
          "line": 90,
          "content": "this.logger.warn('EventPublishingService: Failed to publish script generation failed event', {",
          "type": "direct_data",
          "match": "logger.warn('EventPublishingService: Failed to publish script generation failed event', {"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/services/ScriptProcessingService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 63,
          "content": "this.logger.error('ScriptProcessingService: Failed to process script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptProcessingService: Failed to process script', {"
        },
        {
          "line": 229,
          "content": "this.logger.info('ScriptProcessingService: Script saved successfully', {",
          "type": "direct_data",
          "match": "logger.info('ScriptProcessingService: Script saved successfully', {"
        },
        {
          "line": 243,
          "content": "this.logger.error('ScriptProcessingService: Failed to save script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptProcessingService: Failed to save script', {"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/services/ProjectAnalysisService.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 5
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.info('ProjectAnalysisService: Analyzing project for script generation', {",
          "type": "direct_data",
          "match": "logger.info('ProjectAnalysisService: Analyzing project for script generation', {"
        },
        {
          "line": 56,
          "content": "this.logger.error('ProjectAnalysisService: Failed to analyze project for scripts', {",
          "type": "direct_data",
          "match": "logger.error('ProjectAnalysisService: Failed to analyze project for scripts', {"
        },
        {
          "line": 91,
          "content": "this.logger.warn('ProjectAnalysisService: Failed to read package.json', {",
          "type": "direct_data",
          "match": "logger.warn('ProjectAnalysisService: Failed to read package.json', {"
        },
        {
          "line": 156,
          "content": "this.logger.warn('ProjectAnalysisService: Failed to get existing scripts', {",
          "type": "direct_data",
          "match": "logger.warn('ProjectAnalysisService: Failed to get existing scripts', {"
        },
        {
          "line": 204,
          "content": "this.logger.warn('ProjectAnalysisService: Failed to detect build tools', {",
          "type": "direct_data",
          "match": "logger.warn('ProjectAnalysisService: Failed to detect build tools', {"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/GenerateDocumentationHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 115,
          "content": "this.logger.error(`Documentation generation failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Documentation generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 115,
          "content": "this.logger.error(`Documentation generation failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Documentation generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 115,
          "content": "this.logger.error(`Documentation generation failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Documentation generation failed for project ${command.projectPath}:`"
        },
        {
          "line": 115,
          "content": "this.logger.error(`Documentation generation failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Documentation generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 1044,
          "content": "this.logger.error('Failed to save documentation generation results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save documentation generation results:', error"
        },
        {
          "line": 1044,
          "content": "this.logger.error('Failed to save documentation generation results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save documentation generation results:', error"
        },
        {
          "line": 1044,
          "content": "this.logger.error('Failed to save documentation generation results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save documentation generation results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/GenerateTestsHandler.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 98,
          "content": "this.logger.error(`Test generation failed for project ${command.projectPath}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Test generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Test generation failed for project ${command.projectPath}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Test generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Test generation failed for project ${command.projectPath}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Test generation failed for project ${command.projectPath}:`"
        },
        {
          "line": 98,
          "content": "this.logger.error(`Test generation failed for project ${command.projectPath}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Test generation failed for project ${command.projectPath}:`, error"
        },
        {
          "line": 875,
          "content": "this.logger.error('Failed to save test generation results:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to save test generation results:', error"
        },
        {
          "line": 875,
          "content": "this.logger.error('Failed to save test generation results:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to save test generation results:', error"
        },
        {
          "line": 875,
          "content": "this.logger.error('Failed to save test generation results:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to save test generation results:', error"
        }
      ]
    },
    "./backend/application/handlers/categories/generate/GenerateScriptsHandler.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 24
      },
      "findings": [
        {
          "line": 60,
          "content": "this.logger.info('GenerateScriptHandler: Starting script generation', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Starting script generation', {"
        },
        {
          "line": 99,
          "content": "this.logger.info('GenerateScriptHandler: Script generation completed successfully', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Script generation completed successfully', {"
        },
        {
          "line": 196,
          "content": "this.logger.info('GenerateScriptHandler: Analyzing project for script generation', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Analyzing project for script generation', {"
        },
        {
          "line": 228,
          "content": "this.logger.error('GenerateScriptHandler: Failed to analyze project for scripts', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to analyze project for scripts', {"
        },
        {
          "line": 264,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to read package.json', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to read package.json', {"
        },
        {
          "line": 330,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to get existing scripts', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to get existing scripts', {"
        },
        {
          "line": 385,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to detect build tools', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to detect build tools', {"
        },
        {
          "line": 445,
          "content": "this.logger.info('GenerateScriptHandler: Created script generation task', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Created script generation task', {"
        },
        {
          "line": 454,
          "content": "this.logger.error('GenerateScriptHandler: Failed to create script generation task', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to create script generation task', {"
        },
        {
          "line": 485,
          "content": "this.logger.info('GenerateScriptHandler: Created execution record', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Created execution record', {"
        },
        {
          "line": 493,
          "content": "this.logger.error('GenerateScriptHandler: Failed to create execution record', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to create execution record', {"
        },
        {
          "line": 513,
          "content": "this.logger.info('GenerateScriptHandler: Starting script generation', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Starting script generation', {"
        },
        {
          "line": 557,
          "content": "this.logger.error('GenerateScriptHandler: Script generation failed', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Script generation failed', {"
        },
        {
          "line": 631,
          "content": "this.logger.error('GenerateScriptHandler: Failed to process script', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to process script', {"
        },
        {
          "line": 876,
          "content": "this.logger.info('GenerateScriptHandler: Script saved successfully', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Script saved successfully', {"
        },
        {
          "line": 891,
          "content": "this.logger.error('GenerateScriptHandler: Failed to save script', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to save script', {"
        },
        {
          "line": 954,
          "content": "this.logger.info('GenerateScriptHandler: Updated execution record', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Updated execution record', {"
        },
        {
          "line": 961,
          "content": "this.logger.error('GenerateScriptHandler: Failed to update execution record', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to update execution record', {"
        },
        {
          "line": 990,
          "content": "this.logger.info('GenerateScriptHandler: Updated task status', {",
          "type": "direct_data",
          "match": "logger.info('GenerateScriptHandler: Updated task status', {"
        },
        {
          "line": 997,
          "content": "this.logger.error('GenerateScriptHandler: Failed to update task status', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Failed to update task status', {"
        },
        {
          "line": 1024,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to publish script generation started event', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to publish script generation started event', {"
        },
        {
          "line": 1058,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to publish script generation completed event', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to publish script generation completed event', {"
        },
        {
          "line": 1073,
          "content": "this.logger.error('GenerateScriptHandler: Script generation failed', {",
          "type": "direct_data",
          "match": "logger.error('GenerateScriptHandler: Script generation failed', {"
        },
        {
          "line": 1093,
          "content": "this.logger.warn('GenerateScriptHandler: Failed to publish script generation failed event', {",
          "type": "direct_data",
          "match": "logger.warn('GenerateScriptHandler: Failed to publish script generation failed event', {"
        }
      ]
    },
    "./backend/infrastructure/di/ServiceRegistry.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 578,
          "content": "logger.warn('Project context initialization failed:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Project context initialization failed:', error.message"
        },
        {
          "line": 578,
          "content": "logger.warn('Project context initialization failed:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Project context initialization failed:', error"
        },
        {
          "line": 578,
          "content": "logger.warn('Project context initialization failed:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Project context initialization failed:', error"
        },
        {
          "line": 582,
          "content": "logger.info('Registered service categories:', Array.from(this.registeredServices));",
          "type": "direct_data",
          "match": "logger.info('Registered service categories:', Array.from(this.registeredServices"
        },
        {
          "line": 582,
          "content": "logger.info('Registered service categories:', Array.from(this.registeredServices));",
          "type": "variable_data",
          "match": "logger.info('Registered service categories:', Array"
        }
      ]
    },
    "./backend/infrastructure/di/ServiceContainer.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 4,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 2
      },
      "findings": [
        {
          "line": 38,
          "content": "logger.info(`Registered service: ${name} (singleton: ${singleton})`);",
          "type": "template_data",
          "match": "logger.info(`Registered service: ${name} (singleton: ${singleton})`"
        },
        {
          "line": 48,
          "content": "logger.info(`Registered singleton: ${name}`);",
          "type": "template_data",
          "match": "logger.info(`Registered singleton: ${name}`"
        },
        {
          "line": 80,
          "content": "logger.error(`Failed to resolve service '${name}':`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to resolve service '${name}':`, error.message"
        },
        {
          "line": 80,
          "content": "logger.error(`Failed to resolve service '${name}':`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to resolve service '${name}':`, error"
        },
        {
          "line": 80,
          "content": "logger.error(`Failed to resolve service '${name}':`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to resolve service '${name}':`"
        },
        {
          "line": 80,
          "content": "logger.error(`Failed to resolve service '${name}':`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to resolve service '${name}':`, error"
        },
        {
          "line": 87,
          "content": "logger.error(`Service '${name}' not found. Available services: ${availableServices}`);",
          "type": "template_data",
          "match": "logger.error(`Service '${name}' not found. Available services: ${availableServices}`"
        },
        {
          "line": 97,
          "content": "logger.info(`Project context updated:`, this.projectContext);",
          "type": "direct_data",
          "match": "logger.info(`Project context updated:`, this.projectContext"
        },
        {
          "line": 97,
          "content": "logger.info(`Project context updated:`, this.projectContext);",
          "type": "variable_data",
          "match": "logger.info(`Project context updated:`, this"
        },
        {
          "line": 166,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Auto-detect failed:', error.message"
        },
        {
          "line": 166,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Auto-detect failed:', error"
        },
        {
          "line": 166,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Auto-detect failed:', error"
        }
      ]
    },
    "./backend/infrastructure/di/ProjectContextService.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 150,
          "content": "logger.info('🏗️ Detected monorepo, using parent directory:', parentDir);",
          "type": "direct_data",
          "match": "logger.info('🏗️ Detected monorepo, using parent directory:', parentDir"
        },
        {
          "line": 150,
          "content": "logger.info('🏗️ Detected monorepo, using parent directory:', parentDir);",
          "type": "variable_data",
          "match": "logger.info('🏗️ Detected monorepo, using"
        },
        {
          "line": 182,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Auto-detect failed:', error.message"
        },
        {
          "line": 182,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Auto-detect failed:', error"
        },
        {
          "line": 182,
          "content": "logger.error('Auto-detect failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Auto-detect failed:', error"
        }
      ]
    },
    "./backend/infrastructure/di/ApplicationIntegration.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 117,
          "content": "logger.error('Project context validation failed:', validation.errors);",
          "type": "direct_data",
          "match": "logger.error('Project context validation failed:', validation.errors"
        },
        {
          "line": 117,
          "content": "logger.error('Project context validation failed:', validation.errors);",
          "type": "variable_data",
          "match": "logger.error('Project context validation failed:', validation"
        },
        {
          "line": 122,
          "content": "logger.info('Project context:', this.projectContext.getProjectContext());",
          "type": "direct_data",
          "match": "logger.info('Project context:', this.projectContext.getProjectContext("
        },
        {
          "line": 122,
          "content": "logger.info('Project context:', this.projectContext.getProjectContext());",
          "type": "variable_data",
          "match": "logger.info('Project context:', this"
        }
      ]
    },
    "./backend/infrastructure/auto/AutoSecurityManager.js": {
      "totalFindings": 7,
      "byType": {
        "template_data": 7
      },
      "findings": [
        {
          "line": 39,
          "content": "logger.info(`🌍 Detected environment: ${env}`);",
          "type": "template_data",
          "match": "logger.info(`🌍 Detected environment: ${env}`"
        },
        {
          "line": 50,
          "content": "logger.info(`🔑 Loaded existing secret: ${key}`);",
          "type": "template_data",
          "match": "logger.info(`🔑 Loaded existing secret: ${key}`"
        },
        {
          "line": 54,
          "content": "logger.warn(`⚠️ Could not read secret file: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ Could not read secret file: ${error.message}`"
        },
        {
          "line": 68,
          "content": "logger.info(`🔑 [AutoSecurityManager] Generated new secret: ${key}`);",
          "type": "template_data",
          "match": "logger.info(`🔑 [AutoSecurityManager] Generated new secret: ${key}`"
        },
        {
          "line": 70,
          "content": "logger.warn(`⚠️ [AutoSecurityManager] Could not save secret file: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [AutoSecurityManager] Could not save secret file: ${error.message}`"
        },
        {
          "line": 190,
          "content": "logger.info(`🗑️ [AutoSecurityManager] Cleaned up old secret: ${file}`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ [AutoSecurityManager] Cleaned up old secret: ${file}`"
        },
        {
          "line": 194,
          "content": "logger.warn(`⚠️ [AutoSecurityManager] Could not cleanup old secrets: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [AutoSecurityManager] Could not cleanup old secrets: ${error.message}`"
        }
      ]
    },
    "./backend/infrastructure/workflow/WorkflowRepository.js": {
      "totalFindings": 43,
      "byType": {
        "direct_data": 43
      },
      "findings": [
        {
          "line": 22,
          "content": "this.logger.info('WorkflowRepository: Saving workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Saving workflow execution', {"
        },
        {
          "line": 41,
          "content": "this.logger.info('WorkflowRepository: Workflow execution saved successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Workflow execution saved successfully', {"
        },
        {
          "line": 47,
          "content": "this.logger.error('WorkflowRepository: Failed to save workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to save workflow execution', {"
        },
        {
          "line": 63,
          "content": "this.logger.info('WorkflowRepository: Updating workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Updating workflow execution', {"
        },
        {
          "line": 103,
          "content": "this.logger.info('WorkflowRepository: Workflow execution updated successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Workflow execution updated successfully', {"
        },
        {
          "line": 110,
          "content": "this.logger.error('WorkflowRepository: Failed to update workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to update workflow execution', {"
        },
        {
          "line": 133,
          "content": "this.logger.debug('WorkflowRepository: Metric recorded', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Metric recorded', {"
        },
        {
          "line": 141,
          "content": "this.logger.error('WorkflowRepository: Failed to record execution metrics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to record execution metrics', {"
        },
        {
          "line": 157,
          "content": "this.logger.debug('WorkflowRepository: Getting execution with metrics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Getting execution with metrics', {"
        },
        {
          "line": 163,
          "content": "this.logger.warn('WorkflowRepository: Execution not found', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowRepository: Execution not found', {"
        },
        {
          "line": 176,
          "content": "this.logger.debug('WorkflowRepository: Execution with metrics retrieved', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Execution with metrics retrieved', {"
        },
        {
          "line": 183,
          "content": "this.logger.error('WorkflowRepository: Failed to get execution with metrics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to get execution with metrics', {"
        },
        {
          "line": 198,
          "content": "this.logger.debug('WorkflowRepository: Getting execution statistics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Getting execution statistics', {"
        },
        {
          "line": 210,
          "content": "this.logger.debug('WorkflowRepository: Execution statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Execution statistics retrieved', {"
        },
        {
          "line": 217,
          "content": "this.logger.error('WorkflowRepository: Failed to get execution statistics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to get execution statistics', {"
        },
        {
          "line": 233,
          "content": "this.logger.debug('WorkflowRepository: Finding executions by workflow ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Finding executions by workflow ID', {"
        },
        {
          "line": 240,
          "content": "this.logger.debug('WorkflowRepository: Executions found by workflow ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Executions found by workflow ID', {"
        },
        {
          "line": 247,
          "content": "this.logger.error('WorkflowRepository: Failed to find executions by workflow ID', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to find executions by workflow ID', {"
        },
        {
          "line": 262,
          "content": "this.logger.debug('WorkflowRepository: Finding executions by task ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Finding executions by task ID', {"
        },
        {
          "line": 268,
          "content": "this.logger.debug('WorkflowRepository: Executions found by task ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Executions found by task ID', {"
        },
        {
          "line": 275,
          "content": "this.logger.error('WorkflowRepository: Failed to find executions by task ID', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to find executions by task ID', {"
        },
        {
          "line": 291,
          "content": "this.logger.debug('WorkflowRepository: Finding executions by user ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Finding executions by user ID', {"
        },
        {
          "line": 298,
          "content": "this.logger.debug('WorkflowRepository: Executions found by user ID', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Executions found by user ID', {"
        },
        {
          "line": 305,
          "content": "this.logger.error('WorkflowRepository: Failed to find executions by user ID', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to find executions by user ID', {"
        },
        {
          "line": 321,
          "content": "this.logger.debug('WorkflowRepository: Finding executions by status', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Finding executions by status', {"
        },
        {
          "line": 328,
          "content": "this.logger.debug('WorkflowRepository: Executions found by status', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Executions found by status', {"
        },
        {
          "line": 335,
          "content": "this.logger.error('WorkflowRepository: Failed to find executions by status', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to find executions by status', {"
        },
        {
          "line": 350,
          "content": "this.logger.info('WorkflowRepository: Deleting workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Deleting workflow execution', {"
        },
        {
          "line": 361,
          "content": "this.logger.info('WorkflowRepository: Workflow execution deleted successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Workflow execution deleted successfully', {"
        },
        {
          "line": 365,
          "content": "this.logger.warn('WorkflowRepository: Workflow execution not found for deletion', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowRepository: Workflow execution not found for deletion', {"
        },
        {
          "line": 372,
          "content": "this.logger.error('WorkflowRepository: Failed to delete workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to delete workflow execution', {"
        },
        {
          "line": 387,
          "content": "this.logger.info('WorkflowRepository: Cleaning up old executions', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Cleaning up old executions', {"
        },
        {
          "line": 394,
          "content": "this.logger.info('WorkflowRepository: Cleanup completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowRepository: Cleanup completed', {"
        },
        {
          "line": 402,
          "content": "this.logger.error('WorkflowRepository: Failed to cleanup old executions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to cleanup old executions', {"
        },
        {
          "line": 418,
          "content": "this.logger.debug('WorkflowRepository: Getting metrics for execution', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Getting metrics for execution', {"
        },
        {
          "line": 425,
          "content": "this.logger.debug('WorkflowRepository: Metrics retrieved for execution', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Metrics retrieved for execution', {"
        },
        {
          "line": 432,
          "content": "this.logger.error('WorkflowRepository: Failed to get metrics for execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to get metrics for execution', {"
        },
        {
          "line": 447,
          "content": "this.logger.debug('WorkflowRepository: Getting aggregated metrics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Getting aggregated metrics', {"
        },
        {
          "line": 453,
          "content": "this.logger.debug('WorkflowRepository: Aggregated metrics retrieved', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Aggregated metrics retrieved', {"
        },
        {
          "line": 459,
          "content": "this.logger.error('WorkflowRepository: Failed to get aggregated metrics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to get aggregated metrics', {"
        },
        {
          "line": 474,
          "content": "this.logger.debug('WorkflowRepository: Getting metrics statistics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Getting metrics statistics', {"
        },
        {
          "line": 480,
          "content": "this.logger.debug('WorkflowRepository: Metrics statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowRepository: Metrics statistics retrieved', {"
        },
        {
          "line": 486,
          "content": "this.logger.error('WorkflowRepository: Failed to get metrics statistics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowRepository: Failed to get metrics statistics', {"
        }
      ]
    },
    "./backend/infrastructure/workflow/WorkflowEventHandlers.js": {
      "totalFindings": 45,
      "byType": {
        "direct_data": 45
      },
      "findings": [
        {
          "line": 66,
          "content": "this.logger.debug('WorkflowEventHandlers: Registered event handlers', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Registered event handlers', {"
        },
        {
          "line": 79,
          "content": "this.logger.debug('WorkflowEventHandlers: Subscribed to event', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Subscribed to event', {"
        },
        {
          "line": 83,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to subscribe to event', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to subscribe to event', {"
        },
        {
          "line": 97,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow execution started', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow execution started', {"
        },
        {
          "line": 118,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow execution started handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow execution started handled successfully', {"
        },
        {
          "line": 122,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow execution started', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow execution started', {"
        },
        {
          "line": 135,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow execution completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow execution completed', {"
        },
        {
          "line": 175,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow execution completed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow execution completed handled successfully', {"
        },
        {
          "line": 179,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow execution completed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow execution completed', {"
        },
        {
          "line": 192,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow execution failed', {"
        },
        {
          "line": 227,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow execution failed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow execution failed handled successfully', {"
        },
        {
          "line": 231,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow execution failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow execution failed', {"
        },
        {
          "line": 244,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow execution cancelled', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow execution cancelled', {"
        },
        {
          "line": 279,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow execution cancelled handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow execution cancelled handled successfully', {"
        },
        {
          "line": 283,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow execution cancelled', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow execution cancelled', {"
        },
        {
          "line": 296,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling workflow step started', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling workflow step started', {"
        },
        {
          "line": 316,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow step started handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow step started handled successfully', {"
        },
        {
          "line": 321,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow step started', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow step started', {"
        },
        {
          "line": 335,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling workflow step completed', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling workflow step completed', {"
        },
        {
          "line": 369,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow step completed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow step completed handled successfully', {"
        },
        {
          "line": 374,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow step completed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow step completed', {"
        },
        {
          "line": 388,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling workflow step failed', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling workflow step failed', {"
        },
        {
          "line": 409,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow step failed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow step failed handled successfully', {"
        },
        {
          "line": 414,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow step failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow step failed', {"
        },
        {
          "line": 428,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling handler execution started', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling handler execution started', {"
        },
        {
          "line": 446,
          "content": "this.logger.debug('WorkflowEventHandlers: Handler execution started handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handler execution started handled successfully', {"
        },
        {
          "line": 451,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle handler execution started', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle handler execution started', {"
        },
        {
          "line": 465,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling handler execution completed', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling handler execution completed', {"
        },
        {
          "line": 496,
          "content": "this.logger.debug('WorkflowEventHandlers: Handler execution completed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handler execution completed handled successfully', {"
        },
        {
          "line": 501,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle handler execution completed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle handler execution completed', {"
        },
        {
          "line": 515,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling handler execution failed', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling handler execution failed', {"
        },
        {
          "line": 534,
          "content": "this.logger.debug('WorkflowEventHandlers: Handler execution failed handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handler execution failed handled successfully', {"
        },
        {
          "line": 539,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle handler execution failed', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle handler execution failed', {"
        },
        {
          "line": 553,
          "content": "this.logger.debug('WorkflowEventHandlers: Handling workflow performance metric', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Handling workflow performance metric', {"
        },
        {
          "line": 568,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow performance metric handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow performance metric handled successfully', {"
        },
        {
          "line": 573,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow performance metric', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow performance metric', {"
        },
        {
          "line": 587,
          "content": "this.logger.warn('WorkflowEventHandlers: Handling workflow performance alert', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowEventHandlers: Handling workflow performance alert', {"
        },
        {
          "line": 619,
          "content": "this.logger.debug('WorkflowEventHandlers: Workflow performance alert handled successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowEventHandlers: Workflow performance alert handled successfully', {"
        },
        {
          "line": 624,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow performance alert', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow performance alert', {"
        },
        {
          "line": 638,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow cleanup required', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow cleanup required', {"
        },
        {
          "line": 644,
          "content": "this.logger.info('WorkflowEventHandlers: Workflow cleanup completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Workflow cleanup completed', {"
        },
        {
          "line": 656,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow cleanup required', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow cleanup required', {"
        },
        {
          "line": 669,
          "content": "this.logger.info('WorkflowEventHandlers: Handling workflow maintenance required', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowEventHandlers: Handling workflow maintenance required', {"
        },
        {
          "line": 683,
          "content": "this.logger.warn('WorkflowEventHandlers: Unknown maintenance type', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowEventHandlers: Unknown maintenance type', {"
        },
        {
          "line": 694,
          "content": "this.logger.error('WorkflowEventHandlers: Failed to handle workflow maintenance required', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowEventHandlers: Failed to handle workflow maintenance required', {"
        }
      ]
    },
    "./backend/infrastructure/workflow/WorkflowPersistenceService.js": {
      "totalFindings": 46,
      "byType": {
        "direct_data": 46
      },
      "findings": [
        {
          "line": 22,
          "content": "this.logger.info('WorkflowPersistenceService: Creating workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Creating workflow execution', {"
        },
        {
          "line": 29,
          "content": "this.logger.info('WorkflowPersistenceService: Workflow execution created successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Workflow execution created successfully', {"
        },
        {
          "line": 35,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to create workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to create workflow execution', {"
        },
        {
          "line": 51,
          "content": "this.logger.info('WorkflowPersistenceService: Updating workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Updating workflow execution', {"
        },
        {
          "line": 58,
          "content": "this.logger.info('WorkflowPersistenceService: Workflow execution updated successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Workflow execution updated successfully', {"
        },
        {
          "line": 65,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to update workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to update workflow execution', {"
        },
        {
          "line": 80,
          "content": "this.logger.debug('WorkflowPersistenceService: Getting workflow execution', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Getting workflow execution', {"
        },
        {
          "line": 87,
          "content": "this.logger.warn('WorkflowPersistenceService: Workflow execution not found', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowPersistenceService: Workflow execution not found', {"
        },
        {
          "line": 91,
          "content": "this.logger.debug('WorkflowPersistenceService: Workflow execution retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Workflow execution retrieved successfully', {"
        },
        {
          "line": 99,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to get workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to get workflow execution', {"
        },
        {
          "line": 115,
          "content": "this.logger.debug('WorkflowPersistenceService: Finding workflow executions', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Finding workflow executions', {"
        },
        {
          "line": 135,
          "content": "this.logger.debug('WorkflowPersistenceService: Workflow executions found', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Workflow executions found', {"
        },
        {
          "line": 142,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to find workflow executions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to find workflow executions', {"
        },
        {
          "line": 157,
          "content": "this.logger.info('WorkflowPersistenceService: Deleting workflow execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Deleting workflow execution', {"
        },
        {
          "line": 164,
          "content": "this.logger.info('WorkflowPersistenceService: Workflow execution deleted successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Workflow execution deleted successfully', {"
        },
        {
          "line": 168,
          "content": "this.logger.warn('WorkflowPersistenceService: Workflow execution not found for deletion', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowPersistenceService: Workflow execution not found for deletion', {"
        },
        {
          "line": 175,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to delete workflow execution', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to delete workflow execution', {"
        },
        {
          "line": 191,
          "content": "this.logger.debug('WorkflowPersistenceService: Recording workflow metric', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Recording workflow metric', {"
        },
        {
          "line": 198,
          "content": "this.logger.debug('WorkflowPersistenceService: Workflow metric recorded successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Workflow metric recorded successfully', {"
        },
        {
          "line": 205,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to record workflow metric', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to record workflow metric', {"
        },
        {
          "line": 222,
          "content": "this.logger.debug('WorkflowPersistenceService: Getting workflow metrics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Getting workflow metrics', {"
        },
        {
          "line": 229,
          "content": "this.logger.debug('WorkflowPersistenceService: Workflow metrics retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Workflow metrics retrieved successfully', {"
        },
        {
          "line": 236,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to get workflow metrics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to get workflow metrics', {"
        },
        {
          "line": 251,
          "content": "this.logger.debug('WorkflowPersistenceService: Getting workflow statistics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Getting workflow statistics', {"
        },
        {
          "line": 257,
          "content": "this.logger.debug('WorkflowPersistenceService: Workflow statistics retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Workflow statistics retrieved successfully', {"
        },
        {
          "line": 263,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to get workflow statistics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to get workflow statistics', {"
        },
        {
          "line": 278,
          "content": "this.logger.debug('WorkflowPersistenceService: Getting aggregated metrics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Getting aggregated metrics', {"
        },
        {
          "line": 284,
          "content": "this.logger.debug('WorkflowPersistenceService: Aggregated metrics retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Aggregated metrics retrieved successfully', {"
        },
        {
          "line": 290,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to get aggregated metrics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to get aggregated metrics', {"
        },
        {
          "line": 305,
          "content": "this.logger.debug('WorkflowPersistenceService: Getting metrics statistics', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Getting metrics statistics', {"
        },
        {
          "line": 311,
          "content": "this.logger.debug('WorkflowPersistenceService: Metrics statistics retrieved successfully', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowPersistenceService: Metrics statistics retrieved successfully', {"
        },
        {
          "line": 317,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to get metrics statistics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to get metrics statistics', {"
        },
        {
          "line": 332,
          "content": "this.logger.info('WorkflowPersistenceService: Cleaning up old executions', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Cleaning up old executions', {"
        },
        {
          "line": 338,
          "content": "this.logger.info('WorkflowPersistenceService: Cleanup completed successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Cleanup completed successfully', {"
        },
        {
          "line": 345,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to cleanup old executions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to cleanup old executions', {"
        },
        {
          "line": 360,
          "content": "this.logger.info('WorkflowPersistenceService: Bulk creating workflow executions', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Bulk creating workflow executions', {"
        },
        {
          "line": 376,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to create execution in bulk', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to create execution in bulk', {"
        },
        {
          "line": 383,
          "content": "this.logger.info('WorkflowPersistenceService: Bulk creation completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Bulk creation completed', {"
        },
        {
          "line": 399,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to bulk create workflow executions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to bulk create workflow executions', {"
        },
        {
          "line": 414,
          "content": "this.logger.info('WorkflowPersistenceService: Bulk updating workflow executions', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Bulk updating workflow executions', {"
        },
        {
          "line": 431,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to update execution in bulk', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to update execution in bulk', {"
        },
        {
          "line": 438,
          "content": "this.logger.info('WorkflowPersistenceService: Bulk update completed', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Bulk update completed', {"
        },
        {
          "line": 454,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to bulk update workflow executions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to bulk update workflow executions', {"
        },
        {
          "line": 470,
          "content": "this.logger.info('WorkflowPersistenceService: Exporting workflow data', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Exporting workflow data', {"
        },
        {
          "line": 495,
          "content": "this.logger.info('WorkflowPersistenceService: Workflow data exported successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowPersistenceService: Workflow data exported successfully', {"
        },
        {
          "line": 502,
          "content": "this.logger.error('WorkflowPersistenceService: Failed to export workflow data', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowPersistenceService: Failed to export workflow data', {"
        }
      ]
    },
    "./backend/infrastructure/workflow/WorkflowCache.js": {
      "totalFindings": 26,
      "byType": {
        "direct_data": 20,
        "object_data": 6
      },
      "findings": [
        {
          "line": 54,
          "content": "this.logger.debug('WorkflowCache: Cache entry set', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache entry set', {"
        },
        {
          "line": 62,
          "content": "this.logger.error('WorkflowCache: Failed to set cache entry', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to set cache entry', {"
        },
        {
          "line": 81,
          "content": "this.logger.debug('WorkflowCache: Cache miss', { key });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache miss', { key }"
        },
        {
          "line": 81,
          "content": "this.logger.debug('WorkflowCache: Cache miss', { key });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Cache miss', { key }"
        },
        {
          "line": 89,
          "content": "this.logger.debug('WorkflowCache: Cache entry expired', { key });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache entry expired', { key }"
        },
        {
          "line": 89,
          "content": "this.logger.debug('WorkflowCache: Cache entry expired', { key });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Cache entry expired', { key }"
        },
        {
          "line": 94,
          "content": "this.logger.debug('WorkflowCache: Cache hit', { key });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache hit', { key }"
        },
        {
          "line": 94,
          "content": "this.logger.debug('WorkflowCache: Cache hit', { key });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Cache hit', { key }"
        },
        {
          "line": 97,
          "content": "this.logger.error('WorkflowCache: Failed to get cache entry', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to get cache entry', {"
        },
        {
          "line": 118,
          "content": "this.logger.debug('WorkflowCache: Cache entry deleted', { key });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache entry deleted', { key }"
        },
        {
          "line": 118,
          "content": "this.logger.debug('WorkflowCache: Cache entry deleted', { key });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Cache entry deleted', { key }"
        },
        {
          "line": 123,
          "content": "this.logger.error('WorkflowCache: Failed to delete cache entry', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to delete cache entry', {"
        },
        {
          "line": 152,
          "content": "this.logger.error('WorkflowCache: Failed to check cache entry', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to check cache entry', {"
        },
        {
          "line": 173,
          "content": "this.logger.info('WorkflowCache: Cache cleared', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowCache: Cache cleared', {"
        },
        {
          "line": 177,
          "content": "this.logger.error('WorkflowCache: Failed to clear cache', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to clear cache', {"
        },
        {
          "line": 243,
          "content": "this.logger.debug('WorkflowCache: Cache entry expired and removed', { key });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache entry expired and removed', { key }"
        },
        {
          "line": 243,
          "content": "this.logger.debug('WorkflowCache: Cache entry expired and removed', { key });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Cache entry expired and removed', { key }"
        },
        {
          "line": 279,
          "content": "this.logger.debug('WorkflowCache: Oldest cache entry evicted', { key: oldestKey });",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Oldest cache entry evicted', { key: oldestKey }"
        },
        {
          "line": 279,
          "content": "this.logger.debug('WorkflowCache: Oldest cache entry evicted', { key: oldestKey });",
          "type": "object_data",
          "match": "logger.debug('WorkflowCache: Oldest cache entry evicted', { key: oldestKey }"
        },
        {
          "line": 282,
          "content": "this.logger.error('WorkflowCache: Failed to evict oldest cache entry', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to evict oldest cache entry', {"
        },
        {
          "line": 305,
          "content": "this.logger.info('WorkflowCache: Cleaned up expired entries', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowCache: Cleaned up expired entries', {"
        },
        {
          "line": 313,
          "content": "this.logger.error('WorkflowCache: Failed to cleanup expired entries', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to cleanup expired entries', {"
        },
        {
          "line": 335,
          "content": "this.logger.info('WorkflowCache: Configuration updated', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowCache: Configuration updated', {"
        },
        {
          "line": 382,
          "content": "this.logger.error('WorkflowCache: Failed to get cache entry metadata', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to get cache entry metadata', {"
        },
        {
          "line": 412,
          "content": "this.logger.debug('WorkflowCache: Cache entry metadata updated', {",
          "type": "direct_data",
          "match": "logger.debug('WorkflowCache: Cache entry metadata updated', {"
        },
        {
          "line": 419,
          "content": "this.logger.error('WorkflowCache: Failed to update cache entry metadata', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowCache: Failed to update cache entry metadata', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/MonorepoStrategy.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 9
      },
      "findings": [
        {
          "line": 46,
          "content": "this.logger.error('MonorepoStrategy: Failed to check if monorepo', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to check if monorepo', {"
        },
        {
          "line": 121,
          "content": "this.logger.error('MonorepoStrategy: Failed to analyze monorepo', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to analyze monorepo', {"
        },
        {
          "line": 222,
          "content": "this.logger.error('MonorepoStrategy: Failed to get packages', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to get packages', {"
        },
        {
          "line": 382,
          "content": "this.logger.error('MonorepoStrategy: Failed to analyze dependencies', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to analyze dependencies', {"
        },
        {
          "line": 417,
          "content": "this.logger.error('MonorepoStrategy: Failed to detect build tools', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to detect build tools', {"
        },
        {
          "line": 443,
          "content": "this.logger.error('MonorepoStrategy: Failed to get shared configs', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to get shared configs', {"
        },
        {
          "line": 542,
          "content": "this.logger.error('MonorepoStrategy: Failed to generate recommendations', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to generate recommendations', {"
        },
        {
          "line": 577,
          "content": "this.logger.error('MonorepoStrategy: Failed to optimize monorepo', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to optimize monorepo', {"
        },
        {
          "line": 612,
          "content": "this.logger.error('MonorepoStrategy: Failed to create shared configs', {",
          "type": "direct_data",
          "match": "logger.error('MonorepoStrategy: Failed to create shared configs', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/performanceAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 59,
          "content": "this.logger.error('PerformanceAnalyzer: Failed to analyze performance', {",
          "type": "direct_data",
          "match": "logger.error('PerformanceAnalyzer: Failed to analyze performance', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/securityAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 51,
          "content": "this.logger.error('SecurityAnalyzer: Failed to analyze security', {",
          "type": "direct_data",
          "match": "logger.error('SecurityAnalyzer: Failed to analyze security', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/deploymentAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 51,
          "content": "this.logger.error('DeploymentAnalyzer: Failed to analyze deployment', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentAnalyzer: Failed to analyze deployment', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/dependencyAnalyzer.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 56,
          "content": "this.logger.error('DependencyAnalyzer: Failed to analyze dependencies', {",
          "type": "direct_data",
          "match": "logger.error('DependencyAnalyzer: Failed to analyze dependencies', {"
        },
        {
          "line": 86,
          "content": "this.logger.error('DependencyAnalyzer: Failed to get packages', {",
          "type": "direct_data",
          "match": "logger.error('DependencyAnalyzer: Failed to get packages', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/recommendationsService.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 72,
          "content": "this.logger.error('RecommendationsService: Failed to generate recommendations', {",
          "type": "direct_data",
          "match": "logger.error('RecommendationsService: Failed to generate recommendations', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/optimizationService.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 33,
          "content": "this.logger.error('OptimizationService: Failed to optimize single repo', {",
          "type": "direct_data",
          "match": "logger.error('OptimizationService: Failed to optimize single repo', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/testingAnalyzer.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 60,
          "content": "this.logger.error('TestingAnalyzer: Failed to analyze testing', {",
          "type": "direct_data",
          "match": "logger.error('TestingAnalyzer: Failed to analyze testing', {"
        },
        {
          "line": 85,
          "content": "this.logger.warn('TestingAnalyzer: Failed to scan for test files', {",
          "type": "direct_data",
          "match": "logger.warn('TestingAnalyzer: Failed to scan for test files', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/structureAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 47,
          "content": "this.logger.error('StructureAnalyzer: Failed to analyze structure', {",
          "type": "direct_data",
          "match": "logger.error('StructureAnalyzer: Failed to analyze structure', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/projectTypeAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 61,
          "content": "this.logger.error('ProjectTypeAnalyzer: Failed to get project type', {",
          "type": "direct_data",
          "match": "logger.error('ProjectTypeAnalyzer: Failed to get project type', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/services/lintingAnalyzer.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 54,
          "content": "this.logger.error('LintingAnalyzer: Failed to analyze linting', {",
          "type": "direct_data",
          "match": "logger.error('LintingAnalyzer: Failed to analyze linting', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/validators/repositoryTypeValidator.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 49,
          "content": "this.logger.error('RepositoryTypeValidator: Failed to check if single repo', {",
          "type": "direct_data",
          "match": "logger.error('RepositoryTypeValidator: Failed to check if single repo', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/utils/directoryScanner.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 72,
          "content": "this.logger.warn('DirectoryScanner: Failed to scan directory', {",
          "type": "direct_data",
          "match": "logger.warn('DirectoryScanner: Failed to scan directory', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/single-repo/utils/fileUtils.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 129,
          "content": "this.logger.warn('FileUtils: Failed to read JSON file', {",
          "type": "direct_data",
          "match": "logger.warn('FileUtils: Failed to read JSON file', {"
        }
      ]
    },
    "./backend/infrastructure/strategies/SingleRepoStrategy.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 115,
          "content": "this.logger.error('SingleRepoStrategy: Failed to analyze single repo', {",
          "type": "direct_data",
          "match": "logger.error('SingleRepoStrategy: Failed to analyze single repo', {"
        },
        {
          "line": 145,
          "content": "this.logger.error('SingleRepoStrategy: Failed to optimize single repo', {",
          "type": "direct_data",
          "match": "logger.error('SingleRepoStrategy: Failed to optimize single repo', {"
        }
      ]
    },
    "./backend/infrastructure/messaging/EventBus.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 36,
          "content": "logger.info(`Publishing event: ${eventName}`);",
          "type": "template_data",
          "match": "logger.info(`Publishing event: ${eventName}`"
        },
        {
          "line": 51,
          "content": "logger.error(`Error in handler for ${eventName}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error in handler for ${eventName}:`, error"
        },
        {
          "line": 51,
          "content": "logger.error(`Error in handler for ${eventName}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error in handler for ${eventName}:`, error"
        },
        {
          "line": 51,
          "content": "logger.error(`Error in handler for ${eventName}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error in handler for ${eventName}:`"
        },
        {
          "line": 51,
          "content": "logger.error(`Error in handler for ${eventName}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error in handler for ${eventName}:`, error"
        }
      ]
    },
    "./backend/infrastructure/messaging/QueryBus.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 4,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "this.logger.info(`Registered handler for query: ${queryName}`);",
          "type": "template_data",
          "match": "logger.info(`Registered handler for query: ${queryName}`"
        },
        {
          "line": 35,
          "content": "this.logger.info(`Executing query: ${queryName}`);",
          "type": "template_data",
          "match": "logger.info(`Executing query: ${queryName}`"
        },
        {
          "line": 52,
          "content": "this.logger.info(`Query executed successfully: ${queryName}`);",
          "type": "template_data",
          "match": "logger.info(`Query executed successfully: ${queryName}`"
        },
        {
          "line": 55,
          "content": "this.logger.error(`Query execution failed: ${queryName}`, {",
          "type": "direct_data",
          "match": "logger.error(`Query execution failed: ${queryName}`, {"
        },
        {
          "line": 55,
          "content": "this.logger.error(`Query execution failed: ${queryName}`, {",
          "type": "template_data",
          "match": "logger.error(`Query execution failed: ${queryName}`"
        }
      ]
    },
    "./backend/infrastructure/messaging/CommandBus.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 4,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "this.logger.info(`Registered handler for command: ${commandName}`);",
          "type": "template_data",
          "match": "logger.info(`Registered handler for command: ${commandName}`"
        },
        {
          "line": 35,
          "content": "this.logger.info(`Executing command: ${commandName}`);",
          "type": "template_data",
          "match": "logger.info(`Executing command: ${commandName}`"
        },
        {
          "line": 52,
          "content": "this.logger.info(`Command executed successfully: ${commandName}`);",
          "type": "template_data",
          "match": "logger.info(`Command executed successfully: ${commandName}`"
        },
        {
          "line": 55,
          "content": "this.logger.error(`Command execution failed: ${commandName}`, {",
          "type": "direct_data",
          "match": "logger.error(`Command execution failed: ${commandName}`, {"
        },
        {
          "line": 55,
          "content": "this.logger.error(`Command execution failed: ${commandName}`, {",
          "type": "template_data",
          "match": "logger.error(`Command execution failed: ${commandName}`"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteUserSessionRepository.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 5,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 17,
          "content": "logger.info('🔍 [UserSessionRepository] Saving session:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Saving session:', {"
        },
        {
          "line": 30,
          "content": "logger.info('🔍 [UserSessionRepository] Session data to save:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Session data to save:', {"
        },
        {
          "line": 96,
          "content": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20) + '...');",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20"
        },
        {
          "line": 96,
          "content": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20) + '...');",
          "type": "variable_data",
          "match": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken"
        },
        {
          "line": 101,
          "content": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {"
        },
        {
          "line": 101,
          "content": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {",
          "type": "variable_data",
          "match": "logger.info('🔍 [UserSessionRepository] Database result:', row"
        },
        {
          "line": 120,
          "content": "logger.info('✅ [UserSessionRepository] Session found and reconstructed:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [UserSessionRepository] Session found and reconstructed:', {"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteChatRepository.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "user_data": 1
      },
      "findings": [
        {
          "line": 48,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message"
        },
        {
          "line": 48,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', sessionId"
        },
        {
          "line": 48,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "user_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', session"
        },
        {
          "line": 75,
          "content": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message"
        },
        {
          "line": 75,
          "content": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', row"
        },
        {
          "line": 145,
          "content": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message"
        },
        {
          "line": 145,
          "content": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat message:', row"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteUserRepository.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 4
      },
      "findings": [
        {
          "line": 66,
          "content": "logger.warn('Failed to parse metadata for user:', id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', id, error.message"
        },
        {
          "line": 66,
          "content": "logger.warn('Failed to parse metadata for user:', id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', id"
        },
        {
          "line": 102,
          "content": "logger.warn('Failed to parse metadata for user:', email, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', email, error.message"
        },
        {
          "line": 102,
          "content": "logger.warn('Failed to parse metadata for user:', email, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', email"
        },
        {
          "line": 133,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', row.id, error.message"
        },
        {
          "line": 133,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', row"
        },
        {
          "line": 215,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', row.id, error.message"
        },
        {
          "line": 215,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', row"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLStreamingSessionRepository.js": {
      "totalFindings": 38,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 8
      },
      "findings": [
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization error:', error.message"
        },
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 109,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error creating tables:', error.message"
        },
        {
          "line": 109,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 109,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 129,
          "content": "logger.info(`Saved session ${session.id}`);",
          "type": "template_data",
          "match": "logger.info(`Saved session ${session.id}`"
        },
        {
          "line": 131,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error.message"
        },
        {
          "line": 131,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 131,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving session ${session.id}:`"
        },
        {
          "line": 131,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 210,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error.message"
        },
        {
          "line": 210,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 210,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting session ${sessionId}:`"
        },
        {
          "line": 210,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 284,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting active sessions:', error.message"
        },
        {
          "line": 284,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 284,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 336,
          "content": "logger.info(`Deleted session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted session ${sessionId}`"
        },
        {
          "line": 338,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error.message"
        },
        {
          "line": 338,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 338,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`"
        },
        {
          "line": 338,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 371,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message"
        },
        {
          "line": 371,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 371,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`"
        },
        {
          "line": 371,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 436,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message"
        },
        {
          "line": 436,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 436,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`"
        },
        {
          "line": 436,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 535,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting stats:', error.message"
        },
        {
          "line": 535,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 535,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 559,
          "content": "logger.info(`Cleaned up ${deletedCount} old sessions`);",
          "type": "template_data",
          "match": "logger.info(`Cleaned up ${deletedCount} old sessions`"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error during cleanup:', error.message"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error during cleanup:', error"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteTaskSuggestionRepository.js": {
      "totalFindings": 1,
      "byType": {
        "template_data": 1
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.info(`Index creation skipped: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`Index creation skipped: ${error.message}`"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLUserRepository.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 4
      },
      "findings": [
        {
          "line": 71,
          "content": "logger.warn('Failed to parse metadata for user:', id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', id, error.message"
        },
        {
          "line": 71,
          "content": "logger.warn('Failed to parse metadata for user:', id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', id"
        },
        {
          "line": 104,
          "content": "logger.warn('Failed to parse metadata for user:', email, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', email, error.message"
        },
        {
          "line": 104,
          "content": "logger.warn('Failed to parse metadata for user:', email, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', email"
        },
        {
          "line": 132,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', row.id, error.message"
        },
        {
          "line": 132,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', row"
        },
        {
          "line": 209,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for user:', row.id, error.message"
        },
        {
          "line": 209,
          "content": "logger.warn('Failed to parse metadata for user:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for user:', row"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLTaskRepository.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 377,
          "content": "logger.error('Error converting row to task:', error);",
          "type": "direct_data",
          "match": "logger.error('Error converting row to task:', error"
        },
        {
          "line": 377,
          "content": "logger.error('Error converting row to task:', error);",
          "type": "variable_data",
          "match": "logger.error('Error converting row to task:', error"
        },
        {
          "line": 377,
          "content": "logger.error('Error converting row to task:', error);",
          "type": "error_object",
          "match": "logger.error('Error converting row to task:', error"
        },
        {
          "line": 378,
          "content": "logger.error('Row data:', row);",
          "type": "direct_data",
          "match": "logger.error('Row data:', row"
        },
        {
          "line": 378,
          "content": "logger.error('Row data:', row);",
          "type": "variable_data",
          "match": "logger.error('Row data:', row"
        }
      ]
    },
    "./backend/infrastructure/database/StreamingSessionRepository.js": {
      "totalFindings": 38,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 8
      },
      "findings": [
        {
          "line": 37,
          "content": "logger.error('Initialization error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization error:', error.message"
        },
        {
          "line": 37,
          "content": "logger.error('Initialization error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 37,
          "content": "logger.error('Initialization error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 108,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error creating tables:', error.message"
        },
        {
          "line": 108,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 108,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 130,
          "content": "logger.info(`Saved session ${session.id}`);",
          "type": "template_data",
          "match": "logger.info(`Saved session ${session.id}`"
        },
        {
          "line": 132,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error.message"
        },
        {
          "line": 132,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 132,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving session ${session.id}:`"
        },
        {
          "line": 132,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 197,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error.message"
        },
        {
          "line": 197,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 197,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting session ${sessionId}:`"
        },
        {
          "line": 197,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 273,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting active sessions:', error.message"
        },
        {
          "line": 273,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 273,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 327,
          "content": "logger.info(`Deleted session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted session ${sessionId}`"
        },
        {
          "line": 329,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error.message"
        },
        {
          "line": 329,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 329,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`"
        },
        {
          "line": 329,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 364,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message"
        },
        {
          "line": 364,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 364,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`"
        },
        {
          "line": 364,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 433,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message"
        },
        {
          "line": 433,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 433,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`"
        },
        {
          "line": 433,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 532,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting stats:', error.message"
        },
        {
          "line": 532,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 532,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 559,
          "content": "logger.info(`Cleaned up ${sessionsToDelete.length} old sessions`);",
          "type": "template_data",
          "match": "logger.info(`Cleaned up ${sessionsToDelete.length} old sessions`"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error during cleanup:', error.message"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 561,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error during cleanup:', error"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLTaskSessionRepository.js": {
      "totalFindings": 35,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 5
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error.message"
        },
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 128,
          "content": "this.logger.debug(`Saved session: ${session.id}`);",
          "type": "template_data",
          "match": "logger.debug(`Saved session: ${session.id}`"
        },
        {
          "line": 131,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to save session:`, error.message"
        },
        {
          "line": 131,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to save session:`, error"
        },
        {
          "line": 131,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to save session:`, error"
        },
        {
          "line": 156,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find session ${id}:`, error.message"
        },
        {
          "line": 156,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find session ${id}:`, error"
        },
        {
          "line": 156,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find session ${id}:`"
        },
        {
          "line": 156,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find session ${id}:`, error"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error.message"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`"
        },
        {
          "line": 191,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error"
        },
        {
          "line": 226,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error.message"
        },
        {
          "line": 226,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error"
        },
        {
          "line": 226,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`"
        },
        {
          "line": 226,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error"
        },
        {
          "line": 261,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find active sessions:`, error.message"
        },
        {
          "line": 261,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find active sessions:`, error"
        },
        {
          "line": 261,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find active sessions:`, error"
        },
        {
          "line": 281,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to delete session ${id}:`, error.message"
        },
        {
          "line": 281,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to delete session ${id}:`, error"
        },
        {
          "line": 281,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to delete session ${id}:`"
        },
        {
          "line": 281,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to delete session ${id}:`, error"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get stats:`, error.message"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get stats:`, error"
        },
        {
          "line": 316,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get stats:`, error"
        },
        {
          "line": 361,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to map row to session:`, error.message"
        },
        {
          "line": 361,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to map row to session:`, error"
        },
        {
          "line": 361,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to map row to session:`, error"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to cleanup old sessions:`, error.message"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to cleanup old sessions:`, error"
        },
        {
          "line": 382,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to cleanup old sessions:`, error"
        }
      ]
    },
    "./backend/infrastructure/database/InMemoryTaskRepository.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 22,
          "content": "logger.info('🔍 [InMemoryTaskRepository] findById:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [InMemoryTaskRepository] findById:', { "
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLUserSessionRepository.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 5,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 18,
          "content": "logger.info('🔍 [UserSessionRepository] Saving session:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Saving session:', {"
        },
        {
          "line": 36,
          "content": "logger.info('🔍 [UserSessionRepository] Session data to save:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Session data to save:', {"
        },
        {
          "line": 102,
          "content": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20) + '...');",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20"
        },
        {
          "line": 102,
          "content": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken.substring(0, 20) + '...');",
          "type": "variable_data",
          "match": "logger.info('🔍 [UserSessionRepository] Finding session by access token:', accessToken"
        },
        {
          "line": 107,
          "content": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {",
          "type": "direct_data",
          "match": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {"
        },
        {
          "line": 107,
          "content": "logger.info('🔍 [UserSessionRepository] Database result:', row ? {",
          "type": "variable_data",
          "match": "logger.info('🔍 [UserSessionRepository] Database result:', row"
        },
        {
          "line": 126,
          "content": "logger.info('✅ [UserSessionRepository] Session found and reconstructed:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [UserSessionRepository] Session found and reconstructed:', {"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLProjectAnalysisRepository.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 202,
          "content": "logger.warn('Failed to parse analysis_data for analysis:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse analysis_data for analysis:', row.id, error.message"
        },
        {
          "line": 202,
          "content": "logger.warn('Failed to parse analysis_data for analysis:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse analysis_data for analysis:', row"
        },
        {
          "line": 211,
          "content": "logger.warn('Failed to parse metadata for analysis:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for analysis:', row.id, error.message"
        },
        {
          "line": 211,
          "content": "logger.warn('Failed to parse metadata for analysis:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for analysis:', row"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteAnalysisRepository.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 3,
        "direct_data": 3,
        "variable_data": 3,
        "database_result": 1
      },
      "findings": [
        {
          "line": 67,
          "content": "logger.info(`Executing query: ${sql} with projectId: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Executing query: ${sql} with projectId: ${projectId}`"
        },
        {
          "line": 70,
          "content": "logger.info(`Found ${rows.length} rows for projectId: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${rows.length} rows for projectId: ${projectId}`"
        },
        {
          "line": 71,
          "content": "logger.info(`Raw rows:`, rows);",
          "type": "direct_data",
          "match": "logger.info(`Raw rows:`, rows"
        },
        {
          "line": 71,
          "content": "logger.info(`Raw rows:`, rows);",
          "type": "variable_data",
          "match": "logger.info(`Raw rows:`, rows"
        },
        {
          "line": 71,
          "content": "logger.info(`Raw rows:`, rows);",
          "type": "database_result",
          "match": "logger.info(`Raw rows:`, rows"
        },
        {
          "line": 74,
          "content": "logger.info(`Mapped to ${entities.length} entities`);",
          "type": "template_data",
          "match": "logger.info(`Mapped to ${entities.length} entities`"
        },
        {
          "line": 235,
          "content": "logger.warn('Failed to parse result_data for analysis:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse result_data for analysis:', row.id, error.message"
        },
        {
          "line": 235,
          "content": "logger.warn('Failed to parse result_data for analysis:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse result_data for analysis:', row"
        },
        {
          "line": 244,
          "content": "logger.warn('Failed to parse summary for analysis:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse summary for analysis:', row.id, error.message"
        },
        {
          "line": 244,
          "content": "logger.warn('Failed to parse summary for analysis:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse summary for analysis:', row"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteStreamingSessionRepository.js": {
      "totalFindings": 38,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 8
      },
      "findings": [
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization error:', error.message"
        },
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 33,
          "content": "this.logger.error('Initialization error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization error:', error"
        },
        {
          "line": 107,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error creating tables:', error.message"
        },
        {
          "line": 107,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 107,
          "content": "logger.error('Error creating tables:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error creating tables:', error"
        },
        {
          "line": 127,
          "content": "logger.info(`Saved session ${session.id}`);",
          "type": "template_data",
          "match": "logger.info(`Saved session ${session.id}`"
        },
        {
          "line": 129,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error.message"
        },
        {
          "line": 129,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 129,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving session ${session.id}:`"
        },
        {
          "line": 129,
          "content": "logger.error(`Error saving session ${session.id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving session ${session.id}:`, error"
        },
        {
          "line": 190,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error.message"
        },
        {
          "line": 190,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 190,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting session ${sessionId}:`"
        },
        {
          "line": 190,
          "content": "logger.error(`Error getting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting session ${sessionId}:`, error"
        },
        {
          "line": 264,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting active sessions:', error.message"
        },
        {
          "line": 264,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 264,
          "content": "logger.error('Error getting active sessions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting active sessions:', error"
        },
        {
          "line": 316,
          "content": "logger.info(`Deleted session ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted session ${sessionId}`"
        },
        {
          "line": 318,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error.message"
        },
        {
          "line": 318,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 318,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error deleting session ${sessionId}:`"
        },
        {
          "line": 318,
          "content": "logger.error(`Error deleting session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error deleting session ${sessionId}:`, error"
        },
        {
          "line": 351,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message"
        },
        {
          "line": 351,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 351,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`"
        },
        {
          "line": 351,
          "content": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error saving metrics for session ${metrics.sessionId}:`, error"
        },
        {
          "line": 416,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message"
        },
        {
          "line": 416,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 416,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`"
        },
        {
          "line": 416,
          "content": "logger.error(`Error getting metrics for session ${sessionId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting metrics for session ${sessionId}:`, error"
        },
        {
          "line": 515,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting stats:', error.message"
        },
        {
          "line": 515,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 515,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 539,
          "content": "logger.info(`Cleaned up ${deletedCount} old sessions`);",
          "type": "template_data",
          "match": "logger.info(`Cleaned up ${deletedCount} old sessions`"
        },
        {
          "line": 541,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error during cleanup:', error.message"
        },
        {
          "line": 541,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error during cleanup:', error"
        },
        {
          "line": 541,
          "content": "logger.error('Error during cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error during cleanup:', error"
        }
      ]
    },
    "./backend/infrastructure/database/PostgreSQLChatRepository.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "user_data": 1
      },
      "findings": [
        {
          "line": 53,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message"
        },
        {
          "line": 53,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', sessionId"
        },
        {
          "line": 53,
          "content": "logger.warn('Failed to parse metadata for chat session:', sessionId, error.message);",
          "type": "user_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', session"
        },
        {
          "line": 80,
          "content": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message"
        },
        {
          "line": 80,
          "content": "logger.warn('Failed to parse metadata for chat session:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat session:', row"
        },
        {
          "line": 151,
          "content": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message"
        },
        {
          "line": 151,
          "content": "logger.warn('Failed to parse metadata for chat message:', row.id, error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to parse metadata for chat message:', row"
        }
      ]
    },
    "./backend/infrastructure/database/DatabaseConnection.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 3,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 2
      },
      "findings": [
        {
          "line": 27,
          "content": "logger.warn(`⚠️ [DatabaseConnection] Primary connection failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️ [DatabaseConnection] Primary connection failed: ${error.message}`"
        },
        {
          "line": 137,
          "content": "logger.info('🔄 [DatabaseConnection] No migration files found, creating tables...');",
          "type": "direct_data",
          "match": "logger.info('🔄 [DatabaseConnection] No migration files found, creating tables...'"
        },
        {
          "line": 137,
          "content": "logger.info('🔄 [DatabaseConnection] No migration files found, creating tables...');",
          "type": "variable_data",
          "match": "logger.info('🔄 [DatabaseConnection] No migration files found, creating"
        },
        {
          "line": 148,
          "content": "logger.info(`✅ [DatabaseConnection] Migration applied: ${file}`);",
          "type": "template_data",
          "match": "logger.info(`✅ [DatabaseConnection] Migration applied: ${file}`"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error.message"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`"
        },
        {
          "line": 150,
          "content": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [DatabaseConnection] Migration failed: ${file}`, error"
        },
        {
          "line": 429,
          "content": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error.message"
        },
        {
          "line": 429,
          "content": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error"
        },
        {
          "line": 429,
          "content": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ [DatabaseConnection] Table creation failed:`, error"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteTaskSessionRepository.js": {
      "totalFindings": 35,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 5
      },
      "findings": [
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error.message"
        },
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 25,
          "content": "this.logger.error('Initialization failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 109,
          "content": "this.logger.debug(`Saved session: ${session.id}`);",
          "type": "template_data",
          "match": "logger.debug(`Saved session: ${session.id}`"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to save session:`, error.message"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to save session:`, error"
        },
        {
          "line": 112,
          "content": "this.logger.error(`Failed to save session:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to save session:`, error"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find session ${id}:`, error.message"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find session ${id}:`, error"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find session ${id}:`"
        },
        {
          "line": 137,
          "content": "this.logger.error(`Failed to find session ${id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find session ${id}:`, error"
        },
        {
          "line": 172,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error.message"
        },
        {
          "line": 172,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error"
        },
        {
          "line": 172,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`"
        },
        {
          "line": 172,
          "content": "this.logger.error(`Failed to find sessions by user ${userId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find sessions by user ${userId}:`, error"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error.message"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`"
        },
        {
          "line": 207,
          "content": "this.logger.error(`Failed to find sessions by project ${projectId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find sessions by project ${projectId}:`, error"
        },
        {
          "line": 242,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to find active sessions:`, error.message"
        },
        {
          "line": 242,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to find active sessions:`, error"
        },
        {
          "line": 242,
          "content": "this.logger.error(`Failed to find active sessions:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to find active sessions:`, error"
        },
        {
          "line": 262,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to delete session ${id}:`, error.message"
        },
        {
          "line": 262,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to delete session ${id}:`, error"
        },
        {
          "line": 262,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Failed to delete session ${id}:`"
        },
        {
          "line": 262,
          "content": "this.logger.error(`Failed to delete session ${id}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to delete session ${id}:`, error"
        },
        {
          "line": 297,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get stats:`, error.message"
        },
        {
          "line": 297,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get stats:`, error"
        },
        {
          "line": 297,
          "content": "this.logger.error(`Failed to get stats:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to get stats:`, error"
        },
        {
          "line": 342,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to map row to session:`, error.message"
        },
        {
          "line": 342,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to map row to session:`, error"
        },
        {
          "line": 342,
          "content": "this.logger.error(`Failed to map row to session:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to map row to session:`, error"
        },
        {
          "line": 363,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Failed to cleanup old sessions:`, error.message"
        },
        {
          "line": 363,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Failed to cleanup old sessions:`, error"
        },
        {
          "line": 363,
          "content": "this.logger.error(`Failed to cleanup old sessions:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Failed to cleanup old sessions:`, error"
        }
      ]
    },
    "./backend/infrastructure/database/SQLiteTaskTemplateRepository.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 2,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 31,
          "content": "logger.debug(`Index creation skipped: ${error.message}`);",
          "type": "template_data",
          "match": "logger.debug(`Index creation skipped: ${error.message}`"
        },
        {
          "line": 516,
          "content": "logger.error(`Failed to import template ${templateData.name}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to import template ${templateData.name}:`, error"
        },
        {
          "line": 516,
          "content": "logger.error(`Failed to import template ${templateData.name}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to import template ${templateData.name}:`, error"
        },
        {
          "line": 516,
          "content": "logger.error(`Failed to import template ${templateData.name}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to import template ${templateData.name}:`"
        },
        {
          "line": 516,
          "content": "logger.error(`Failed to import template ${templateData.name}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to import template ${templateData.name}:`, error"
        }
      ]
    },
    "./backend/infrastructure/auth/AuthMiddleware.js": {
      "totalFindings": 13,
      "byType": {
        "direct_data": 5,
        "variable_data": 4,
        "request_response": 1,
        "user_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 15,
          "content": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req.path);",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req.path"
        },
        {
          "line": 15,
          "content": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req.path);",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req"
        },
        {
          "line": 15,
          "content": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req.path);",
          "type": "request_response",
          "match": "logger.info('🔍 [AuthMiddleware] Authenticating request to:', req"
        },
        {
          "line": 16,
          "content": "logger.info('🔍 [AuthMiddleware] Headers:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthMiddleware] Headers:', {"
        },
        {
          "line": 22,
          "content": "// logger.info('🔍 [AuthMiddleware] Extracted token:', token ? token.substring(0, 20) + '...' : 'null');",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthMiddleware] Extracted token:', token ? token.substring(0, 20"
        },
        {
          "line": 22,
          "content": "// logger.info('🔍 [AuthMiddleware] Extracted token:', token ? token.substring(0, 20) + '...' : 'null');",
          "type": "variable_data",
          "match": "logger.info('🔍 [AuthMiddleware] Extracted token:', token"
        },
        {
          "line": 22,
          "content": "// logger.info('🔍 [AuthMiddleware] Extracted token:', token ? token.substring(0, 20) + '...' : 'null');",
          "type": "user_data",
          "match": "logger.info('🔍 [AuthMiddleware] Extracted token:', token"
        },
        {
          "line": 34,
          "content": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user.email);",
          "type": "direct_data",
          "match": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user.email"
        },
        {
          "line": 34,
          "content": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user.email);",
          "type": "variable_data",
          "match": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user"
        },
        {
          "line": 34,
          "content": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user.email);",
          "type": "user_data",
          "match": "logger.info('✅ [AuthMiddleware] Token validated successfully for user:', user"
        },
        {
          "line": 42,
          "content": "logger.error('❌ [AuthMiddleware] Authentication failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ [AuthMiddleware] Authentication failed:', error.message"
        },
        {
          "line": 42,
          "content": "logger.error('❌ [AuthMiddleware] Authentication failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ [AuthMiddleware] Authentication failed:', error"
        },
        {
          "line": 42,
          "content": "logger.error('❌ [AuthMiddleware] Authentication failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ [AuthMiddleware] Authentication failed:', error"
        }
      ]
    },
    "./backend/infrastructure/security/LogPermissionManager.js": {
      "totalFindings": 37,
      "byType": {
        "template_data": 7,
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10
      },
      "findings": [
        {
          "line": 46,
          "content": "logger.info(`Set permissions ${permissions.toString(8)} for: ${normalizedPath}`);",
          "type": "template_data",
          "match": "logger.info(`Set permissions ${permissions.toString(8)} for: ${normalizedPath}`"
        },
        {
          "line": 48,
          "content": "logger.error('Error setting permissions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error setting permissions:', error"
        },
        {
          "line": 48,
          "content": "logger.error('Error setting permissions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error setting permissions:', error"
        },
        {
          "line": 48,
          "content": "logger.error('Error setting permissions:', error);",
          "type": "error_object",
          "match": "logger.error('Error setting permissions:', error"
        },
        {
          "line": 75,
          "content": "logger.info(`Created secure log directory: ${normalizedPath}`);",
          "type": "template_data",
          "match": "logger.info(`Created secure log directory: ${normalizedPath}`"
        },
        {
          "line": 78,
          "content": "logger.error('Error creating secure log directory:', error);",
          "type": "direct_data",
          "match": "logger.error('Error creating secure log directory:', error"
        },
        {
          "line": 78,
          "content": "logger.error('Error creating secure log directory:', error);",
          "type": "variable_data",
          "match": "logger.error('Error creating secure log directory:', error"
        },
        {
          "line": 78,
          "content": "logger.error('Error creating secure log directory:', error);",
          "type": "error_object",
          "match": "logger.error('Error creating secure log directory:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Path validation failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Path validation failed:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Path validation failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Path validation failed:', error"
        },
        {
          "line": 113,
          "content": "logger.error('Path validation failed:', error);",
          "type": "error_object",
          "match": "logger.error('Path validation failed:', error"
        },
        {
          "line": 174,
          "content": "logger.error('Error getting secure file path:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting secure file path:', error"
        },
        {
          "line": 174,
          "content": "logger.error('Error getting secure file path:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting secure file path:', error"
        },
        {
          "line": 174,
          "content": "logger.error('Error getting secure file path:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting secure file path:', error"
        },
        {
          "line": 211,
          "content": "logger.info(`Fixed permissions for: ${normalizedPath}`);",
          "type": "template_data",
          "match": "logger.info(`Fixed permissions for: ${normalizedPath}`"
        },
        {
          "line": 214,
          "content": "logger.error('Error ensuring secure permissions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error ensuring secure permissions:', error"
        },
        {
          "line": 214,
          "content": "logger.error('Error ensuring secure permissions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error ensuring secure permissions:', error"
        },
        {
          "line": 214,
          "content": "logger.error('Error ensuring secure permissions:', error);",
          "type": "error_object",
          "match": "logger.error('Error ensuring secure permissions:', error"
        },
        {
          "line": 245,
          "content": "logger.info(`Deleted old log file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted old log file: ${filePath}`"
        },
        {
          "line": 247,
          "content": "logger.warn(`Could not process file ${file}:`, error.message);",
          "type": "direct_data",
          "match": "logger.warn(`Could not process file ${file}:`, error.message"
        },
        {
          "line": 247,
          "content": "logger.warn(`Could not process file ${file}:`, error.message);",
          "type": "variable_data",
          "match": "logger.warn(`Could not process file ${file}:`, error"
        },
        {
          "line": 247,
          "content": "logger.warn(`Could not process file ${file}:`, error.message);",
          "type": "template_data",
          "match": "logger.warn(`Could not process file ${file}:`"
        },
        {
          "line": 247,
          "content": "logger.warn(`Could not process file ${file}:`, error.message);",
          "type": "error_object",
          "match": "logger.warn(`Could not process file ${file}:`, error"
        },
        {
          "line": 251,
          "content": "logger.error('Error cleaning up old logs:', error);",
          "type": "direct_data",
          "match": "logger.error('Error cleaning up old logs:', error"
        },
        {
          "line": 251,
          "content": "logger.error('Error cleaning up old logs:', error);",
          "type": "variable_data",
          "match": "logger.error('Error cleaning up old logs:', error"
        },
        {
          "line": 251,
          "content": "logger.error('Error cleaning up old logs:', error);",
          "type": "error_object",
          "match": "logger.error('Error cleaning up old logs:', error"
        },
        {
          "line": 280,
          "content": "logger.info(`Securely deleted: ${normalizedPath}`);",
          "type": "template_data",
          "match": "logger.info(`Securely deleted: ${normalizedPath}`"
        },
        {
          "line": 282,
          "content": "logger.error('Error in secure delete:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in secure delete:', error"
        },
        {
          "line": 282,
          "content": "logger.error('Error in secure delete:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in secure delete:', error"
        },
        {
          "line": 282,
          "content": "logger.error('Error in secure delete:', error);",
          "type": "error_object",
          "match": "logger.error('Error in secure delete:', error"
        },
        {
          "line": 336,
          "content": "logger.error('Error getting directory structure:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting directory structure:', error"
        },
        {
          "line": 336,
          "content": "logger.error('Error getting directory structure:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting directory structure:', error"
        },
        {
          "line": 336,
          "content": "logger.error('Error getting directory structure:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting directory structure:', error"
        },
        {
          "line": 371,
          "content": "logger.info(`Validated and fixed permissions for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Validated and fixed permissions for port ${port}`"
        },
        {
          "line": 373,
          "content": "logger.error('Error validating permissions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error validating permissions:', error"
        },
        {
          "line": 373,
          "content": "logger.error('Error validating permissions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error validating permissions:', error"
        },
        {
          "line": 373,
          "content": "logger.error('Error validating permissions:', error);",
          "type": "error_object",
          "match": "logger.error('Error validating permissions:', error"
        }
      ]
    },
    "./backend/infrastructure/security/LogEncryptionService.js": {
      "totalFindings": 31,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 9,
        "template_data": 2
      },
      "findings": [
        {
          "line": 39,
          "content": "logger.error('Error generating key:', error);",
          "type": "direct_data",
          "match": "logger.error('Error generating key:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Error generating key:', error);",
          "type": "variable_data",
          "match": "logger.error('Error generating key:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Error generating key:', error);",
          "type": "error_object",
          "match": "logger.error('Error generating key:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error encrypting log entry:', error);",
          "type": "direct_data",
          "match": "logger.error('Error encrypting log entry:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error encrypting log entry:', error);",
          "type": "variable_data",
          "match": "logger.error('Error encrypting log entry:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error encrypting log entry:', error);",
          "type": "error_object",
          "match": "logger.error('Error encrypting log entry:', error"
        },
        {
          "line": 112,
          "content": "logger.error('Error decrypting log entry:', error);",
          "type": "direct_data",
          "match": "logger.error('Error decrypting log entry:', error"
        },
        {
          "line": 112,
          "content": "logger.error('Error decrypting log entry:', error);",
          "type": "variable_data",
          "match": "logger.error('Error decrypting log entry:', error"
        },
        {
          "line": 112,
          "content": "logger.error('Error decrypting log entry:', error);",
          "type": "error_object",
          "match": "logger.error('Error decrypting log entry:', error"
        },
        {
          "line": 134,
          "content": "logger.error('Error encrypting log entries:', error);",
          "type": "direct_data",
          "match": "logger.error('Error encrypting log entries:', error"
        },
        {
          "line": 134,
          "content": "logger.error('Error encrypting log entries:', error);",
          "type": "variable_data",
          "match": "logger.error('Error encrypting log entries:', error"
        },
        {
          "line": 134,
          "content": "logger.error('Error encrypting log entries:', error);",
          "type": "error_object",
          "match": "logger.error('Error encrypting log entries:', error"
        },
        {
          "line": 154,
          "content": "logger.warn('Failed to decrypt entry, skipping:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to decrypt entry, skipping:', error.message"
        },
        {
          "line": 154,
          "content": "logger.warn('Failed to decrypt entry, skipping:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to decrypt entry, skipping"
        },
        {
          "line": 161,
          "content": "logger.error('Error decrypting log entries:', error);",
          "type": "direct_data",
          "match": "logger.error('Error decrypting log entries:', error"
        },
        {
          "line": 161,
          "content": "logger.error('Error decrypting log entries:', error);",
          "type": "variable_data",
          "match": "logger.error('Error decrypting log entries:', error"
        },
        {
          "line": 161,
          "content": "logger.error('Error decrypting log entries:', error);",
          "type": "error_object",
          "match": "logger.error('Error decrypting log entries:', error"
        },
        {
          "line": 183,
          "content": "logger.info(`Key saved to: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Key saved to: ${filePath}`"
        },
        {
          "line": 185,
          "content": "logger.error('Error saving key:', error);",
          "type": "direct_data",
          "match": "logger.error('Error saving key:', error"
        },
        {
          "line": 185,
          "content": "logger.error('Error saving key:', error);",
          "type": "variable_data",
          "match": "logger.error('Error saving key:', error"
        },
        {
          "line": 185,
          "content": "logger.error('Error saving key:', error);",
          "type": "error_object",
          "match": "logger.error('Error saving key:', error"
        },
        {
          "line": 200,
          "content": "logger.error('Error loading key:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading key:', error"
        },
        {
          "line": 200,
          "content": "logger.error('Error loading key:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading key:', error"
        },
        {
          "line": 200,
          "content": "logger.error('Error loading key:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading key:', error"
        },
        {
          "line": 218,
          "content": "logger.info(`Generated session key for: ${sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`Generated session key for: ${sessionId}`"
        },
        {
          "line": 221,
          "content": "logger.error('Error generating session key:', error);",
          "type": "direct_data",
          "match": "logger.error('Error generating session key:', error"
        },
        {
          "line": 221,
          "content": "logger.error('Error generating session key:', error);",
          "type": "variable_data",
          "match": "logger.error('Error generating session key:', error"
        },
        {
          "line": 221,
          "content": "logger.error('Error generating session key:', error);",
          "type": "error_object",
          "match": "logger.error('Error generating session key:', error"
        },
        {
          "line": 237,
          "content": "logger.error('Error loading session key:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading session key:', error"
        },
        {
          "line": 237,
          "content": "logger.error('Error loading session key:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading session key:', error"
        },
        {
          "line": 237,
          "content": "logger.error('Error loading session key:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading session key:', error"
        }
      ]
    },
    "./backend/infrastructure/logging/Logger.js": {
      "totalFindings": 26,
      "byType": {
        "direct_data": 9,
        "variable_data": 8,
        "template_data": 8,
        "object_data": 1
      },
      "findings": [
        {
          "line": 92,
          "content": "this.logger.info(message, meta);",
          "type": "direct_data",
          "match": "logger.info(message, meta"
        },
        {
          "line": 92,
          "content": "this.logger.info(message, meta);",
          "type": "variable_data",
          "match": "logger.info(message, meta"
        },
        {
          "line": 96,
          "content": "this.logger.warn(`⚠️  ${message}`, meta);",
          "type": "direct_data",
          "match": "logger.warn(`⚠️  ${message}`, meta"
        },
        {
          "line": 96,
          "content": "this.logger.warn(`⚠️  ${message}`, meta);",
          "type": "variable_data",
          "match": "logger.warn(`⚠️  ${message}`, meta"
        },
        {
          "line": 96,
          "content": "this.logger.warn(`⚠️  ${message}`, meta);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  ${message}`"
        },
        {
          "line": 100,
          "content": "this.logger.error(`❌ ${message}`, meta);",
          "type": "direct_data",
          "match": "logger.error(`❌ ${message}`, meta"
        },
        {
          "line": 100,
          "content": "this.logger.error(`❌ ${message}`, meta);",
          "type": "variable_data",
          "match": "logger.error(`❌ ${message}`, meta"
        },
        {
          "line": 100,
          "content": "this.logger.error(`❌ ${message}`, meta);",
          "type": "template_data",
          "match": "logger.error(`❌ ${message}`"
        },
        {
          "line": 106,
          "content": "this.logger.debug(`🔍 ${message}`, meta);",
          "type": "direct_data",
          "match": "logger.debug(`🔍 ${message}`, meta"
        },
        {
          "line": 106,
          "content": "this.logger.debug(`🔍 ${message}`, meta);",
          "type": "variable_data",
          "match": "logger.debug(`🔍 ${message}`, meta"
        },
        {
          "line": 106,
          "content": "this.logger.debug(`🔍 ${message}`, meta);",
          "type": "template_data",
          "match": "logger.debug(`🔍 ${message}`"
        },
        {
          "line": 112,
          "content": "this.logger.info(`✅ ${message}`, meta);",
          "type": "direct_data",
          "match": "logger.info(`✅ ${message}`, meta"
        },
        {
          "line": 112,
          "content": "this.logger.info(`✅ ${message}`, meta);",
          "type": "variable_data",
          "match": "logger.info(`✅ ${message}`, meta"
        },
        {
          "line": 112,
          "content": "this.logger.info(`✅ ${message}`, meta);",
          "type": "template_data",
          "match": "logger.info(`✅ ${message}`"
        },
        {
          "line": 117,
          "content": "this.logger.error(`💥 ${message}`, meta);",
          "type": "direct_data",
          "match": "logger.error(`💥 ${message}`, meta"
        },
        {
          "line": 117,
          "content": "this.logger.error(`💥 ${message}`, meta);",
          "type": "variable_data",
          "match": "logger.error(`💥 ${message}`, meta"
        },
        {
          "line": 117,
          "content": "this.logger.error(`💥 ${message}`, meta);",
          "type": "template_data",
          "match": "logger.error(`💥 ${message}`"
        },
        {
          "line": 140,
          "content": "this.logger.info(`${message}`, meta);",
          "type": "direct_data",
          "match": "logger.info(`${message}`, meta"
        },
        {
          "line": 140,
          "content": "this.logger.info(`${message}`, meta);",
          "type": "variable_data",
          "match": "logger.info(`${message}`, meta"
        },
        {
          "line": 140,
          "content": "this.logger.info(`${message}`, meta);",
          "type": "template_data",
          "match": "logger.info(`${message}`"
        },
        {
          "line": 145,
          "content": "this.logger.info(`👤 User Action: ${action}`, { userId, ...meta });",
          "type": "direct_data",
          "match": "logger.info(`👤 User Action: ${action}`, { userId, ...meta }"
        },
        {
          "line": 145,
          "content": "this.logger.info(`👤 User Action: ${action}`, { userId, ...meta });",
          "type": "object_data",
          "match": "logger.info(`👤 User Action: ${action}`, { userId, ...meta }"
        },
        {
          "line": 145,
          "content": "this.logger.info(`👤 User Action: ${action}`, { userId, ...meta });",
          "type": "template_data",
          "match": "logger.info(`👤 User Action: ${action}`"
        },
        {
          "line": 150,
          "content": "this.logger.info(`🔧 System Event: ${event}`, meta);",
          "type": "direct_data",
          "match": "logger.info(`🔧 System Event: ${event}`, meta"
        },
        {
          "line": 150,
          "content": "this.logger.info(`🔧 System Event: ${event}`, meta);",
          "type": "variable_data",
          "match": "logger.info(`🔧 System Event: ${event}`, meta"
        },
        {
          "line": 150,
          "content": "this.logger.info(`🔧 System Event: ${event}`, meta);",
          "type": "template_data",
          "match": "logger.info(`🔧 System Event: ${event}`"
        }
      ]
    },
    "./backend/infrastructure/logging/ServiceLogger.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 4,
        "variable_data": 4
      },
      "findings": [
        {
          "line": 26,
          "content": "this.logger.info(message, meta);",
          "type": "direct_data",
          "match": "logger.info(message, meta"
        },
        {
          "line": 26,
          "content": "this.logger.info(message, meta);",
          "type": "variable_data",
          "match": "logger.info(message, meta"
        },
        {
          "line": 34,
          "content": "this.logger.warn(message, meta);",
          "type": "direct_data",
          "match": "logger.warn(message, meta"
        },
        {
          "line": 34,
          "content": "this.logger.warn(message, meta);",
          "type": "variable_data",
          "match": "logger.warn(message, meta"
        },
        {
          "line": 42,
          "content": "this.logger.error(message, meta);",
          "type": "direct_data",
          "match": "logger.error(message, meta"
        },
        {
          "line": 42,
          "content": "this.logger.error(message, meta);",
          "type": "variable_data",
          "match": "logger.error(message, meta"
        },
        {
          "line": 50,
          "content": "this.logger.debug(message, meta);",
          "type": "direct_data",
          "match": "logger.debug(message, meta"
        },
        {
          "line": 50,
          "content": "this.logger.debug(message, meta);",
          "type": "variable_data",
          "match": "logger.debug(message, meta"
        }
      ]
    },
    "./backend/infrastructure/external/SecurityAnalyzer.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 122,
          "content": "this.logger.warn('npm audit failed, using pattern-based detection:', auditError.message);",
          "type": "direct_data",
          "match": "logger.warn('npm audit failed, using pattern-based detection:', auditError.message"
        },
        {
          "line": 122,
          "content": "this.logger.warn('npm audit failed, using pattern-based detection:', auditError.message);",
          "type": "variable_data",
          "match": "logger.warn('npm audit failed, using"
        },
        {
          "line": 158,
          "content": "this.logger.warn('Failed to analyze dependencies:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to analyze dependencies:', error.message"
        },
        {
          "line": 158,
          "content": "this.logger.warn('Failed to analyze dependencies:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to analyze dependencies:', error"
        },
        {
          "line": 158,
          "content": "this.logger.warn('Failed to analyze dependencies:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Failed to analyze dependencies:', error"
        }
      ]
    },
    "./backend/infrastructure/external/VSCodeExtensionManager.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 29,
          "content": "logger.error('Failed to initialize:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to initialize:', error"
        },
        {
          "line": 29,
          "content": "logger.error('Failed to initialize:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to initialize:', error"
        },
        {
          "line": 29,
          "content": "logger.error('Failed to initialize:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to initialize:', error"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/AnalysisService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 69,
          "content": "this.logger.error('AnalysisService: Analysis task failed', {",
          "type": "direct_data",
          "match": "logger.error('AnalysisService: Analysis task failed', {"
        },
        {
          "line": 154,
          "content": "this.logger.error('AnalysisService: Failed to generate insights', {",
          "type": "direct_data",
          "match": "logger.error('AnalysisService: Failed to generate insights', {"
        },
        {
          "line": 174,
          "content": "this.logger.info('AnalysisService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('AnalysisService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/SecurityService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 70,
          "content": "this.logger.error('SecurityService: Security task failed', {",
          "type": "direct_data",
          "match": "logger.error('SecurityService: Security task failed', {"
        },
        {
          "line": 174,
          "content": "this.logger.error('SecurityService: Failed to run automated security checks', {",
          "type": "direct_data",
          "match": "logger.error('SecurityService: Failed to run automated security checks', {"
        },
        {
          "line": 229,
          "content": "this.logger.info('SecurityService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('SecurityService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/OptimizationService.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 4
      },
      "findings": [
        {
          "line": 92,
          "content": "this.logger.error('OptimizationService: Optimization task failed', {",
          "type": "direct_data",
          "match": "logger.error('OptimizationService: Optimization task failed', {"
        },
        {
          "line": 154,
          "content": "this.logger.info('OptimizationService: Applied optimization', {",
          "type": "direct_data",
          "match": "logger.info('OptimizationService: Applied optimization', {"
        },
        {
          "line": 160,
          "content": "this.logger.error('OptimizationService: Failed to apply optimization', {",
          "type": "direct_data",
          "match": "logger.error('OptimizationService: Failed to apply optimization', {"
        },
        {
          "line": 217,
          "content": "this.logger.info('OptimizationService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('OptimizationService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/TestingService.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 7,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 68,
          "content": "this.logger.error('TestingService: Testing task failed', {",
          "type": "direct_data",
          "match": "logger.error('TestingService: Testing task failed', {"
        },
        {
          "line": 104,
          "content": "this.logger.warn('TestingService: No package.json found, skipping dependency installation');",
          "type": "direct_data",
          "match": "logger.warn('TestingService: No package.json found, skipping dependency installation'"
        },
        {
          "line": 104,
          "content": "this.logger.warn('TestingService: No package.json found, skipping dependency installation');",
          "type": "variable_data",
          "match": "logger.warn('TestingService: No package.json found, skipping"
        },
        {
          "line": 107,
          "content": "this.logger.error('TestingService: Failed to install test dependencies', {",
          "type": "direct_data",
          "match": "logger.error('TestingService: Failed to install test dependencies', {"
        },
        {
          "line": 164,
          "content": "this.logger.error('TestingService: Failed to run tests', {",
          "type": "direct_data",
          "match": "logger.error('TestingService: Failed to run tests', {"
        },
        {
          "line": 225,
          "content": "this.logger.warn('TestingService: Failed to parse test output', {",
          "type": "direct_data",
          "match": "logger.warn('TestingService: Failed to parse test output', {"
        },
        {
          "line": 286,
          "content": "this.logger.error('TestingService: Failed to analyze test results', {",
          "type": "direct_data",
          "match": "logger.error('TestingService: Failed to analyze test results', {"
        },
        {
          "line": 305,
          "content": "this.logger.info('TestingService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('TestingService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/DeploymentService.js": {
      "totalFindings": 6,
      "byType": {
        "direct_data": 6
      },
      "findings": [
        {
          "line": 76,
          "content": "this.logger.error('DeploymentService: Deployment task failed', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentService: Deployment task failed', {"
        },
        {
          "line": 130,
          "content": "this.logger.error('DeploymentService: Failed to build application', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentService: Failed to build application', {"
        },
        {
          "line": 191,
          "content": "this.logger.error('DeploymentService: Failed to run pre-deployment checks', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentService: Failed to run pre-deployment checks', {"
        },
        {
          "line": 229,
          "content": "this.logger.error('DeploymentService: Failed to deploy application', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentService: Failed to deploy application', {"
        },
        {
          "line": 276,
          "content": "this.logger.error('DeploymentService: Failed to run post-deployment checks', {",
          "type": "direct_data",
          "match": "logger.error('DeploymentService: Failed to run post-deployment checks', {"
        },
        {
          "line": 346,
          "content": "this.logger.info('DeploymentService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('DeploymentService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/ScriptService.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 71,
          "content": "this.logger.error('ScriptService: Script task failed', {",
          "type": "direct_data",
          "match": "logger.error('ScriptService: Script task failed', {"
        },
        {
          "line": 135,
          "content": "this.logger.info('ScriptService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('ScriptService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/RefactoringService.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 5
      },
      "findings": [
        {
          "line": 81,
          "content": "this.logger.error('RefactoringService: Refactoring task failed', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringService: Refactoring task failed', {"
        },
        {
          "line": 109,
          "content": "this.logger.error('RefactoringService: Failed to analyze file for refactoring', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringService: Failed to analyze file for refactoring', {"
        },
        {
          "line": 156,
          "content": "this.logger.error('RefactoringService: Failed to generate refactoring plan', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringService: Failed to generate refactoring plan', {"
        },
        {
          "line": 192,
          "content": "this.logger.error('RefactoringService: Failed to apply refactoring', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringService: Failed to apply refactoring', {"
        },
        {
          "line": 281,
          "content": "this.logger.info('RefactoringService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('RefactoringService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/services/CustomTaskService.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 64,
          "content": "this.logger.error('CustomTaskService: Custom task failed', {",
          "type": "direct_data",
          "match": "logger.error('CustomTaskService: Custom task failed', {"
        },
        {
          "line": 120,
          "content": "this.logger.error('CustomTaskService: Failed to execute custom logic', {",
          "type": "direct_data",
          "match": "logger.error('CustomTaskService: Failed to execute custom logic', {"
        },
        {
          "line": 138,
          "content": "this.logger.info('CustomTaskService: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('CustomTaskService: Progress updated', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/handlers/EventHandlers.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 9,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 19,
          "content": "this.logger.warn('EventHandlers: No event bus available, skipping event listeners');",
          "type": "direct_data",
          "match": "logger.warn('EventHandlers: No event bus available, skipping event listeners'"
        },
        {
          "line": 19,
          "content": "this.logger.warn('EventHandlers: No event bus available, skipping event listeners');",
          "type": "variable_data",
          "match": "logger.warn('EventHandlers: No event bus available, skipping"
        },
        {
          "line": 46,
          "content": "this.logger.info('EventHandlers: Execution requested', {",
          "type": "direct_data",
          "match": "logger.info('EventHandlers: Execution requested', {"
        },
        {
          "line": 64,
          "content": "this.logger.info('EventHandlers: Execution cancellation requested', {",
          "type": "direct_data",
          "match": "logger.info('EventHandlers: Execution cancellation requested', {"
        },
        {
          "line": 87,
          "content": "this.logger.warn('EventHandlers: Execution not found for cancellation', {",
          "type": "direct_data",
          "match": "logger.warn('EventHandlers: Execution not found for cancellation', {"
        },
        {
          "line": 98,
          "content": "this.logger.info('EventHandlers: Execution pause requested', {",
          "type": "direct_data",
          "match": "logger.info('EventHandlers: Execution pause requested', {"
        },
        {
          "line": 120,
          "content": "this.logger.warn('EventHandlers: Execution not found for pause', {",
          "type": "direct_data",
          "match": "logger.warn('EventHandlers: Execution not found for pause', {"
        },
        {
          "line": 131,
          "content": "this.logger.info('EventHandlers: Execution resume requested', {",
          "type": "direct_data",
          "match": "logger.info('EventHandlers: Execution resume requested', {"
        },
        {
          "line": 153,
          "content": "this.logger.warn('EventHandlers: Execution not found or not paused for resume', {",
          "type": "direct_data",
          "match": "logger.warn('EventHandlers: Execution not found or not paused for resume', {"
        },
        {
          "line": 177,
          "content": "this.logger.error('EventHandlers: Failed to execute queued task', {",
          "type": "direct_data",
          "match": "logger.error('EventHandlers: Failed to execute queued task', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/utils/FileUtils.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 46,
          "content": "this.logger.error('FileUtils: Failed to get all files', {",
          "type": "direct_data",
          "match": "logger.error('FileUtils: Failed to get all files', {"
        },
        {
          "line": 119,
          "content": "this.logger.error('FileUtils: Failed to get project structure', {",
          "type": "direct_data",
          "match": "logger.error('FileUtils: Failed to get project structure', {"
        },
        {
          "line": 144,
          "content": "this.logger.error('FileUtils: Failed to get dependency info', {",
          "type": "direct_data",
          "match": "logger.error('FileUtils: Failed to get dependency info', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/utils/ExecutionUtils.js": {
      "totalFindings": 2,
      "byType": {
        "direct_data": 2
      },
      "findings": [
        {
          "line": 30,
          "content": "this.logger.info('ExecutionUtils: Progress updated', {",
          "type": "direct_data",
          "match": "logger.info('ExecutionUtils: Progress updated', {"
        },
        {
          "line": 245,
          "content": "this.logger.error('ExecutionUtils: Failed to generate insights', {",
          "type": "direct_data",
          "match": "logger.error('ExecutionUtils: Failed to generate insights', {"
        }
      ]
    },
    "./backend/infrastructure/external/task-execution/utils/RefactoringUtils.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 39,
          "content": "this.logger.error('RefactoringUtils: Failed to analyze file for refactoring', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringUtils: Failed to analyze file for refactoring', {"
        }
      ]
    },
    "./backend/infrastructure/external/BrowserManager.js": {
      "totalFindings": 104,
      "byType": {
        "template_data": 21,
        "direct_data": 30,
        "variable_data": 29,
        "error_object": 12,
        "file_content": 6,
        "object_data": 1,
        "request_response": 2,
        "database_result": 2,
        "chat_data": 1
      },
      "findings": [
        {
          "line": 34,
          "content": "logger.info(`Connecting to Cursor IDE on port ${this.currentPort}...`);",
          "type": "template_data",
          "match": "logger.info(`Connecting to Cursor IDE on port ${this.currentPort}...`"
        },
        {
          "line": 49,
          "content": "logger.info(`Successfully connected to Cursor IDE on port ${this.currentPort}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully connected to Cursor IDE on port ${this.currentPort}`"
        },
        {
          "line": 53,
          "content": "logger.error(`Connection failed on port ${this.currentPort}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Connection failed on port ${this.currentPort}:`, error.message"
        },
        {
          "line": 53,
          "content": "logger.error(`Connection failed on port ${this.currentPort}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Connection failed on port ${this.currentPort}:`, error"
        },
        {
          "line": 53,
          "content": "logger.error(`Connection failed on port ${this.currentPort}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Connection failed on port ${this.currentPort}:`"
        },
        {
          "line": 53,
          "content": "logger.error(`Connection failed on port ${this.currentPort}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Connection failed on port ${this.currentPort}:`, error"
        },
        {
          "line": 70,
          "content": "logger.info('Page was closed, reconnecting...');",
          "type": "direct_data",
          "match": "logger.info('Page was closed, reconnecting...'"
        },
        {
          "line": 70,
          "content": "logger.info('Page was closed, reconnecting...');",
          "type": "variable_data",
          "match": "logger.info('Page was closed, reconnecting"
        },
        {
          "line": 77,
          "content": "logger.error('Error getting page:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting page:', error.message"
        },
        {
          "line": 77,
          "content": "logger.error('Error getting page:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting page:', error"
        },
        {
          "line": 77,
          "content": "logger.error('Error getting page:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting page:', error"
        },
        {
          "line": 83,
          "content": "logger.info(`Switching to port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Switching to port ${port}...`"
        },
        {
          "line": 89,
          "content": "logger.info(`Connecting to port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Connecting to port ${port}...`"
        },
        {
          "line": 159,
          "content": "logger.warn('WARN: Root-Ordner ohne Pfad, setze path auf name:', name);",
          "type": "direct_data",
          "match": "logger.warn('WARN: Root-Ordner ohne Pfad, setze path auf name:', name"
        },
        {
          "line": 159,
          "content": "logger.warn('WARN: Root-Ordner ohne Pfad, setze path auf name:', name);",
          "type": "variable_data",
          "match": "logger.warn('WARN: Root-Ordner ohne Pfad, setze"
        },
        {
          "line": 163,
          "content": "logger.warn('WARN: Leerer Pfad für', name, ariaLabel);",
          "type": "direct_data",
          "match": "logger.warn('WARN: Leerer Pfad für', name, ariaLabel"
        },
        {
          "line": 163,
          "content": "logger.warn('WARN: Leerer Pfad für', name, ariaLabel);",
          "type": "variable_data",
          "match": "logger.warn('WARN: Leerer Pfad für', name"
        },
        {
          "line": 196,
          "content": "logger.error('Error reading file explorer tree:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error reading file explorer tree:', error.message"
        },
        {
          "line": 196,
          "content": "logger.error('Error reading file explorer tree:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error reading file explorer tree:', error"
        },
        {
          "line": 196,
          "content": "logger.error('Error reading file explorer tree:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error reading file explorer tree:', error"
        },
        {
          "line": 203,
          "content": "logger.info('openFile aufgerufen mit:', filePath);",
          "type": "direct_data",
          "match": "logger.info('openFile aufgerufen mit:', filePath"
        },
        {
          "line": 203,
          "content": "logger.info('openFile aufgerufen mit:', filePath);",
          "type": "variable_data",
          "match": "logger.info('openFile aufgerufen mit:', filePath"
        },
        {
          "line": 203,
          "content": "logger.info('openFile aufgerufen mit:', filePath);",
          "type": "file_content",
          "match": "logger.info('openFile aufgerufen mit:', file"
        },
        {
          "line": 221,
          "content": "logger.debug('Available files in explorer:', debugInfo);",
          "type": "direct_data",
          "match": "logger.debug('Available files in explorer:', debugInfo"
        },
        {
          "line": 221,
          "content": "logger.debug('Available files in explorer:', debugInfo);",
          "type": "variable_data",
          "match": "logger.debug('Available files in explorer:', debugInfo"
        },
        {
          "line": 225,
          "content": "logger.info('Looking for file name:', fileName);",
          "type": "direct_data",
          "match": "logger.info('Looking for file name:', fileName"
        },
        {
          "line": 225,
          "content": "logger.info('Looking for file name:', fileName);",
          "type": "variable_data",
          "match": "logger.info('Looking for file name:', fileName"
        },
        {
          "line": 225,
          "content": "logger.info('Looking for file name:', fileName);",
          "type": "file_content",
          "match": "logger.info('Looking for file name:', file"
        },
        {
          "line": 236,
          "content": "logger.info('Checking row:', { ariaLabel, title, textContent });",
          "type": "direct_data",
          "match": "logger.info('Checking row:', { ariaLabel, title, textContent }"
        },
        {
          "line": 236,
          "content": "logger.info('Checking row:', { ariaLabel, title, textContent });",
          "type": "object_data",
          "match": "logger.info('Checking row:', { ariaLabel, title, textContent }"
        },
        {
          "line": 242,
          "content": "logger.info('Found matching file, clicking:', { ariaLabel, title, textContent });",
          "type": "direct_data",
          "match": "logger.info('Found matching file, clicking:', { ariaLabel, title, textContent }"
        },
        {
          "line": 242,
          "content": "logger.info('Found matching file, clicking:', { ariaLabel, title, textContent });",
          "type": "variable_data",
          "match": "logger.info('Found matching file, clicking"
        },
        {
          "line": 250,
          "content": "logger.error('File not found. Available files:', debugInfo);",
          "type": "direct_data",
          "match": "logger.error('File not found. Available files:', debugInfo"
        },
        {
          "line": 250,
          "content": "logger.error('File not found. Available files:', debugInfo);",
          "type": "variable_data",
          "match": "logger.error('File not found. Available files:', debugInfo"
        },
        {
          "line": 258,
          "content": "logger.info('Editor-Tab gefunden für:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Editor-Tab gefunden für:', filePath"
        },
        {
          "line": 258,
          "content": "logger.info('Editor-Tab gefunden für:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Editor-Tab gefunden für:', filePath"
        },
        {
          "line": 258,
          "content": "logger.info('Editor-Tab gefunden für:', filePath);",
          "type": "file_content",
          "match": "logger.info('Editor-Tab gefunden für:', file"
        },
        {
          "line": 260,
          "content": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', filePath);",
          "type": "direct_data",
          "match": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', filePath"
        },
        {
          "line": 260,
          "content": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', filePath);",
          "type": "variable_data",
          "match": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', filePath"
        },
        {
          "line": 260,
          "content": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', filePath);",
          "type": "file_content",
          "match": "logger.warn('WARN: Editor-Tab NICHT gefunden für:', file"
        },
        {
          "line": 265,
          "content": "logger.info(`Opened file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Opened file: ${filePath}`"
        },
        {
          "line": 268,
          "content": "logger.error(`Error opening file ${filePath}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error opening file ${filePath}:`, error.message"
        },
        {
          "line": 268,
          "content": "logger.error(`Error opening file ${filePath}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error opening file ${filePath}:`, error"
        },
        {
          "line": 268,
          "content": "logger.error(`Error opening file ${filePath}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error opening file ${filePath}:`"
        },
        {
          "line": 268,
          "content": "logger.error(`Error opening file ${filePath}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error opening file ${filePath}:`, error"
        },
        {
          "line": 394,
          "content": "logger.info('getCurrentFileContent: LOG:', result.log);",
          "type": "direct_data",
          "match": "logger.info('getCurrentFileContent: LOG:', result.log"
        },
        {
          "line": 394,
          "content": "logger.info('getCurrentFileContent: LOG:', result.log);",
          "type": "variable_data",
          "match": "logger.info('getCurrentFileContent: LOG:', result"
        },
        {
          "line": 394,
          "content": "logger.info('getCurrentFileContent: LOG:', result.log);",
          "type": "request_response",
          "match": "logger.info('getCurrentFileContent: LOG:', res"
        },
        {
          "line": 394,
          "content": "logger.info('getCurrentFileContent: LOG:', result.log);",
          "type": "database_result",
          "match": "logger.info('getCurrentFileContent: LOG:', result"
        },
        {
          "line": 395,
          "content": "logger.info('getCurrentFileContent: Content length:', result.content ? result.content.length : 0);",
          "type": "direct_data",
          "match": "logger.info('getCurrentFileContent: Content length:', result.content ? result.content.length : 0"
        },
        {
          "line": 395,
          "content": "logger.info('getCurrentFileContent: Content length:', result.content ? result.content.length : 0);",
          "type": "variable_data",
          "match": "logger.info('getCurrentFileContent: Content length:', result"
        },
        {
          "line": 395,
          "content": "logger.info('getCurrentFileContent: Content length:', result.content ? result.content.length : 0);",
          "type": "request_response",
          "match": "logger.info('getCurrentFileContent: Content length:', res"
        },
        {
          "line": 395,
          "content": "logger.info('getCurrentFileContent: Content length:', result.content ? result.content.length : 0);",
          "type": "database_result",
          "match": "logger.info('getCurrentFileContent: Content length:', result"
        },
        {
          "line": 398,
          "content": "logger.error('Error reading file content:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error reading file content:', error.message"
        },
        {
          "line": 398,
          "content": "logger.error('Error reading file content:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error reading file content:', error"
        },
        {
          "line": 398,
          "content": "logger.error('Error reading file content:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error reading file content:', error"
        },
        {
          "line": 405,
          "content": "logger.info('getFileContent aufgerufen mit:', filePath);",
          "type": "direct_data",
          "match": "logger.info('getFileContent aufgerufen mit:', filePath"
        },
        {
          "line": 405,
          "content": "logger.info('getFileContent aufgerufen mit:', filePath);",
          "type": "variable_data",
          "match": "logger.info('getFileContent aufgerufen mit:', filePath"
        },
        {
          "line": 405,
          "content": "logger.info('getFileContent aufgerufen mit:', filePath);",
          "type": "file_content",
          "match": "logger.info('getFileContent aufgerufen mit:', file"
        },
        {
          "line": 419,
          "content": "logger.info('Dateiinhalt geladen für:', filePath);",
          "type": "direct_data",
          "match": "logger.info('Dateiinhalt geladen für:', filePath"
        },
        {
          "line": 419,
          "content": "logger.info('Dateiinhalt geladen für:', filePath);",
          "type": "variable_data",
          "match": "logger.info('Dateiinhalt geladen für:', filePath"
        },
        {
          "line": 419,
          "content": "logger.info('Dateiinhalt geladen für:', filePath);",
          "type": "file_content",
          "match": "logger.info('Dateiinhalt geladen für:', file"
        },
        {
          "line": 422,
          "content": "logger.error(`Error getting file content for ${filePath}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error getting file content for ${filePath}:`, error.message"
        },
        {
          "line": 422,
          "content": "logger.error(`Error getting file content for ${filePath}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error getting file content for ${filePath}:`, error"
        },
        {
          "line": 422,
          "content": "logger.error(`Error getting file content for ${filePath}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error getting file content for ${filePath}:`"
        },
        {
          "line": 422,
          "content": "logger.error(`Error getting file content for ${filePath}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error getting file content for ${filePath}:`, error"
        },
        {
          "line": 452,
          "content": "logger.error('Error getting current file info:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting current file info:', error.message"
        },
        {
          "line": 452,
          "content": "logger.error('Error getting current file info:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting current file info:', error"
        },
        {
          "line": 452,
          "content": "logger.error('Error getting current file info:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting current file info:', error"
        },
        {
          "line": 475,
          "content": "logger.error('Error refreshing explorer:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error refreshing explorer:', error.message"
        },
        {
          "line": 475,
          "content": "logger.error('Error refreshing explorer:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error refreshing explorer:', error"
        },
        {
          "line": 475,
          "content": "logger.error('Error refreshing explorer:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error refreshing explorer:', error"
        },
        {
          "line": 533,
          "content": "logger.info(`Found New Chat button with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found New Chat button with selector: ${selector}`"
        },
        {
          "line": 539,
          "content": "logger.info(`Selector ${selector} not found, trying next...`);",
          "type": "direct_data",
          "match": "logger.info(`Selector ${selector} not found, trying next...`"
        },
        {
          "line": 539,
          "content": "logger.info(`Selector ${selector} not found, trying next...`);",
          "type": "variable_data",
          "match": "logger.info(`Selector ${selector} not found, trying"
        },
        {
          "line": 539,
          "content": "logger.info(`Selector ${selector} not found, trying next...`);",
          "type": "template_data",
          "match": "logger.info(`Selector ${selector} not found, trying next...`"
        },
        {
          "line": 555,
          "content": "logger.info(`Found add-two button with aria-label: ${ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`Found add-two button with aria-label: ${ariaLabel}`"
        },
        {
          "line": 565,
          "content": "logger.info(`Found New Chat button by text: ${ariaLabel || title || textContent}`);",
          "type": "template_data",
          "match": "logger.info(`Found New Chat button by text: ${ariaLabel || title || textContent}`"
        },
        {
          "line": 588,
          "content": "logger.info('No New Chat modal detected, continuing immediately.');",
          "type": "direct_data",
          "match": "logger.info('No New Chat modal detected, continuing immediately.'"
        },
        {
          "line": 588,
          "content": "logger.info('No New Chat modal detected, continuing immediately.');",
          "type": "variable_data",
          "match": "logger.info('No New Chat modal detected, continuing"
        },
        {
          "line": 595,
          "content": "logger.error('Error clicking New Chat button:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error clicking New Chat button:', error.message"
        },
        {
          "line": 595,
          "content": "logger.error('Error clicking New Chat button:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error clicking New Chat button:', error"
        },
        {
          "line": 595,
          "content": "logger.error('Error clicking New Chat button:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error clicking New Chat button:', error"
        },
        {
          "line": 647,
          "content": "logger.info(`Clicking New Chat modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`Clicking New Chat modal button: ${text || ariaLabel}`"
        },
        {
          "line": 663,
          "content": "logger.info(`Clicking any modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`Clicking any modal button: ${text || ariaLabel}`"
        },
        {
          "line": 677,
          "content": "logger.info(`New Chat modal handling failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`New Chat modal handling failed: ${error.message}`"
        },
        {
          "line": 694,
          "content": "logger.info(`Typing message: ${message}`);",
          "type": "template_data",
          "match": "logger.info(`Typing message: ${message}`"
        },
        {
          "line": 715,
          "content": "logger.info(`Found chat input with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found chat input with selector: ${selector}`"
        },
        {
          "line": 734,
          "content": "logger.info(`Message typed: ${message}`);",
          "type": "template_data",
          "match": "logger.info(`Message typed: ${message}`"
        },
        {
          "line": 751,
          "content": "logger.info(`Found send button with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`Found send button with selector: ${selector}`"
        },
        {
          "line": 761,
          "content": "logger.info(`Message sent: ${message}`);",
          "type": "template_data",
          "match": "logger.info(`Message sent: ${message}`"
        },
        {
          "line": 765,
          "content": "logger.info(`Message sent via Enter key: ${message}`);",
          "type": "template_data",
          "match": "logger.info(`Message sent via Enter key: ${message}`"
        },
        {
          "line": 772,
          "content": "logger.error('Error typing message:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error typing message:', error.message"
        },
        {
          "line": 772,
          "content": "logger.error('Error typing message:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error typing message:', error"
        },
        {
          "line": 772,
          "content": "logger.error('Error typing message:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error typing message:', error"
        },
        {
          "line": 796,
          "content": "logger.info('Message sent in new chat:', message);",
          "type": "direct_data",
          "match": "logger.info('Message sent in new chat:', message"
        },
        {
          "line": 796,
          "content": "logger.info('Message sent in new chat:', message);",
          "type": "variable_data",
          "match": "logger.info('Message sent in new chat:', message"
        },
        {
          "line": 796,
          "content": "logger.info('Message sent in new chat:', message);",
          "type": "chat_data",
          "match": "logger.info('Message sent in new chat:', message"
        },
        {
          "line": 805,
          "content": "logger.error('Error creating new chat:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error creating new chat:', error.message"
        },
        {
          "line": 805,
          "content": "logger.error('Error creating new chat:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error creating new chat:', error"
        },
        {
          "line": 805,
          "content": "logger.error('Error creating new chat:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error creating new chat:', error"
        },
        {
          "line": 821,
          "content": "logger.error('Health check failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Health check failed:', error.message"
        },
        {
          "line": 821,
          "content": "logger.error('Health check failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Health check failed:', error"
        },
        {
          "line": 821,
          "content": "logger.error('Health check failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Health check failed:', error"
        }
      ]
    },
    "./backend/infrastructure/external/AIService.js": {
      "totalFindings": 20,
      "byType": {
        "direct_data": 17,
        "object_data": 1,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 186,
          "content": "this.logger.debug('AIService: Using cached response', { promptType, cacheKey });",
          "type": "direct_data",
          "match": "logger.debug('AIService: Using cached response', { promptType, cacheKey }"
        },
        {
          "line": 186,
          "content": "this.logger.debug('AIService: Using cached response', { promptType, cacheKey });",
          "type": "object_data",
          "match": "logger.debug('AIService: Using cached response', { promptType, cacheKey }"
        },
        {
          "line": 202,
          "content": "this.logger.info('AIService: Sending prompt to AI', {",
          "type": "direct_data",
          "match": "logger.info('AIService: Sending prompt to AI', {"
        },
        {
          "line": 229,
          "content": "this.logger.error('AIService: Failed to send prompt', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to send prompt', {"
        },
        {
          "line": 257,
          "content": "this.logger.warn('AIService: CursorIDEService not available, returning mock response');",
          "type": "direct_data",
          "match": "logger.warn('AIService: CursorIDEService not available, returning mock response'"
        },
        {
          "line": 257,
          "content": "this.logger.warn('AIService: CursorIDEService not available, returning mock response');",
          "type": "variable_data",
          "match": "logger.warn('AIService: CursorIDEService not available, returning"
        },
        {
          "line": 271,
          "content": "this.logger.debug('AIService: Received AI response', {",
          "type": "direct_data",
          "match": "logger.debug('AIService: Received AI response', {"
        },
        {
          "line": 279,
          "content": "this.logger.error('AIService: Failed to send to Cursor IDE', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to send to Cursor IDE', {"
        },
        {
          "line": 325,
          "content": "this.logger.warn('AIService: Failed to parse structured data', {",
          "type": "direct_data",
          "match": "logger.warn('AIService: Failed to parse structured data', {"
        },
        {
          "line": 339,
          "content": "this.logger.error('AIService: Failed to parse AI response', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to parse AI response', {"
        },
        {
          "line": 439,
          "content": "this.logger.error('AIService: Failed to analyze project', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to analyze project', {"
        },
        {
          "line": 457,
          "content": "this.logger.warn('AIService: CursorIDEService not available, returning empty suggestions');",
          "type": "direct_data",
          "match": "logger.warn('AIService: CursorIDEService not available, returning empty suggestions'"
        },
        {
          "line": 457,
          "content": "this.logger.warn('AIService: CursorIDEService not available, returning empty suggestions');",
          "type": "variable_data",
          "match": "logger.warn('AIService: CursorIDEService not available, returning"
        },
        {
          "line": 484,
          "content": "this.logger.error('AIService: Failed to generate task suggestions', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to generate task suggestions', {"
        },
        {
          "line": 525,
          "content": "this.logger.error('AIService: Failed to generate script', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to generate script', {"
        },
        {
          "line": 558,
          "content": "this.logger.error('AIService: Failed to optimize code', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to optimize code', {"
        },
        {
          "line": 591,
          "content": "this.logger.error('AIService: Failed to perform security analysis', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to perform security analysis', {"
        },
        {
          "line": 625,
          "content": "this.logger.error('AIService: Failed to execute auto mode', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to execute auto mode', {"
        },
        {
          "line": 652,
          "content": "this.logger.error('AIService: Failed to get project structure', {",
          "type": "direct_data",
          "match": "logger.error('AIService: Failed to get project structure', {"
        },
        {
          "line": 676,
          "content": "this.logger.warn('AIService: Failed to scan project files', {",
          "type": "direct_data",
          "match": "logger.warn('AIService: Failed to scan project files', {"
        }
      ]
    },
    "./backend/infrastructure/external/VSCodeDetector.js": {
      "totalFindings": 13,
      "byType": {
        "direct_data": 5,
        "variable_data": 5,
        "template_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 14,
          "content": "logger.info('Scanning for VSCode instances on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "direct_data",
          "match": "logger.info('Scanning for VSCode instances on ports', this.portRange.start, 'to', this.portRange.end"
        },
        {
          "line": 14,
          "content": "logger.info('Scanning for VSCode instances on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "variable_data",
          "match": "logger.info('Scanning for VSCode instances on ports', this"
        },
        {
          "line": 37,
          "content": "logger.info('Found', availableVSCodeInstances.length, 'running VSCode instances:',",
          "type": "direct_data",
          "match": "logger.info('Found', availableVSCodeInstances.length, 'running VSCode instances:', "
        },
        {
          "line": 37,
          "content": "logger.info('Found', availableVSCodeInstances.length, 'running VSCode instances:',",
          "type": "variable_data",
          "match": "logger.info('Found', availableVSCodeInstances"
        },
        {
          "line": 66,
          "content": "logger.info(`Found VSCode on port ${port}:`, json.Browser);",
          "type": "direct_data",
          "match": "logger.info(`Found VSCode on port ${port}:`, json.Browser"
        },
        {
          "line": 66,
          "content": "logger.info(`Found VSCode on port ${port}:`, json.Browser);",
          "type": "variable_data",
          "match": "logger.info(`Found VSCode on port ${port}:`, json"
        },
        {
          "line": 66,
          "content": "logger.info(`Found VSCode on port ${port}:`, json.Browser);",
          "type": "template_data",
          "match": "logger.info(`Found VSCode on port ${port}:`"
        },
        {
          "line": 69,
          "content": "logger.info(`Port ${port} has CDP but not VSCode:`, json.Browser);",
          "type": "direct_data",
          "match": "logger.info(`Port ${port} has CDP but not VSCode:`, json.Browser"
        },
        {
          "line": 69,
          "content": "logger.info(`Port ${port} has CDP but not VSCode:`, json.Browser);",
          "type": "variable_data",
          "match": "logger.info(`Port ${port} has CDP but not VSCode:`, json"
        },
        {
          "line": 69,
          "content": "logger.info(`Port ${port} has CDP but not VSCode:`, json.Browser);",
          "type": "template_data",
          "match": "logger.info(`Port ${port} has CDP but not VSCode:`"
        },
        {
          "line": 116,
          "content": "logger.error('Error detecting VSCode extensions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error detecting VSCode extensions:', error"
        },
        {
          "line": 116,
          "content": "logger.error('Error detecting VSCode extensions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error detecting VSCode extensions:', error"
        },
        {
          "line": 116,
          "content": "logger.error('Error detecting VSCode extensions:', error);",
          "type": "error_object",
          "match": "logger.error('Error detecting VSCode extensions:', error"
        }
      ]
    },
    "./backend/infrastructure/external/IDEDetector.js": {
      "totalFindings": 2,
      "byType": {
        "template_data": 2
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.info(`Finding available port for ${ideType} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Finding available port for ${ideType} using factory`"
        },
        {
          "line": 37,
          "content": "logger.info(`Checking if port ${port} is available for ${ideType} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Checking if port ${port} is available for ${ideType} using factory`"
        }
      ]
    },
    "./backend/infrastructure/external/GitService.js": {
      "totalFindings": 42,
      "byType": {
        "direct_data": 30,
        "object_data": 11,
        "template_data": 1
      },
      "findings": [
        {
          "line": 41,
          "content": "this.logger.info('GitService: Initializing repository', { repoPath });",
          "type": "direct_data",
          "match": "logger.info('GitService: Initializing repository', { repoPath }"
        },
        {
          "line": 41,
          "content": "this.logger.info('GitService: Initializing repository', { repoPath });",
          "type": "object_data",
          "match": "logger.info('GitService: Initializing repository', { repoPath }"
        },
        {
          "line": 61,
          "content": "this.logger.error('GitService: Failed to initialize repository', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to initialize repository', {"
        },
        {
          "line": 85,
          "content": "this.logger.info('GitService: Cloning repository', { url, targetPath });",
          "type": "direct_data",
          "match": "logger.info('GitService: Cloning repository', { url, targetPath }"
        },
        {
          "line": 85,
          "content": "this.logger.info('GitService: Cloning repository', { url, targetPath });",
          "type": "object_data",
          "match": "logger.info('GitService: Cloning repository', { url, targetPath }"
        },
        {
          "line": 107,
          "content": "this.logger.error('GitService: Failed to clone repository', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to clone repository', {"
        },
        {
          "line": 128,
          "content": "this.logger.info(`Aktueller Branch für ${repoPath}: \"${branch}\"`);",
          "type": "template_data",
          "match": "logger.info(`Aktueller Branch für ${repoPath}: \"${branch}\"`"
        },
        {
          "line": 131,
          "content": "this.logger.error('GitService: Failed to get current branch', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get current branch', {"
        },
        {
          "line": 160,
          "content": "this.logger.error('GitService: Failed to get branches', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get branches', {"
        },
        {
          "line": 179,
          "content": "this.logger.info('GitService: Creating branch', { repoPath, branchName });",
          "type": "direct_data",
          "match": "logger.info('GitService: Creating branch', { repoPath, branchName }"
        },
        {
          "line": 179,
          "content": "this.logger.info('GitService: Creating branch', { repoPath, branchName });",
          "type": "object_data",
          "match": "logger.info('GitService: Creating branch', { repoPath, branchName }"
        },
        {
          "line": 199,
          "content": "this.logger.error('GitService: Failed to create branch', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to create branch', {"
        },
        {
          "line": 216,
          "content": "this.logger.info('GitService: Checking out branch', { repoPath, branchName });",
          "type": "direct_data",
          "match": "logger.info('GitService: Checking out branch', { repoPath, branchName }"
        },
        {
          "line": 216,
          "content": "this.logger.info('GitService: Checking out branch', { repoPath, branchName });",
          "type": "object_data",
          "match": "logger.info('GitService: Checking out branch', { repoPath, branchName }"
        },
        {
          "line": 233,
          "content": "this.logger.error('GitService: Failed to checkout branch', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to checkout branch', {"
        },
        {
          "line": 277,
          "content": "this.logger.error('GitService: Failed to get commit history', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get commit history', {"
        },
        {
          "line": 314,
          "content": "this.logger.error('GitService: Failed to get last commit', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get last commit', {"
        },
        {
          "line": 330,
          "content": "this.logger.info('GitService: Adding files', { repoPath, files });",
          "type": "direct_data",
          "match": "logger.info('GitService: Adding files', { repoPath, files }"
        },
        {
          "line": 330,
          "content": "this.logger.info('GitService: Adding files', { repoPath, files });",
          "type": "object_data",
          "match": "logger.info('GitService: Adding files', { repoPath, files }"
        },
        {
          "line": 354,
          "content": "this.logger.error('GitService: Failed to add files', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to add files', {"
        },
        {
          "line": 374,
          "content": "this.logger.info('GitService: Committing changes', { repoPath, message });",
          "type": "direct_data",
          "match": "logger.info('GitService: Committing changes', { repoPath, message }"
        },
        {
          "line": 374,
          "content": "this.logger.info('GitService: Committing changes', { repoPath, message });",
          "type": "object_data",
          "match": "logger.info('GitService: Committing changes', { repoPath, message }"
        },
        {
          "line": 395,
          "content": "this.logger.error('GitService: Failed to commit changes', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to commit changes', {"
        },
        {
          "line": 419,
          "content": "this.logger.info('GitService: Pushing changes', { repoPath, remote });",
          "type": "direct_data",
          "match": "logger.info('GitService: Pushing changes', { repoPath, remote }"
        },
        {
          "line": 419,
          "content": "this.logger.info('GitService: Pushing changes', { repoPath, remote });",
          "type": "object_data",
          "match": "logger.info('GitService: Pushing changes', { repoPath, remote }"
        },
        {
          "line": 442,
          "content": "this.logger.error('GitService: Failed to push changes', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to push changes', {"
        },
        {
          "line": 461,
          "content": "this.logger.info('GitService: Pulling changes', { repoPath, remote });",
          "type": "direct_data",
          "match": "logger.info('GitService: Pulling changes', { repoPath, remote }"
        },
        {
          "line": 461,
          "content": "this.logger.info('GitService: Pulling changes', { repoPath, remote });",
          "type": "object_data",
          "match": "logger.info('GitService: Pulling changes', { repoPath, remote }"
        },
        {
          "line": 483,
          "content": "this.logger.error('GitService: Failed to pull changes', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to pull changes', {"
        },
        {
          "line": 528,
          "content": "this.logger.error('GitService: Failed to get status', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get status', {"
        },
        {
          "line": 550,
          "content": "this.logger.error('GitService: Failed to get remote URL', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get remote URL', {"
        },
        {
          "line": 568,
          "content": "this.logger.info('GitService: Adding remote', { repoPath, name, url });",
          "type": "direct_data",
          "match": "logger.info('GitService: Adding remote', { repoPath, name, url }"
        },
        {
          "line": 568,
          "content": "this.logger.info('GitService: Adding remote', { repoPath, name, url });",
          "type": "object_data",
          "match": "logger.info('GitService: Adding remote', { repoPath, name, url }"
        },
        {
          "line": 586,
          "content": "this.logger.error('GitService: Failed to add remote', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to add remote', {"
        },
        {
          "line": 624,
          "content": "this.logger.error('GitService: Failed to get diff', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get diff', {"
        },
        {
          "line": 641,
          "content": "this.logger.info('GitService: Resetting repository', { repoPath, mode, commit });",
          "type": "direct_data",
          "match": "logger.info('GitService: Resetting repository', { repoPath, mode, commit }"
        },
        {
          "line": 641,
          "content": "this.logger.info('GitService: Resetting repository', { repoPath, mode, commit });",
          "type": "object_data",
          "match": "logger.info('GitService: Resetting repository', { repoPath, mode, commit }"
        },
        {
          "line": 659,
          "content": "this.logger.error('GitService: Failed to reset repository', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to reset repository', {"
        },
        {
          "line": 680,
          "content": "this.logger.info('GitService: Merging branch', { repoPath, branchName });",
          "type": "direct_data",
          "match": "logger.info('GitService: Merging branch', { repoPath, branchName }"
        },
        {
          "line": 680,
          "content": "this.logger.info('GitService: Merging branch', { repoPath, branchName });",
          "type": "object_data",
          "match": "logger.info('GitService: Merging branch', { repoPath, branchName }"
        },
        {
          "line": 701,
          "content": "this.logger.error('GitService: Failed to merge branch', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to merge branch', {"
        },
        {
          "line": 736,
          "content": "this.logger.error('GitService: Failed to get repository info', {",
          "type": "direct_data",
          "match": "logger.error('GitService: Failed to get repository info', {"
        }
      ]
    },
    "./backend/infrastructure/external/ScriptExecutor.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 5
      },
      "findings": [
        {
          "line": 35,
          "content": "this.logger.info('ScriptExecutor: Starting script execution', {",
          "type": "direct_data",
          "match": "logger.info('ScriptExecutor: Starting script execution', {"
        },
        {
          "line": 62,
          "content": "this.logger.info('ScriptExecutor: Script execution completed', {",
          "type": "direct_data",
          "match": "logger.info('ScriptExecutor: Script execution completed', {"
        },
        {
          "line": 78,
          "content": "this.logger.error('ScriptExecutor: Script execution failed', {",
          "type": "direct_data",
          "match": "logger.error('ScriptExecutor: Script execution failed', {"
        },
        {
          "line": 221,
          "content": "this.logger.warn('ScriptExecutor: Failed to cleanup temporary script', {",
          "type": "direct_data",
          "match": "logger.warn('ScriptExecutor: Failed to cleanup temporary script', {"
        },
        {
          "line": 322,
          "content": "this.logger.warn('ScriptExecutor: Failed to read package.json scripts', {",
          "type": "direct_data",
          "match": "logger.warn('ScriptExecutor: Failed to read package.json scripts', {"
        }
      ]
    },
    "./backend/infrastructure/external/DependencyAnalyzer.js": {
      "totalFindings": 3,
      "byType": {
        "template_data": 3
      },
      "findings": [
        {
          "line": 102,
          "content": "logger.info(`Found root package.json: ${packageJson.name}`);",
          "type": "template_data",
          "match": "logger.info(`Found root package.json: ${packageJson.name}`"
        },
        {
          "line": 124,
          "content": "logger.info(`Found package.json in ${dir}: ${packageJson.name}`);",
          "type": "template_data",
          "match": "logger.info(`Found package.json in ${dir}: ${packageJson.name}`"
        },
        {
          "line": 126,
          "content": "logger.error(`Failed to parse package.json in ${dir}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to parse package.json in ${dir}`"
        }
      ]
    },
    "./backend/infrastructure/external/ArchitectureAnalyzer.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 898,
          "content": "logger.error('Error reading code files:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading code files:', error"
        },
        {
          "line": 898,
          "content": "logger.error('Error reading code files:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading code files:', error"
        },
        {
          "line": 898,
          "content": "logger.error('Error reading code files:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading code files:', error"
        }
      ]
    },
    "./backend/infrastructure/external/TestFixer.js": {
      "totalFindings": 2,
      "byType": {
        "template_data": 2
      },
      "findings": [
        {
          "line": 75,
          "content": "this.logger.info(`Successfully fixed test in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Successfully fixed test in ${duration}ms`"
        },
        {
          "line": 79,
          "content": "this.logger.error(`Failed to fix test: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to fix test: ${error.message}`"
        }
      ]
    },
    "./backend/infrastructure/external/ProjectAnalyzer.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 3
      },
      "findings": [
        {
          "line": 182,
          "content": "logger.error('Error analyzing structure:', error);",
          "type": "direct_data",
          "match": "logger.error('Error analyzing structure:', error"
        },
        {
          "line": 182,
          "content": "logger.error('Error analyzing structure:', error);",
          "type": "variable_data",
          "match": "logger.error('Error analyzing structure:', error"
        },
        {
          "line": 182,
          "content": "logger.error('Error analyzing structure:', error);",
          "type": "error_object",
          "match": "logger.error('Error analyzing structure:', error"
        },
        {
          "line": 425,
          "content": "logger.error('Error detecting issues:', error);",
          "type": "direct_data",
          "match": "logger.error('Error detecting issues:', error"
        },
        {
          "line": 425,
          "content": "logger.error('Error detecting issues:', error);",
          "type": "variable_data",
          "match": "logger.error('Error detecting issues:', error"
        },
        {
          "line": 425,
          "content": "logger.error('Error detecting issues:', error);",
          "type": "error_object",
          "match": "logger.error('Error detecting issues:', error"
        },
        {
          "line": 553,
          "content": "logger.error('Error generating suggestions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error generating suggestions:', error"
        },
        {
          "line": 553,
          "content": "logger.error('Error generating suggestions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error generating suggestions:', error"
        },
        {
          "line": 553,
          "content": "logger.error('Error generating suggestions:', error);",
          "type": "error_object",
          "match": "logger.error('Error generating suggestions:', error"
        }
      ]
    },
    "./backend/infrastructure/external/VSCodeStarter.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 7,
        "variable_data": 7,
        "ide_data": 3,
        "template_data": 4,
        "error_object": 3
      },
      "findings": [
        {
          "line": 13,
          "content": "logger.info('Starting VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Starting VSCode on port', port"
        },
        {
          "line": 13,
          "content": "logger.info('Starting VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Starting VSCode on port', port"
        },
        {
          "line": 13,
          "content": "logger.info('Starting VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Starting VSCode on port', port"
        },
        {
          "line": 43,
          "content": "logger.info(`VSCode ${port} stdout received`);",
          "type": "template_data",
          "match": "logger.info(`VSCode ${port} stdout received`"
        },
        {
          "line": 47,
          "content": "logger.info(`VSCode ${port} stderr received`);",
          "type": "template_data",
          "match": "logger.info(`VSCode ${port} stderr received`"
        },
        {
          "line": 51,
          "content": "logger.info(`VSCode ${port} process closed with code ${code}`);",
          "type": "template_data",
          "match": "logger.info(`VSCode ${port} process closed with code ${code}`"
        },
        {
          "line": 56,
          "content": "logger.error(`VSCode ${port} process error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`VSCode ${port} process error:`, error"
        },
        {
          "line": 56,
          "content": "logger.error(`VSCode ${port} process error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`VSCode ${port} process error:`, error"
        },
        {
          "line": 56,
          "content": "logger.error(`VSCode ${port} process error:`, error);",
          "type": "template_data",
          "match": "logger.error(`VSCode ${port} process error:`"
        },
        {
          "line": 56,
          "content": "logger.error(`VSCode ${port} process error:`, error);",
          "type": "error_object",
          "match": "logger.error(`VSCode ${port} process error:`, error"
        },
        {
          "line": 71,
          "content": "logger.error('Failed to start VSCode:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start VSCode:', error"
        },
        {
          "line": 71,
          "content": "logger.error('Failed to start VSCode:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start VSCode:', error"
        },
        {
          "line": 71,
          "content": "logger.error('Failed to start VSCode:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start VSCode:', error"
        },
        {
          "line": 93,
          "content": "logger.info('Stopping VSCode on port', port);",
          "type": "direct_data",
          "match": "logger.info('Stopping VSCode on port', port"
        },
        {
          "line": 93,
          "content": "logger.info('Stopping VSCode on port', port);",
          "type": "variable_data",
          "match": "logger.info('Stopping VSCode on port', port"
        },
        {
          "line": 93,
          "content": "logger.info('Stopping VSCode on port', port);",
          "type": "ide_data",
          "match": "logger.info('Stopping VSCode on port', port"
        },
        {
          "line": 116,
          "content": "logger.info('VSCode stopped successfully on port', port);",
          "type": "direct_data",
          "match": "logger.info('VSCode stopped successfully on port', port"
        },
        {
          "line": 116,
          "content": "logger.info('VSCode stopped successfully on port', port);",
          "type": "variable_data",
          "match": "logger.info('VSCode stopped successfully on port', port"
        },
        {
          "line": 116,
          "content": "logger.info('VSCode stopped successfully on port', port);",
          "type": "ide_data",
          "match": "logger.info('VSCode stopped successfully on port', port"
        },
        {
          "line": 119,
          "content": "logger.error('Error stopping VSCode:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping VSCode:', error"
        },
        {
          "line": 119,
          "content": "logger.error('Error stopping VSCode:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping VSCode:', error"
        },
        {
          "line": 119,
          "content": "logger.error('Error stopping VSCode:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping VSCode:', error"
        },
        {
          "line": 125,
          "content": "logger.error('Failed to force kill VSCode:', killError);",
          "type": "direct_data",
          "match": "logger.error('Failed to force kill VSCode:', killError"
        },
        {
          "line": 125,
          "content": "logger.error('Failed to force kill VSCode:', killError);",
          "type": "variable_data",
          "match": "logger.error('Failed to force kill VSCode:', killError"
        }
      ]
    },
    "./backend/infrastructure/external/CodeQualityAnalyzer.js": {
      "totalFindings": 10,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "json_stringify": 1,
        "template_data": 1,
        "error_object": 2
      },
      "findings": [
        {
          "line": 86,
          "content": "logger.debug('DEBUG: Real metrics calculated:', JSON.stringify(realMetrics, null, 2));",
          "type": "direct_data",
          "match": "logger.debug('DEBUG: Real metrics calculated:', JSON.stringify(realMetrics, null, 2"
        },
        {
          "line": 86,
          "content": "logger.debug('DEBUG: Real metrics calculated:', JSON.stringify(realMetrics, null, 2));",
          "type": "variable_data",
          "match": "logger.debug('DEBUG: Real metrics calculated:', JSON"
        },
        {
          "line": 86,
          "content": "logger.debug('DEBUG: Real metrics calculated:', JSON.stringify(realMetrics, null, 2));",
          "type": "json_stringify",
          "match": "logger.debug('DEBUG: Real metrics calculated:', JSON.stringify"
        },
        {
          "line": 580,
          "content": "logger.error(`Error reading file ${file}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error reading file ${file}:`, error"
        },
        {
          "line": 580,
          "content": "logger.error(`Error reading file ${file}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error reading file ${file}:`, error"
        },
        {
          "line": 580,
          "content": "logger.error(`Error reading file ${file}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error reading file ${file}:`"
        },
        {
          "line": 580,
          "content": "logger.error(`Error reading file ${file}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error reading file ${file}:`, error"
        },
        {
          "line": 641,
          "content": "logger.error('Error reading code files:', error);",
          "type": "direct_data",
          "match": "logger.error('Error reading code files:', error"
        },
        {
          "line": 641,
          "content": "logger.error('Error reading code files:', error);",
          "type": "variable_data",
          "match": "logger.error('Error reading code files:', error"
        },
        {
          "line": 641,
          "content": "logger.error('Error reading code files:', error);",
          "type": "error_object",
          "match": "logger.error('Error reading code files:', error"
        }
      ]
    },
    "./backend/infrastructure/external/TaskExecutionEngine.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 137,
          "content": "this.logger.info('TaskExecutionEngine: Starting task execution', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionEngine: Starting task execution', {"
        },
        {
          "line": 205,
          "content": "this.logger.info('TaskExecutionEngine: Task execution completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionEngine: Task execution completed', {"
        },
        {
          "line": 214,
          "content": "this.logger.error('TaskExecutionEngine: Task execution failed', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionEngine: Task execution failed', {"
        }
      ]
    },
    "./backend/infrastructure/external/TechStackAnalyzer.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 62,
          "content": "logger.error('Error analyzing tech stack:', error);",
          "type": "direct_data",
          "match": "logger.error('Error analyzing tech stack:', error"
        },
        {
          "line": 62,
          "content": "logger.error('Error analyzing tech stack:', error);",
          "type": "variable_data",
          "match": "logger.error('Error analyzing tech stack:', error"
        },
        {
          "line": 62,
          "content": "logger.error('Error analyzing tech stack:', error);",
          "type": "error_object",
          "match": "logger.error('Error analyzing tech stack:', error"
        }
      ]
    },
    "./backend/infrastructure/external/AIIntegrationManager.js": {
      "totalFindings": 9,
      "byType": {
        "direct_data": 9
      },
      "findings": [
        {
          "line": 141,
          "content": "this.logger.info('AIIntegrationManager: Model selected', {",
          "type": "direct_data",
          "match": "logger.info('AIIntegrationManager: Model selected', {"
        },
        {
          "line": 152,
          "content": "this.logger.error('AIIntegrationManager: Failed to select model', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to select model', {"
        },
        {
          "line": 288,
          "content": "this.logger.error('AIIntegrationManager: Failed to process AI response', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to process AI response', {"
        },
        {
          "line": 332,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess response quality', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess response quality', {"
        },
        {
          "line": 405,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess accuracy', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess accuracy', {"
        },
        {
          "line": 465,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess relevance', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess relevance', {"
        },
        {
          "line": 544,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess completeness', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess completeness', {"
        },
        {
          "line": 597,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess coherence', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess coherence', {"
        },
        {
          "line": 644,
          "content": "this.logger.error('AIIntegrationManager: Failed to assess length', {",
          "type": "direct_data",
          "match": "logger.error('AIIntegrationManager: Failed to assess length', {"
        }
      ]
    },
    "./backend/infrastructure/external/ide/IDEConfigManager.js": {
      "totalFindings": 8,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 2
      },
      "findings": [
        {
          "line": 94,
          "content": "logger.info('No configuration file found, creating with defaults');",
          "type": "direct_data",
          "match": "logger.info('No configuration file found, creating with defaults'"
        },
        {
          "line": 94,
          "content": "logger.info('No configuration file found, creating with defaults');",
          "type": "variable_data",
          "match": "logger.info('No configuration file found, creating"
        },
        {
          "line": 99,
          "content": "logger.error('Error loading configuration:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading configuration:', error"
        },
        {
          "line": 99,
          "content": "logger.error('Error loading configuration:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading configuration:', error"
        },
        {
          "line": 99,
          "content": "logger.error('Error loading configuration:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading configuration:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Error saving configuration:', error);",
          "type": "direct_data",
          "match": "logger.error('Error saving configuration:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Error saving configuration:', error);",
          "type": "variable_data",
          "match": "logger.error('Error saving configuration:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Error saving configuration:', error);",
          "type": "error_object",
          "match": "logger.error('Error saving configuration:', error"
        }
      ]
    },
    "./backend/infrastructure/external/ide/IDEHealthMonitor.js": {
      "totalFindings": 14,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "template_data": 6,
        "error_object": 2
      },
      "findings": [
        {
          "line": 41,
          "content": "logger.warn('Could not get config, using default interval');",
          "type": "direct_data",
          "match": "logger.warn('Could not get config, using default interval'"
        },
        {
          "line": 41,
          "content": "logger.warn('Could not get config, using default interval');",
          "type": "variable_data",
          "match": "logger.warn('Could not get config, using"
        },
        {
          "line": 49,
          "content": "logger.info(`Starting health monitoring with ${this.healthCheckInterval}ms interval`);",
          "type": "template_data",
          "match": "logger.info(`Starting health monitoring with ${this.healthCheckInterval}ms interval`"
        },
        {
          "line": 99,
          "content": "logger.error(`Error checking health for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error checking health for port ${port}:`, error"
        },
        {
          "line": 99,
          "content": "logger.error(`Error checking health for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error checking health for port ${port}:`, error"
        },
        {
          "line": 99,
          "content": "logger.error(`Error checking health for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error checking health for port ${port}:`"
        },
        {
          "line": 99,
          "content": "logger.error(`Error checking health for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error checking health for port ${port}:`, error"
        },
        {
          "line": 225,
          "content": "logger.warn(`Error getting additional metrics for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.warn(`Error getting additional metrics for port ${port}:`, error"
        },
        {
          "line": 225,
          "content": "logger.warn(`Error getting additional metrics for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.warn(`Error getting additional metrics for port ${port}:`, error"
        },
        {
          "line": 225,
          "content": "logger.warn(`Error getting additional metrics for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.warn(`Error getting additional metrics for port ${port}:`"
        },
        {
          "line": 225,
          "content": "logger.warn(`Error getting additional metrics for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.warn(`Error getting additional metrics for port ${port}:`, error"
        },
        {
          "line": 367,
          "content": "logger.info(`Registered IDE ${ideType} on port ${port} for health monitoring`);",
          "type": "template_data",
          "match": "logger.info(`Registered IDE ${ideType} on port ${port} for health monitoring`"
        },
        {
          "line": 379,
          "content": "logger.info(`Unregistered IDE on port ${port} from health monitoring`);",
          "type": "template_data",
          "match": "logger.info(`Unregistered IDE on port ${port} from health monitoring`"
        },
        {
          "line": 508,
          "content": "logger.info(`Added health check for ${ideType} on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Added health check for ${ideType} on port ${port}`"
        }
      ]
    },
    "./backend/infrastructure/external/ide/detectors/WindsurfDetector.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for Windsurf IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "direct_data",
          "match": "logger.info('🔍 Scanning for Windsurf IDEs on ports', this.portRange.start, 'to', this.portRange.end"
        },
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for Windsurf IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "variable_data",
          "match": "logger.info('🔍 Scanning for Windsurf IDEs on ports', this"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running Windsurf IDEs');",
          "type": "direct_data",
          "match": "logger.info('✅ Found', availableIDEs.length, 'running Windsurf IDEs'"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running Windsurf IDEs');",
          "type": "variable_data",
          "match": "logger.info('✅ Found', availableIDEs"
        }
      ]
    },
    "./backend/infrastructure/external/ide/detectors/VSCodeDetector.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for VSCode IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "direct_data",
          "match": "logger.info('🔍 Scanning for VSCode IDEs on ports', this.portRange.start, 'to', this.portRange.end"
        },
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for VSCode IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "variable_data",
          "match": "logger.info('🔍 Scanning for VSCode IDEs on ports', this"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running VSCode IDEs');",
          "type": "direct_data",
          "match": "logger.info('✅ Found', availableIDEs.length, 'running VSCode IDEs'"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running VSCode IDEs');",
          "type": "variable_data",
          "match": "logger.info('✅ Found', availableIDEs"
        }
      ]
    },
    "./backend/infrastructure/external/ide/detectors/CursorDetector.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for Cursor IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "direct_data",
          "match": "logger.info('🔍 Scanning for Cursor IDEs on ports', this.portRange.start, 'to', this.portRange.end"
        },
        {
          "line": 30,
          "content": "logger.info('🔍 Scanning for Cursor IDEs on ports', this.portRange.start, 'to', this.portRange.end);",
          "type": "variable_data",
          "match": "logger.info('🔍 Scanning for Cursor IDEs on ports', this"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running Cursor IDEs');",
          "type": "direct_data",
          "match": "logger.info('✅ Found', availableIDEs.length, 'running Cursor IDEs'"
        },
        {
          "line": 55,
          "content": "logger.info('✅ Found', availableIDEs.length, 'running Cursor IDEs');",
          "type": "variable_data",
          "match": "logger.info('✅ Found', availableIDEs"
        }
      ]
    },
    "./backend/infrastructure/external/ide/IDEManager.js": {
      "totalFindings": 76,
      "byType": {
        "direct_data": 22,
        "variable_data": 22,
        "error_object": 4,
        "template_data": 16,
        "ide_data": 12
      },
      "findings": [
        {
          "line": 40,
          "content": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error.message"
        },
        {
          "line": 40,
          "content": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error"
        },
        {
          "line": 40,
          "content": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Could not initialize FileBasedWorkspaceDetector:', error"
        },
        {
          "line": 61,
          "content": "logger.info('Received activeIDEChanged event:', eventData);",
          "type": "direct_data",
          "match": "logger.info('Received activeIDEChanged event:', eventData"
        },
        {
          "line": 61,
          "content": "logger.info('Received activeIDEChanged event:', eventData);",
          "type": "variable_data",
          "match": "logger.info('Received activeIDEChanged event:', eventData"
        },
        {
          "line": 64,
          "content": "logger.info(`Setting active port from event: ${eventData.port}`);",
          "type": "template_data",
          "match": "logger.info(`Setting active port from event: ${eventData.port}`"
        },
        {
          "line": 66,
          "content": "logger.info(`Active port set to: ${this.activePort}`);",
          "type": "template_data",
          "match": "logger.info(`Active port set to: ${this.activePort}`"
        },
        {
          "line": 68,
          "content": "logger.error('Failed to set active port from event:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to set active port from event:', error.message"
        },
        {
          "line": 68,
          "content": "logger.error('Failed to set active port from event:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to set active port from event:', error"
        },
        {
          "line": 68,
          "content": "logger.error('Failed to set active port from event:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to set active port from event:', error"
        },
        {
          "line": 107,
          "content": "logger.info(`Port manager selected active IDE on port ${this.activePort}`);",
          "type": "template_data",
          "match": "logger.info(`Port manager selected active IDE on port ${this.activePort}`"
        },
        {
          "line": 112,
          "content": "logger.info(`Detecting workspace paths for ${existingIDEs.length} IDEs`);",
          "type": "template_data",
          "match": "logger.info(`Detecting workspace paths for ${existingIDEs.length} IDEs`"
        },
        {
          "line": 119,
          "content": "logger.info(`Detected workspace path for port ${ide.port}: ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`Detected workspace path for port ${ide.port}: ${workspacePath}`"
        },
        {
          "line": 122,
          "content": "logger.warn(`Could not detect workspace path for port ${ide.port}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Could not detect workspace path for port ${ide.port}: ${error.message}`"
        },
        {
          "line": 132,
          "content": "logger.info(`Initialization complete. Found ${existingIDEs.length} IDEs`);",
          "type": "template_data",
          "match": "logger.info(`Initialization complete. Found ${existingIDEs.length} IDEs`"
        },
        {
          "line": 134,
          "content": "logger.error('Initialization failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 134,
          "content": "logger.error('Initialization failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 134,
          "content": "logger.error('Initialization failed:', error);",
          "type": "error_object",
          "match": "logger.error('Initialization failed:', error"
        },
        {
          "line": 195,
          "content": "logger.info('Starting new', ideType, 'IDE...');",
          "type": "direct_data",
          "match": "logger.info('Starting new', ideType, 'IDE...'"
        },
        {
          "line": 195,
          "content": "logger.info('Starting new', ideType, 'IDE...');",
          "type": "variable_data",
          "match": "logger.info('Starting new', ideType"
        },
        {
          "line": 195,
          "content": "logger.info('Starting new', ideType, 'IDE...');",
          "type": "ide_data",
          "match": "logger.info('Starting new', ide"
        },
        {
          "line": 207,
          "content": "logger.info('No workspace path provided, using project root:', workspacePath);",
          "type": "direct_data",
          "match": "logger.info('No workspace path provided, using project root:', workspacePath"
        },
        {
          "line": 207,
          "content": "logger.info('No workspace path provided, using project root:', workspacePath);",
          "type": "variable_data",
          "match": "logger.info('No workspace path provided, using"
        },
        {
          "line": 237,
          "content": "logger.info('Tracked workspace path for port', availablePort, ':', workspacePath, 'IDE type:', ideType);",
          "type": "direct_data",
          "match": "logger.info('Tracked workspace path for port', availablePort, ':', workspacePath, 'IDE type:', ideType"
        },
        {
          "line": 237,
          "content": "logger.info('Tracked workspace path for port', availablePort, ':', workspacePath, 'IDE type:', ideType);",
          "type": "variable_data",
          "match": "logger.info('Tracked workspace path for port', availablePort"
        },
        {
          "line": 249,
          "content": "logger.info('New', ideType, 'IDE started on port', availablePort);",
          "type": "direct_data",
          "match": "logger.info('New', ideType, 'IDE started on port', availablePort"
        },
        {
          "line": 249,
          "content": "logger.info('New', ideType, 'IDE started on port', availablePort);",
          "type": "variable_data",
          "match": "logger.info('New', ideType"
        },
        {
          "line": 249,
          "content": "logger.info('New', ideType, 'IDE started on port', availablePort);",
          "type": "ide_data",
          "match": "logger.info('New', ide"
        },
        {
          "line": 263,
          "content": "logger.info(`Switching to IDE on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Switching to IDE on port ${port}`"
        },
        {
          "line": 288,
          "content": "logger.info(`Browser manager switched to port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Browser manager switched to port ${port}`"
        },
        {
          "line": 290,
          "content": "logger.warn('Failed to switch browser manager to port', port, ':', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Failed to switch browser manager to port', port, ':', error.message"
        },
        {
          "line": 290,
          "content": "logger.warn('Failed to switch browser manager to port', port, ':', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Failed to switch browser manager to port', port"
        },
        {
          "line": 290,
          "content": "logger.warn('Failed to switch browser manager to port', port, ':', error.message);",
          "type": "ide_data",
          "match": "logger.warn('Failed to switch browser manager to port', port"
        },
        {
          "line": 294,
          "content": "logger.info(`Successfully switched to IDE on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully switched to IDE on port ${port}`"
        },
        {
          "line": 314,
          "content": "logger.info('Stopping IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Stopping IDE on port', port"
        },
        {
          "line": 314,
          "content": "logger.info('Stopping IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Stopping IDE on port', port"
        },
        {
          "line": 314,
          "content": "logger.info('Stopping IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Stopping IDE on port', port"
        },
        {
          "line": 336,
          "content": "logger.info('Switched active IDE to port', this.activePort);",
          "type": "direct_data",
          "match": "logger.info('Switched active IDE to port', this.activePort"
        },
        {
          "line": 336,
          "content": "logger.info('Switched active IDE to port', this.activePort);",
          "type": "variable_data",
          "match": "logger.info('Switched active IDE to port', this"
        },
        {
          "line": 387,
          "content": "logger.info('Workspace path already cached for port', port, ':', this.ideWorkspaces.get(port));",
          "type": "direct_data",
          "match": "logger.info('Workspace path already cached for port', port, ':', this.ideWorkspaces.get(port"
        },
        {
          "line": 387,
          "content": "logger.info('Workspace path already cached for port', port, ':', this.ideWorkspaces.get(port));",
          "type": "variable_data",
          "match": "logger.info('Workspace path already cached for port', port"
        },
        {
          "line": 387,
          "content": "logger.info('Workspace path already cached for port', port, ':', this.ideWorkspaces.get(port));",
          "type": "ide_data",
          "match": "logger.info('Workspace path already cached for port', port"
        },
        {
          "line": 391,
          "content": "logger.info(`Starting file-based workspace detection for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Starting file-based workspace detection for port ${port}`"
        },
        {
          "line": 405,
          "content": "logger.info(`File-based detected workspace path for port ${port}: ${workspaceInfo.workspace}`);",
          "type": "template_data",
          "match": "logger.info(`File-based detected workspace path for port ${port}: ${workspaceInfo.workspace}`"
        },
        {
          "line": 414,
          "content": "logger.info('File-based detection failed for port', port, ':', error.message);",
          "type": "direct_data",
          "match": "logger.info('File-based detection failed for port', port, ':', error.message"
        },
        {
          "line": 414,
          "content": "logger.info('File-based detection failed for port', port, ':', error.message);",
          "type": "variable_data",
          "match": "logger.info('File-based detection failed for port', port"
        },
        {
          "line": 414,
          "content": "logger.info('File-based detection failed for port', port, ':', error.message);",
          "type": "ide_data",
          "match": "logger.info('File-based detection failed for port', port"
        },
        {
          "line": 418,
          "content": "logger.info('No workspace path detected for port', port);",
          "type": "direct_data",
          "match": "logger.info('No workspace path detected for port', port"
        },
        {
          "line": 418,
          "content": "logger.info('No workspace path detected for port', port);",
          "type": "variable_data",
          "match": "logger.info('No workspace path detected for port', port"
        },
        {
          "line": 418,
          "content": "logger.info('No workspace path detected for port', port);",
          "type": "ide_data",
          "match": "logger.info('No workspace path detected for port', port"
        },
        {
          "line": 421,
          "content": "logger.info('Error in workspace detection for port', port, ':', error.message);",
          "type": "direct_data",
          "match": "logger.info('Error in workspace detection for port', port, ':', error.message"
        },
        {
          "line": 421,
          "content": "logger.info('Error in workspace detection for port', port, ':', error.message);",
          "type": "variable_data",
          "match": "logger.info('Error in workspace detection for port', port"
        },
        {
          "line": 421,
          "content": "logger.info('Error in workspace detection for port', port, ':', error.message);",
          "type": "ide_data",
          "match": "logger.info('Error in workspace detection for port', port"
        },
        {
          "line": 445,
          "content": "logger.error('Error getting workspace info for port', port, ':', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting workspace info for port', port, ':', error.message"
        },
        {
          "line": 445,
          "content": "logger.error('Error getting workspace info for port', port, ':', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting workspace info for port', port"
        },
        {
          "line": 445,
          "content": "logger.error('Error getting workspace info for port', port, ':', error.message);",
          "type": "ide_data",
          "match": "logger.error('Error getting workspace info for port', port"
        },
        {
          "line": 469,
          "content": "logger.error('Error getting files list for port', port, ':', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting files list for port', port, ':', error.message"
        },
        {
          "line": 469,
          "content": "logger.error('Error getting files list for port', port, ':', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting files list for port', port"
        },
        {
          "line": 469,
          "content": "logger.error('Error getting files list for port', port, ':', error.message);",
          "type": "ide_data",
          "match": "logger.error('Error getting files list for port', port"
        },
        {
          "line": 481,
          "content": "logger.info('Waiting for IDE on port', port, 'to be ready...');",
          "type": "direct_data",
          "match": "logger.info('Waiting for IDE on port', port, 'to be ready...'"
        },
        {
          "line": 481,
          "content": "logger.info('Waiting for IDE on port', port, 'to be ready...');",
          "type": "variable_data",
          "match": "logger.info('Waiting for IDE on port', port"
        },
        {
          "line": 481,
          "content": "logger.info('Waiting for IDE on port', port, 'to be ready...');",
          "type": "ide_data",
          "match": "logger.info('Waiting for IDE on port', port"
        },
        {
          "line": 489,
          "content": "logger.info('IDE on port', port, 'is ready');",
          "type": "direct_data",
          "match": "logger.info('IDE on port', port, 'is ready'"
        },
        {
          "line": 489,
          "content": "logger.info('IDE on port', port, 'is ready');",
          "type": "variable_data",
          "match": "logger.info('IDE on port', port"
        },
        {
          "line": 489,
          "content": "logger.info('IDE on port', port, 'is ready');",
          "type": "ide_data",
          "match": "logger.info('IDE on port', port"
        },
        {
          "line": 523,
          "content": "logger.info('Active IDE no longer available, switching...');",
          "type": "direct_data",
          "match": "logger.info('Active IDE no longer available, switching...'"
        },
        {
          "line": 523,
          "content": "logger.info('Active IDE no longer available, switching...');",
          "type": "variable_data",
          "match": "logger.info('Active IDE no longer available, switching"
        },
        {
          "line": 543,
          "content": "logger.warn('No project repository available, skipping project creation');",
          "type": "direct_data",
          "match": "logger.warn('No project repository available, skipping project creation'"
        },
        {
          "line": 543,
          "content": "logger.warn('No project repository available, skipping project creation');",
          "type": "variable_data",
          "match": "logger.warn('No project repository available, skipping"
        },
        {
          "line": 554,
          "content": "logger.info(`Creating project in database: ${projectId} (${projectName}) at ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`Creating project in database: ${projectId} (${projectName}) at ${workspacePath}`"
        },
        {
          "line": 575,
          "content": "logger.info(`Project created/found in database: ${project.id}`);",
          "type": "template_data",
          "match": "logger.info(`Project created/found in database: ${project.id}`"
        },
        {
          "line": 578,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to create project in database:', error.message"
        },
        {
          "line": 578,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to create project in database:', error"
        },
        {
          "line": 578,
          "content": "logger.error('Failed to create project in database:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to create project in database:', error"
        },
        {
          "line": 658,
          "content": "logger.info(`Found active port from ideStatus: ${this.activePort}`);",
          "type": "template_data",
          "match": "logger.info(`Found active port from ideStatus: ${this.activePort}`"
        },
        {
          "line": 664,
          "content": "logger.info(`getActivePort() called, returning: ${this.activePort}`);",
          "type": "template_data",
          "match": "logger.info(`getActivePort() called, returning: ${this.activePort}`"
        }
      ]
    },
    "./backend/infrastructure/external/ide/IDEStarterFactory.js": {
      "totalFindings": 17,
      "byType": {
        "template_data": 5,
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 4
      },
      "findings": [
        {
          "line": 88,
          "content": "logger.info(`${type} IDE ${port} process closed with code ${code}`);",
          "type": "template_data",
          "match": "logger.info(`${type} IDE ${port} process closed with code ${code}`"
        },
        {
          "line": 93,
          "content": "logger.error(`${type} IDE ${port} process error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`${type} IDE ${port} process error:`, error"
        },
        {
          "line": 93,
          "content": "logger.error(`${type} IDE ${port} process error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`${type} IDE ${port} process error:`, error"
        },
        {
          "line": 93,
          "content": "logger.error(`${type} IDE ${port} process error:`, error);",
          "type": "template_data",
          "match": "logger.error(`${type} IDE ${port} process error:`"
        },
        {
          "line": 93,
          "content": "logger.error(`${type} IDE ${port} process error:`, error);",
          "type": "error_object",
          "match": "logger.error(`${type} IDE ${port} process error:`, error"
        },
        {
          "line": 106,
          "content": "logger.error(`Failed to start ${type} IDE:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to start ${type} IDE:`, error"
        },
        {
          "line": 106,
          "content": "logger.error(`Failed to start ${type} IDE:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to start ${type} IDE:`, error"
        },
        {
          "line": 106,
          "content": "logger.error(`Failed to start ${type} IDE:`, error);",
          "type": "template_data",
          "match": "logger.error(`Failed to start ${type} IDE:`"
        },
        {
          "line": 106,
          "content": "logger.error(`Failed to start ${type} IDE:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to start ${type} IDE:`, error"
        },
        {
          "line": 147,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        },
        {
          "line": 147,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        },
        {
          "line": 147,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`"
        },
        {
          "line": 147,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        },
        {
          "line": 276,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        },
        {
          "line": 276,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        },
        {
          "line": 276,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error stopping IDE on port ${port}:`"
        },
        {
          "line": 276,
          "content": "logger.error(`Error stopping IDE on port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error stopping IDE on port ${port}:`, error"
        }
      ]
    },
    "./backend/infrastructure/external/ide/starters/WindsurfStarter.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "ide_data": 2,
        "template_data": 5,
        "error_object": 3
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info('Starting Windsurf IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Starting Windsurf IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting Windsurf IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Starting Windsurf IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting Windsurf IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Starting Windsurf IDE on port', port"
        },
        {
          "line": 96,
          "content": "logger.info(`Windsurf IDE ${port} stdout received`);",
          "type": "template_data",
          "match": "logger.info(`Windsurf IDE ${port} stdout received`"
        },
        {
          "line": 100,
          "content": "logger.info(`Windsurf IDE ${port} stderr received`);",
          "type": "template_data",
          "match": "logger.info(`Windsurf IDE ${port} stderr received`"
        },
        {
          "line": 104,
          "content": "logger.info(`Windsurf IDE ${port} process closed with code ${code}`);",
          "type": "template_data",
          "match": "logger.info(`Windsurf IDE ${port} process closed with code ${code}`"
        },
        {
          "line": 108,
          "content": "logger.error(`Windsurf IDE ${port} process error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Windsurf IDE ${port} process error:`, error"
        },
        {
          "line": 108,
          "content": "logger.error(`Windsurf IDE ${port} process error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Windsurf IDE ${port} process error:`, error"
        },
        {
          "line": 108,
          "content": "logger.error(`Windsurf IDE ${port} process error:`, error);",
          "type": "template_data",
          "match": "logger.error(`Windsurf IDE ${port} process error:`"
        },
        {
          "line": 108,
          "content": "logger.error(`Windsurf IDE ${port} process error:`, error);",
          "type": "error_object",
          "match": "logger.error(`Windsurf IDE ${port} process error:`, error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start Windsurf IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start Windsurf IDE:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start Windsurf IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start Windsurf IDE:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start Windsurf IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start Windsurf IDE:', error"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping Windsurf IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Stopping Windsurf IDE on port', port"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping Windsurf IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Stopping Windsurf IDE on port', port"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping Windsurf IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Stopping Windsurf IDE on port', port"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "direct_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "variable_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "template_data",
          "match": "logger.error(`Error killing process ${pid}:`"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping Windsurf IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping Windsurf IDE:', error"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping Windsurf IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping Windsurf IDE:', error"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping Windsurf IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping Windsurf IDE:', error"
        }
      ]
    },
    "./backend/infrastructure/external/ide/starters/VSCodeStarter.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "ide_data": 2,
        "template_data": 5,
        "error_object": 3
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info('Starting VSCode IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Starting VSCode IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting VSCode IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Starting VSCode IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting VSCode IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Starting VSCode IDE on port', port"
        },
        {
          "line": 96,
          "content": "logger.info(`VSCode IDE ${port} stdout received`);",
          "type": "template_data",
          "match": "logger.info(`VSCode IDE ${port} stdout received`"
        },
        {
          "line": 100,
          "content": "logger.info(`VSCode IDE ${port} stderr received`);",
          "type": "template_data",
          "match": "logger.info(`VSCode IDE ${port} stderr received`"
        },
        {
          "line": 104,
          "content": "logger.info(`VSCode IDE ${port} process closed with code ${code}`);",
          "type": "template_data",
          "match": "logger.info(`VSCode IDE ${port} process closed with code ${code}`"
        },
        {
          "line": 108,
          "content": "logger.error(`VSCode IDE ${port} process error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`VSCode IDE ${port} process error:`, error"
        },
        {
          "line": 108,
          "content": "logger.error(`VSCode IDE ${port} process error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`VSCode IDE ${port} process error:`, error"
        },
        {
          "line": 108,
          "content": "logger.error(`VSCode IDE ${port} process error:`, error);",
          "type": "template_data",
          "match": "logger.error(`VSCode IDE ${port} process error:`"
        },
        {
          "line": 108,
          "content": "logger.error(`VSCode IDE ${port} process error:`, error);",
          "type": "error_object",
          "match": "logger.error(`VSCode IDE ${port} process error:`, error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start VSCode IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start VSCode IDE:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start VSCode IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start VSCode IDE:', error"
        },
        {
          "line": 126,
          "content": "logger.error('Failed to start VSCode IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start VSCode IDE:', error"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping VSCode IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Stopping VSCode IDE on port', port"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping VSCode IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Stopping VSCode IDE on port', port"
        },
        {
          "line": 137,
          "content": "logger.info('Stopping VSCode IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Stopping VSCode IDE on port', port"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "direct_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "variable_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 159,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "template_data",
          "match": "logger.error(`Error killing process ${pid}:`"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping VSCode IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping VSCode IDE:', error"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping VSCode IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping VSCode IDE:', error"
        },
        {
          "line": 177,
          "content": "logger.error('Error stopping VSCode IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping VSCode IDE:', error"
        }
      ]
    },
    "./backend/infrastructure/external/ide/starters/CursorStarter.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "ide_data": 2,
        "template_data": 5,
        "error_object": 3
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info('Starting Cursor IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Starting Cursor IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting Cursor IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Starting Cursor IDE on port', port"
        },
        {
          "line": 33,
          "content": "logger.info('Starting Cursor IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Starting Cursor IDE on port', port"
        },
        {
          "line": 86,
          "content": "logger.info(`Cursor IDE ${port} stdout received`);",
          "type": "template_data",
          "match": "logger.info(`Cursor IDE ${port} stdout received`"
        },
        {
          "line": 90,
          "content": "logger.info(`Cursor IDE ${port} stderr received`);",
          "type": "template_data",
          "match": "logger.info(`Cursor IDE ${port} stderr received`"
        },
        {
          "line": 94,
          "content": "logger.info(`Cursor IDE ${port} process closed with code ${code}`);",
          "type": "template_data",
          "match": "logger.info(`Cursor IDE ${port} process closed with code ${code}`"
        },
        {
          "line": 98,
          "content": "logger.error(`Cursor IDE ${port} process error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Cursor IDE ${port} process error:`, error"
        },
        {
          "line": 98,
          "content": "logger.error(`Cursor IDE ${port} process error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Cursor IDE ${port} process error:`, error"
        },
        {
          "line": 98,
          "content": "logger.error(`Cursor IDE ${port} process error:`, error);",
          "type": "template_data",
          "match": "logger.error(`Cursor IDE ${port} process error:`"
        },
        {
          "line": 98,
          "content": "logger.error(`Cursor IDE ${port} process error:`, error);",
          "type": "error_object",
          "match": "logger.error(`Cursor IDE ${port} process error:`, error"
        },
        {
          "line": 115,
          "content": "logger.error('Failed to start Cursor IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start Cursor IDE:', error"
        },
        {
          "line": 115,
          "content": "logger.error('Failed to start Cursor IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start Cursor IDE:', error"
        },
        {
          "line": 115,
          "content": "logger.error('Failed to start Cursor IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start Cursor IDE:', error"
        },
        {
          "line": 126,
          "content": "logger.info('Stopping Cursor IDE on port', port);",
          "type": "direct_data",
          "match": "logger.info('Stopping Cursor IDE on port', port"
        },
        {
          "line": 126,
          "content": "logger.info('Stopping Cursor IDE on port', port);",
          "type": "variable_data",
          "match": "logger.info('Stopping Cursor IDE on port', port"
        },
        {
          "line": 126,
          "content": "logger.info('Stopping Cursor IDE on port', port);",
          "type": "ide_data",
          "match": "logger.info('Stopping Cursor IDE on port', port"
        },
        {
          "line": 148,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "direct_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 148,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "variable_data",
          "match": "logger.error(`Error killing process ${pid}:`, killError"
        },
        {
          "line": 148,
          "content": "logger.error(`Error killing process ${pid}:`, killError);",
          "type": "template_data",
          "match": "logger.error(`Error killing process ${pid}:`"
        },
        {
          "line": 166,
          "content": "logger.error('Error stopping Cursor IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping Cursor IDE:', error"
        },
        {
          "line": 166,
          "content": "logger.error('Error stopping Cursor IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping Cursor IDE:', error"
        },
        {
          "line": 166,
          "content": "logger.error('Error stopping Cursor IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping Cursor IDE:', error"
        }
      ]
    },
    "./backend/infrastructure/external/ide/IDEDetectorFactory.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "template_data": 2,
        "error_object": 1
      },
      "findings": [
        {
          "line": 78,
          "content": "logger.error(`Error detecting ${type} IDEs:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error detecting ${type} IDEs:`, error.message"
        },
        {
          "line": 78,
          "content": "logger.error(`Error detecting ${type} IDEs:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error detecting ${type} IDEs:`, error"
        },
        {
          "line": 78,
          "content": "logger.error(`Error detecting ${type} IDEs:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error detecting ${type} IDEs:`"
        },
        {
          "line": 78,
          "content": "logger.error(`Error detecting ${type} IDEs:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error detecting ${type} IDEs:`, error"
        },
        {
          "line": 92,
          "content": "logger.info(`Detected ${allIDEs.length} IDEs total`);",
          "type": "template_data",
          "match": "logger.info(`Detected ${allIDEs.length} IDEs total`"
        }
      ]
    },
    "./backend/infrastructure/external/IDEStarter.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 5
      },
      "findings": [
        {
          "line": 12,
          "content": "logger.info(`Starting ${ideType} IDE on port ${port} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Starting ${ideType} IDE on port ${port} using factory`"
        },
        {
          "line": 17,
          "content": "logger.info(`Starting Cursor IDE on port ${port} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Starting Cursor IDE on port ${port} using factory`"
        },
        {
          "line": 22,
          "content": "logger.info(`Starting VSCode IDE on port ${port} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Starting VSCode IDE on port ${port} using factory`"
        },
        {
          "line": 27,
          "content": "logger.info(`Starting Windsurf IDE on port ${port} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Starting Windsurf IDE on port ${port} using factory`"
        },
        {
          "line": 32,
          "content": "logger.info(`Stopping ${ideType} IDE on port ${port} using factory`);",
          "type": "template_data",
          "match": "logger.info(`Stopping ${ideType} IDE on port ${port} using factory`"
        }
      ]
    },
    "./backend/infrastructure/external/TestAnalyzer.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 8
      },
      "findings": [
        {
          "line": 87,
          "content": "this.logger.info(`Found ${failingTests.length} failing tests`);",
          "type": "template_data",
          "match": "logger.info(`Found ${failingTests.length} failing tests`"
        },
        {
          "line": 91,
          "content": "this.logger.error(`Failed to analyze failing tests: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to analyze failing tests: ${error.message}`"
        },
        {
          "line": 128,
          "content": "this.logger.info(`Found ${legacyTests.length} legacy tests`);",
          "type": "template_data",
          "match": "logger.info(`Found ${legacyTests.length} legacy tests`"
        },
        {
          "line": 132,
          "content": "this.logger.error(`Failed to analyze legacy tests: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to analyze legacy tests: ${error.message}`"
        },
        {
          "line": 170,
          "content": "this.logger.info(`Found ${complexTests.length} complex tests`);",
          "type": "template_data",
          "match": "logger.info(`Found ${complexTests.length} complex tests`"
        },
        {
          "line": 174,
          "content": "this.logger.error(`Failed to analyze complex tests: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to analyze complex tests: ${error.message}`"
        },
        {
          "line": 209,
          "content": "this.logger.warn(`Test execution failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Test execution failed: ${error.message}`"
        },
        {
          "line": 275,
          "content": "this.logger.warn(`Error finding test files: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Error finding test files: ${error.message}`"
        }
      ]
    },
    "./backend/infrastructure/external/output/RefactoringOutputGenerator.js": {
      "totalFindings": 3,
      "byType": {
        "template_data": 1,
        "direct_data": 2
      },
      "findings": [
        {
          "line": 42,
          "content": "this.logger.info(`RefactoringOutputGenerator: Generated ${tasks.length} refactoring tasks`);",
          "type": "template_data",
          "match": "logger.info(`RefactoringOutputGenerator: Generated ${tasks.length} refactoring tasks`"
        },
        {
          "line": 47,
          "content": "this.logger.error('RefactoringOutputGenerator: Failed to generate tasks', {",
          "type": "direct_data",
          "match": "logger.error('RefactoringOutputGenerator: Failed to generate tasks', {"
        },
        {
          "line": 89,
          "content": "this.logger.warn('RefactoringOutputGenerator: Unknown opportunity type', {",
          "type": "direct_data",
          "match": "logger.warn('RefactoringOutputGenerator: Unknown opportunity type', {"
        }
      ]
    },
    "./backend/infrastructure/external/DockerService.js": {
      "totalFindings": 37,
      "byType": {
        "direct_data": 27,
        "object_data": 10
      },
      "findings": [
        {
          "line": 38,
          "content": "this.logger.error('DockerService: Failed to get Docker version', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to get Docker version', {"
        },
        {
          "line": 62,
          "content": "this.logger.info('DockerService: Building image', { context, tag });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Building image', { context, tag }"
        },
        {
          "line": 62,
          "content": "this.logger.info('DockerService: Building image', { context, tag });",
          "type": "object_data",
          "match": "logger.info('DockerService: Building image', { context, tag }"
        },
        {
          "line": 92,
          "content": "this.logger.error('DockerService: Failed to build image', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to build image', {"
        },
        {
          "line": 122,
          "content": "this.logger.info('DockerService: Running container', { image, name });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Running container', { image, name }"
        },
        {
          "line": 122,
          "content": "this.logger.info('DockerService: Running container', { image, name });",
          "type": "object_data",
          "match": "logger.info('DockerService: Running container', { image, name }"
        },
        {
          "line": 164,
          "content": "this.logger.error('DockerService: Failed to run container', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to run container', {"
        },
        {
          "line": 183,
          "content": "this.logger.info('DockerService: Stopping container', { container });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Stopping container', { container }"
        },
        {
          "line": 183,
          "content": "this.logger.info('DockerService: Stopping container', { container });",
          "type": "object_data",
          "match": "logger.info('DockerService: Stopping container', { container }"
        },
        {
          "line": 202,
          "content": "this.logger.error('DockerService: Failed to stop container', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to stop container', {"
        },
        {
          "line": 220,
          "content": "this.logger.info('DockerService: Removing container', { container });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Removing container', { container }"
        },
        {
          "line": 220,
          "content": "this.logger.info('DockerService: Removing container', { container });",
          "type": "object_data",
          "match": "logger.info('DockerService: Removing container', { container }"
        },
        {
          "line": 240,
          "content": "this.logger.error('DockerService: Failed to remove container', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to remove container', {"
        },
        {
          "line": 278,
          "content": "this.logger.error('DockerService: Failed to get container logs', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to get container logs', {"
        },
        {
          "line": 297,
          "content": "this.logger.info('DockerService: Executing in container', { container, command });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Executing in container', { container, command }"
        },
        {
          "line": 297,
          "content": "this.logger.info('DockerService: Executing in container', { container, command });",
          "type": "object_data",
          "match": "logger.info('DockerService: Executing in container', { container, command }"
        },
        {
          "line": 319,
          "content": "this.logger.error('DockerService: Failed to execute in container', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to execute in container', {"
        },
        {
          "line": 357,
          "content": "this.logger.error('DockerService: Failed to get container status', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to get container status', {"
        },
        {
          "line": 409,
          "content": "this.logger.error('DockerService: Failed to list containers', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to list containers', {"
        },
        {
          "line": 458,
          "content": "this.logger.error('DockerService: Failed to list images', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to list images', {"
        },
        {
          "line": 475,
          "content": "this.logger.info('DockerService: Removing image', { image });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Removing image', { image }"
        },
        {
          "line": 475,
          "content": "this.logger.info('DockerService: Removing image', { image });",
          "type": "object_data",
          "match": "logger.info('DockerService: Removing image', { image }"
        },
        {
          "line": 495,
          "content": "this.logger.error('DockerService: Failed to remove image', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to remove image', {"
        },
        {
          "line": 513,
          "content": "this.logger.info('DockerService: Pulling image', { image, tag });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Pulling image', { image, tag }"
        },
        {
          "line": 513,
          "content": "this.logger.info('DockerService: Pulling image', { image, tag });",
          "type": "object_data",
          "match": "logger.info('DockerService: Pulling image', { image, tag }"
        },
        {
          "line": 533,
          "content": "this.logger.error('DockerService: Failed to pull image', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to pull image', {"
        },
        {
          "line": 552,
          "content": "this.logger.info('DockerService: Creating network', { name });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Creating network', { name }"
        },
        {
          "line": 552,
          "content": "this.logger.info('DockerService: Creating network', { name });",
          "type": "object_data",
          "match": "logger.info('DockerService: Creating network', { name }"
        },
        {
          "line": 573,
          "content": "this.logger.error('DockerService: Failed to create network', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to create network', {"
        },
        {
          "line": 611,
          "content": "this.logger.error('DockerService: Failed to list networks', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to list networks', {"
        },
        {
          "line": 625,
          "content": "this.logger.info('DockerService: Removing network', { name });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Removing network', { name }"
        },
        {
          "line": 625,
          "content": "this.logger.info('DockerService: Removing network', { name });",
          "type": "object_data",
          "match": "logger.info('DockerService: Removing network', { name }"
        },
        {
          "line": 640,
          "content": "this.logger.error('DockerService: Failed to remove network', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to remove network', {"
        },
        {
          "line": 695,
          "content": "this.logger.error('DockerService: Failed to get system info', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to get system info', {"
        },
        {
          "line": 718,
          "content": "this.logger.info('DockerService: Pruning system', { options });",
          "type": "direct_data",
          "match": "logger.info('DockerService: Pruning system', { options }"
        },
        {
          "line": 718,
          "content": "this.logger.info('DockerService: Pruning system', { options });",
          "type": "object_data",
          "match": "logger.info('DockerService: Pruning system', { options }"
        },
        {
          "line": 741,
          "content": "this.logger.error('DockerService: Failed to prune system', {",
          "type": "direct_data",
          "match": "logger.error('DockerService: Failed to prune system', {"
        }
      ]
    },
    "./backend/infrastructure/external/CoverageAnalyzer.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 6
      },
      "findings": [
        {
          "line": 76,
          "content": "this.logger.error(`Failed to get current coverage: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to get current coverage: ${error.message}`"
        },
        {
          "line": 146,
          "content": "this.logger.warn(`Failed to generate test for ${file}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to generate test for ${file}: ${error.message}`"
        },
        {
          "line": 167,
          "content": "this.logger.info(`Coverage improvement completed: ${actualImprovement}% improvement`);",
          "type": "template_data",
          "match": "logger.info(`Coverage improvement completed: ${actualImprovement}% improvement`"
        },
        {
          "line": 171,
          "content": "this.logger.error(`Failed to improve coverage: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to improve coverage: ${error.message}`"
        },
        {
          "line": 359,
          "content": "this.logger.warn(`Could not analyze file ${filePath}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Could not analyze file ${filePath}: ${error.message}`"
        },
        {
          "line": 481,
          "content": "this.logger.error(`Failed to generate test for ${fileData.path}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`Failed to generate test for ${fileData.path}: ${error.message}`"
        }
      ]
    },
    "./backend/server.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 1
      },
      "findings": [
        {
          "line": 14,
          "content": "logger.info('SIGINT received, shutting down gracefully...');",
          "type": "direct_data",
          "match": "logger.info('SIGINT received, shutting down gracefully...'"
        },
        {
          "line": 14,
          "content": "logger.info('SIGINT received, shutting down gracefully...');",
          "type": "variable_data",
          "match": "logger.info('SIGINT received, shutting"
        },
        {
          "line": 20,
          "content": "logger.info('SIGTERM received, shutting down gracefully...');",
          "type": "direct_data",
          "match": "logger.info('SIGTERM received, shutting down gracefully...'"
        },
        {
          "line": 20,
          "content": "logger.info('SIGTERM received, shutting down gracefully...');",
          "type": "variable_data",
          "match": "logger.info('SIGTERM received, shutting"
        },
        {
          "line": 28,
          "content": "logger.error('Failed to start application:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to start application:', error"
        },
        {
          "line": 28,
          "content": "logger.error('Failed to start application:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to start application:', error"
        },
        {
          "line": 28,
          "content": "logger.error('Failed to start application:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to start application:', error"
        }
      ]
    },
    "./backend/tests/reporters/test-management-reporter.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 15
      },
      "findings": [
        {
          "line": 57,
          "content": "logger.debug(`💾 Test metadata exported to: ${exportPath}`);",
          "type": "template_data",
          "match": "logger.debug(`💾 Test metadata exported to: ${exportPath}`"
        },
        {
          "line": 76,
          "content": "logger.warn(`⚠️  Failed to register test: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  Failed to register test: ${error.message}`"
        },
        {
          "line": 114,
          "content": "logger.warn(`⚠️  Failed to process test results: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  Failed to process test results: ${error.message}`"
        },
        {
          "line": 126,
          "content": "logger.debug(`📊 Tracking ${this.testResults.length} test results...`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Tracking ${this.testResults.length} test results...`"
        },
        {
          "line": 132,
          "content": "logger.warn(`⚠️  Failed to track test results: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  Failed to track test results: ${error.message}`"
        },
        {
          "line": 147,
          "content": "logger.debug(`Total Tests: ${stats.total}`);",
          "type": "template_data",
          "match": "logger.debug(`Total Tests: ${stats.total}`"
        },
        {
          "line": 148,
          "content": "logger.info(`Passing: ${stats.passing}`);",
          "type": "template_data",
          "match": "logger.info(`Passing: ${stats.passing}`"
        },
        {
          "line": 149,
          "content": "logger.info(`Failing: ${stats.failing}`);",
          "type": "template_data",
          "match": "logger.info(`Failing: ${stats.failing}`"
        },
        {
          "line": 150,
          "content": "logger.info(`Skipped: ${stats.skipped}`);",
          "type": "template_data",
          "match": "logger.info(`Skipped: ${stats.skipped}`"
        },
        {
          "line": 151,
          "content": "logger.info(`Legacy: ${stats.legacy}`);",
          "type": "template_data",
          "match": "logger.info(`Legacy: ${stats.legacy}`"
        },
        {
          "line": 152,
          "content": "logger.info(`Average Health Score: ${stats.averageHealthScore}%`);",
          "type": "template_data",
          "match": "logger.info(`Average Health Score: ${stats.averageHealthScore}%`"
        },
        {
          "line": 157,
          "content": "logger.info(`${index + 1}. [${rec.type.toUpperCase()}] ${rec.message}`);",
          "type": "template_data",
          "match": "logger.info(`${index + 1}. [${rec.type.toUpperCase()}] ${rec.message}`"
        },
        {
          "line": 162,
          "content": "logger.warn(`⚠️  Failed to generate summary: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  Failed to generate summary: ${error.message}`"
        },
        {
          "line": 211,
          "content": "logger.debug(`📄 Test results exported to: ${filePath}`);",
          "type": "template_data",
          "match": "logger.debug(`📄 Test results exported to: ${filePath}`"
        },
        {
          "line": 213,
          "content": "logger.error(`❌ Failed to export results: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to export results: ${error.message}`"
        }
      ]
    },
    "./backend/tests/setup.js": {
      "totalFindings": 3,
      "byType": {
        "template_data": 1,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 41,
          "content": "logger.warn(`Failed to auto-register test: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Failed to auto-register test: ${error.message}`"
        },
        {
          "line": 54,
          "content": "logger.warn('TestManagementService not available, skipping test management integration');",
          "type": "direct_data",
          "match": "logger.warn('TestManagementService not available, skipping test management integration'"
        },
        {
          "line": 54,
          "content": "logger.warn('TestManagementService not available, skipping test management integration');",
          "type": "variable_data",
          "match": "logger.warn('TestManagementService not available, skipping"
        }
      ]
    },
    "./backend/tests/performance/LoadTest.test.js": {
      "totalFindings": 24,
      "byType": {
        "template_data": 16,
        "direct_data": 2,
        "variable_data": 2,
        "request_response": 2,
        "database_result": 2
      },
      "findings": [
        {
          "line": 59,
          "content": "logger.info(`Created ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`);",
          "type": "template_data",
          "match": "logger.info(`Created ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`"
        },
        {
          "line": 85,
          "content": "logger.info(`Created ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`);",
          "type": "template_data",
          "match": "logger.info(`Created ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`"
        },
        {
          "line": 113,
          "content": "logger.info(`Created ${numTasks} mixed priority tasks in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Created ${numTasks} mixed priority tasks in ${duration}ms`"
        },
        {
          "line": 151,
          "content": "logger.info(`Executed ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`);",
          "type": "template_data",
          "match": "logger.info(`Executed ${numTasks} tasks in ${duration}ms (${duration / numTasks}ms per task)`"
        },
        {
          "line": 189,
          "content": "logger.info(`Executed ${numTasks} mixed type tasks in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Executed ${numTasks} mixed type tasks in ${duration}ms`"
        },
        {
          "line": 218,
          "content": "logger.info(`Completed ${numOperations} auto mode operations in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Completed ${numOperations} auto mode operations in ${duration}ms`"
        },
        {
          "line": 247,
          "content": "logger.info(`Completed ${numOperations} mixed mode auto operations in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Completed ${numOperations} mixed mode auto operations in ${duration}ms`"
        },
        {
          "line": 284,
          "content": "logger.info(`Queried ${result.total} tasks in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Queried ${result.total} tasks in ${duration}ms`"
        },
        {
          "line": 321,
          "content": "logger.info(`Filtered ${result.tasks.length} high priority tasks in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Filtered ${result.tasks.length} high priority tasks in ${duration}ms`"
        },
        {
          "line": 348,
          "content": "logger.info(`Completed ${numRequests} AI analysis requests in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Completed ${numRequests} AI analysis requests in ${duration}ms`"
        },
        {
          "line": 375,
          "content": "logger.info(`Completed ${numRequests} multi-model AI requests in ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Completed ${numRequests} multi-model AI requests in ${duration}ms`"
        },
        {
          "line": 400,
          "content": "logger.info(`Memory usage: ${Math.round(memoryIncrease / 1024 / 1024)}MB increase`);",
          "type": "template_data",
          "match": "logger.info(`Memory usage: ${Math.round(memoryIncrease / 1024 / 1024)}MB increase`"
        },
        {
          "line": 429,
          "content": "logger.info(`Memory after cleanup: ${Math.round(memoryIncrease / 1024 / 1024)}MB increase`);",
          "type": "template_data",
          "match": "logger.info(`Memory after cleanup: ${Math.round(memoryIncrease / 1024 / 1024)}MB increase`"
        },
        {
          "line": 450,
          "content": "logger.info(`Simple query response time: ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Simple query response time: ${duration}ms`"
        },
        {
          "line": 467,
          "content": "logger.info(`Task creation response time: ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Task creation response time: ${duration}ms`"
        },
        {
          "line": 490,
          "content": "logger.info(`Task execution response time: ${duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Task execution response time: ${duration}ms`"
        },
        {
          "line": 524,
          "content": "logger.info('Scalability results:', results);",
          "type": "direct_data",
          "match": "logger.info('Scalability results:', results"
        },
        {
          "line": 524,
          "content": "logger.info('Scalability results:', results);",
          "type": "variable_data",
          "match": "logger.info('Scalability results:', results"
        },
        {
          "line": 524,
          "content": "logger.info('Scalability results:', results);",
          "type": "request_response",
          "match": "logger.info('Scalability results:', res"
        },
        {
          "line": 524,
          "content": "logger.info('Scalability results:', results);",
          "type": "database_result",
          "match": "logger.info('Scalability results:', result"
        },
        {
          "line": 558,
          "content": "logger.info('Sustained load results:', results);",
          "type": "direct_data",
          "match": "logger.info('Sustained load results:', results"
        },
        {
          "line": 558,
          "content": "logger.info('Sustained load results:', results);",
          "type": "variable_data",
          "match": "logger.info('Sustained load results:', results"
        },
        {
          "line": 558,
          "content": "logger.info('Sustained load results:', results);",
          "type": "request_response",
          "match": "logger.info('Sustained load results:', res"
        },
        {
          "line": 558,
          "content": "logger.info('Sustained load results:', results);",
          "type": "database_result",
          "match": "logger.info('Sustained load results:', result"
        }
      ]
    },
    "./backend/tests/integration/StreamingWorkflow.test.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 91,
          "content": "logger.warn('Error during streaming service cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error during streaming service cleanup:', error.message"
        },
        {
          "line": 91,
          "content": "logger.warn('Error during streaming service cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error during streaming service cleanup:', error"
        },
        {
          "line": 91,
          "content": "logger.warn('Error during streaming service cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error during streaming service cleanup:', error"
        }
      ]
    },
    "./backend/tests/integration/auto-finish/test-auto-finish.js": {
      "totalFindings": 16,
      "byType": {
        "template_data": 12,
        "direct_data": 2,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info(`   ✅ Parsed ${parsedTasks.length} tasks`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Parsed ${parsedTasks.length} tasks`"
        },
        {
          "line": 32,
          "content": "logger.info(`   Task ${index + 1}: ${task.type} - ${task.description}`);",
          "type": "template_data",
          "match": "logger.info(`   Task ${index + 1}: ${task.type} - ${task.description}`"
        },
        {
          "line": 40,
          "content": "logger.info(`   ✅ Confirmation result: ${confirmation.confirmed ? 'Confirmed' : 'Not confirmed'}`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Confirmation result: ${confirmation.confirmed ? 'Confirmed' : 'Not confirmed'}`"
        },
        {
          "line": 41,
          "content": "logger.info(`   Confidence: ${confirmation.confidence}`);",
          "type": "template_data",
          "match": "logger.info(`   Confidence: ${confirmation.confidence}`"
        },
        {
          "line": 48,
          "content": "logger.info(`   ✅ Fallback detected: ${fallback.needsUserInput ? 'Yes' : 'No'}`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Fallback detected: ${fallback.needsUserInput ? 'Yes' : 'No'}`"
        },
        {
          "line": 49,
          "content": "logger.info(`   Reason: ${fallback.reason}`);",
          "type": "template_data",
          "match": "logger.info(`   Reason: ${fallback.reason}`"
        },
        {
          "line": 62,
          "content": "logger.info(`   ✅ Sequenced ${sequencedTasks.length} tasks`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Sequenced ${sequencedTasks.length} tasks`"
        },
        {
          "line": 64,
          "content": "logger.info(`   Step ${index + 1}: ${task.description}`);",
          "type": "template_data",
          "match": "logger.info(`   Step ${index + 1}: ${task.description}`"
        },
        {
          "line": 75,
          "content": "logger.info(`   ✅ Created session: ${session.id}`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Created session: ${session.id}`"
        },
        {
          "line": 76,
          "content": "logger.info(`   Status: ${session.status}`);",
          "type": "template_data",
          "match": "logger.info(`   Status: ${session.status}`"
        },
        {
          "line": 77,
          "content": "logger.info(`   Total tasks: ${session.totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`   Total tasks: ${session.totalTasks}`"
        },
        {
          "line": 84,
          "content": "logger.info(`   Supported languages: ${supportedLanguages.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`   Supported languages: ${supportedLanguages.join(', '"
        },
        {
          "line": 84,
          "content": "logger.info(`   Supported languages: ${supportedLanguages.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`   Supported languages: ${supportedLanguages.join(', ')}`"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Test failed:', error.message"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Test failed:', error"
        }
      ]
    },
    "./backend/tests/integration/workspace/test-file-based-detection.js": {
      "totalFindings": 23,
      "byType": {
        "direct_data": 5,
        "variable_data": 5,
        "file_content": 1,
        "template_data": 10,
        "error_object": 2
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info('File Structure Status:', fileStatus);",
          "type": "direct_data",
          "match": "logger.info('File Structure Status:', fileStatus"
        },
        {
          "line": 30,
          "content": "logger.info('File Structure Status:', fileStatus);",
          "type": "variable_data",
          "match": "logger.info('File Structure Status:', fileStatus"
        },
        {
          "line": 30,
          "content": "logger.info('File Structure Status:', fileStatus);",
          "type": "file_content",
          "match": "logger.info('File Structure Status:', file"
        },
        {
          "line": 41,
          "content": "logger.info(`      Port: ${workspaceInfo.port}`);",
          "type": "template_data",
          "match": "logger.info(`      Port: ${workspaceInfo.port}`"
        },
        {
          "line": 42,
          "content": "logger.info(`      Workspace: ${workspaceInfo.workspace}`);",
          "type": "template_data",
          "match": "logger.info(`      Workspace: ${workspaceInfo.workspace}`"
        },
        {
          "line": 43,
          "content": "logger.info(`      Files count: ${workspaceInfo.files.length}`);",
          "type": "template_data",
          "match": "logger.info(`      Files count: ${workspaceInfo.files.length}`"
        },
        {
          "line": 44,
          "content": "logger.info(`      Git status: ${workspaceInfo.gitStatus ? 'Available' : 'Not available'}`);",
          "type": "template_data",
          "match": "logger.info(`      Git status: ${workspaceInfo.gitStatus ? 'Available' : 'Not available'}`"
        },
        {
          "line": 45,
          "content": "logger.info(`      Session: ${workspaceInfo.session}`);",
          "type": "template_data",
          "match": "logger.info(`      Session: ${workspaceInfo.session}`"
        },
        {
          "line": 46,
          "content": "logger.info(`      Timestamp: ${workspaceInfo.timestamp}`);",
          "type": "template_data",
          "match": "logger.info(`      Timestamp: ${workspaceInfo.timestamp}`"
        },
        {
          "line": 52,
          "content": "logger.info(`      Workspace path: ${workspacePath}`);",
          "type": "template_data",
          "match": "logger.info(`      Workspace path: ${workspacePath}`"
        },
        {
          "line": 55,
          "content": "logger.info(`      Files list (first 5): ${filesList.slice(0, 5).join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`      Files list (first 5): ${filesList.slice(0, 5).join(', ')}`"
        },
        {
          "line": 58,
          "content": "logger.info(`      Git status: ${gitStatus ? 'Available' : 'Not available'}`);",
          "type": "template_data",
          "match": "logger.info(`      Git status: ${gitStatus ? 'Available' : 'Not available'}`"
        },
        {
          "line": 67,
          "content": "logger.info(`   Custom command output: ${customOutput}`);",
          "type": "template_data",
          "match": "logger.info(`   Custom command output: ${customOutput}`"
        },
        {
          "line": 72,
          "content": "logger.info('Final File Structure Status:', finalFileStatus);",
          "type": "direct_data",
          "match": "logger.info('Final File Structure Status:', finalFileStatus"
        },
        {
          "line": 72,
          "content": "logger.info('Final File Structure Status:', finalFileStatus);",
          "type": "variable_data",
          "match": "logger.info('Final File Structure Status:', finalFileStatus"
        },
        {
          "line": 77,
          "content": "logger.info('Cache Status:', cacheStatus);",
          "type": "direct_data",
          "match": "logger.info('Cache Status:', cacheStatus"
        },
        {
          "line": 77,
          "content": "logger.info('Cache Status:', cacheStatus);",
          "type": "variable_data",
          "match": "logger.info('Cache Status:', cacheStatus"
        },
        {
          "line": 82,
          "content": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error);",
          "type": "direct_data",
          "match": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error"
        },
        {
          "line": 82,
          "content": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error);",
          "type": "variable_data",
          "match": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error"
        },
        {
          "line": 82,
          "content": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error);",
          "type": "error_object",
          "match": "logger.error('\\n❌ FILE-BASED TEST FAILED:', error"
        },
        {
          "line": 83,
          "content": "logger.error('Error details:', error.stack);",
          "type": "direct_data",
          "match": "logger.error('Error details:', error.stack"
        },
        {
          "line": 83,
          "content": "logger.error('Error details:', error.stack);",
          "type": "variable_data",
          "match": "logger.error('Error details:', error"
        },
        {
          "line": 83,
          "content": "logger.error('Error details:', error.stack);",
          "type": "error_object",
          "match": "logger.error('Error details:', error"
        }
      ]
    },
    "./backend/tests/integration/port-detection/test-port-detection.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "template_data": 8,
        "error_object": 2
      },
      "findings": [
        {
          "line": 18,
          "content": "logger.info('Available IDEs found:', availableIDEs);",
          "type": "direct_data",
          "match": "logger.info('Available IDEs found:', availableIDEs"
        },
        {
          "line": 18,
          "content": "logger.info('Available IDEs found:', availableIDEs);",
          "type": "variable_data",
          "match": "logger.info('Available IDEs found:', availableIDEs"
        },
        {
          "line": 25,
          "content": "logger.info('IDEManager available IDEs:', managerIDEs);",
          "type": "direct_data",
          "match": "logger.info('IDEManager available IDEs:', managerIDEs"
        },
        {
          "line": 25,
          "content": "logger.info('IDEManager available IDEs:', managerIDEs);",
          "type": "variable_data",
          "match": "logger.info('IDEManager available IDEs:', managerIDEs"
        },
        {
          "line": 26,
          "content": "logger.info('IDEManager active port:', manager.getActivePort());",
          "type": "direct_data",
          "match": "logger.info('IDEManager active port:', manager.getActivePort("
        },
        {
          "line": 26,
          "content": "logger.info('IDEManager active port:', manager.getActivePort());",
          "type": "variable_data",
          "match": "logger.info('IDEManager active port:', manager"
        },
        {
          "line": 32,
          "content": "logger.info('BrowserManager current port:', browserManager.getCurrentPort());",
          "type": "direct_data",
          "match": "logger.info('BrowserManager current port:', browserManager.getCurrentPort("
        },
        {
          "line": 32,
          "content": "logger.info('BrowserManager current port:', browserManager.getCurrentPort());",
          "type": "variable_data",
          "match": "logger.info('BrowserManager current port:', browserManager"
        },
        {
          "line": 39,
          "content": "logger.info(`Switching to IDE on port ${ide.port}...`);",
          "type": "template_data",
          "match": "logger.info(`Switching to IDE on port ${ide.port}...`"
        },
        {
          "line": 42,
          "content": "logger.info(`✅ Successfully switched to port ${ide.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully switched to port ${ide.port}`"
        },
        {
          "line": 43,
          "content": "logger.info(`Active port is now: ${manager.getActivePort()}`);",
          "type": "template_data",
          "match": "logger.info(`Active port is now: ${manager.getActivePort()}`"
        },
        {
          "line": 45,
          "content": "logger.info(`❌ Failed to switch to port ${ide.port}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed to switch to port ${ide.port}: ${error.message}`"
        },
        {
          "line": 55,
          "content": "logger.debug(`Attempting to connect to port ${firstIDE.port}...`);",
          "type": "template_data",
          "match": "logger.debug(`Attempting to connect to port ${firstIDE.port}...`"
        },
        {
          "line": 58,
          "content": "logger.info(`✅ Successfully connected to port ${firstIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully connected to port ${firstIDE.port}`"
        },
        {
          "line": 59,
          "content": "logger.info(`BrowserManager current port: ${browserManager.getCurrentPort()}`);",
          "type": "template_data",
          "match": "logger.info(`BrowserManager current port: ${browserManager.getCurrentPort()}`"
        },
        {
          "line": 61,
          "content": "logger.info(`❌ Failed to connect to port ${firstIDE.port}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed to connect to port ${firstIDE.port}: ${error.message}`"
        },
        {
          "line": 66,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 66,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 66,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "error_object",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 75,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 75,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 75,
          "content": "logger.error('❌ Test failed:', error);",
          "type": "error_object",
          "match": "logger.error('❌ Test failed:', error"
        }
      ]
    },
    "./backend/tests/security/SecurityTest.test.js": {
      "totalFindings": 4,
      "byType": {
        "direct_data": 2,
        "template_data": 2
      },
      "findings": [
        {
          "line": 443,
          "content": "logger.info(`Rate limiting: ${successful} successful, ${failed} rejected`);",
          "type": "direct_data",
          "match": "logger.info(`Rate limiting: ${successful} successful, ${failed} rejected`"
        },
        {
          "line": 443,
          "content": "logger.info(`Rate limiting: ${successful} successful, ${failed} rejected`);",
          "type": "template_data",
          "match": "logger.info(`Rate limiting: ${successful} successful, ${failed} rejected`"
        },
        {
          "line": 465,
          "content": "logger.info(`AI rate limiting: ${successful} successful, ${failed} rejected`);",
          "type": "direct_data",
          "match": "logger.info(`AI rate limiting: ${successful} successful, ${failed} rejected`"
        },
        {
          "line": 465,
          "content": "logger.info(`AI rate limiting: ${successful} successful, ${failed} rejected`);",
          "type": "template_data",
          "match": "logger.info(`AI rate limiting: ${successful} successful, ${failed} rejected`"
        }
      ]
    },
    "./backend/tests/unit/services/PortStreamingService.test.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 55,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error during test cleanup:', error.message"
        },
        {
          "line": 55,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error during test cleanup:', error"
        },
        {
          "line": 55,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error during test cleanup:', error"
        }
      ]
    },
    "./backend/tests/unit/services/ScreenshotStreamingService.test.js": {
      "totalFindings": 11,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 1,
        "request_response": 2,
        "database_result": 2
      },
      "findings": [
        {
          "line": 65,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('Error during test cleanup:', error.message"
        },
        {
          "line": 65,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('Error during test cleanup:', error"
        },
        {
          "line": 65,
          "content": "logger.warn('Error during test cleanup:', error.message);",
          "type": "error_object",
          "match": "logger.warn('Error during test cleanup:', error"
        },
        {
          "line": 591,
          "content": "logger.debug('Test result:', result);",
          "type": "direct_data",
          "match": "logger.debug('Test result:', result"
        },
        {
          "line": 591,
          "content": "logger.debug('Test result:', result);",
          "type": "variable_data",
          "match": "logger.debug('Test result:', result"
        },
        {
          "line": 591,
          "content": "logger.debug('Test result:', result);",
          "type": "request_response",
          "match": "logger.debug('Test result:', res"
        },
        {
          "line": 591,
          "content": "logger.debug('Test result:', result);",
          "type": "database_result",
          "match": "logger.debug('Test result:', result"
        },
        {
          "line": 633,
          "content": "logger.debug('Test result 2:', result);",
          "type": "direct_data",
          "match": "logger.debug('Test result 2:', result"
        },
        {
          "line": 633,
          "content": "logger.debug('Test result 2:', result);",
          "type": "variable_data",
          "match": "logger.debug('Test result 2:', result"
        },
        {
          "line": 633,
          "content": "logger.debug('Test result 2:', result);",
          "type": "request_response",
          "match": "logger.debug('Test result 2:', res"
        },
        {
          "line": 633,
          "content": "logger.debug('Test result 2:', result);",
          "type": "database_result",
          "match": "logger.debug('Test result 2:', result"
        }
      ]
    },
    "./backend/tests/unit/domain/services/AdvancedAnalysisService.test.js": {
      "totalFindings": 16,
      "byType": {
        "direct_data": 4,
        "variable_data": 4,
        "request_response": 4,
        "database_result": 4
      },
      "findings": [
        {
          "line": 127,
          "content": "logger.debug('Debug - Result overall:', result.overall);",
          "type": "direct_data",
          "match": "logger.debug('Debug - Result overall:', result.overall"
        },
        {
          "line": 127,
          "content": "logger.debug('Debug - Result overall:', result.overall);",
          "type": "variable_data",
          "match": "logger.debug('Debug - Result overall:', result"
        },
        {
          "line": 127,
          "content": "logger.debug('Debug - Result overall:', result.overall);",
          "type": "request_response",
          "match": "logger.debug('Debug - Result overall:', res"
        },
        {
          "line": 127,
          "content": "logger.debug('Debug - Result overall:', result.overall);",
          "type": "database_result",
          "match": "logger.debug('Debug - Result overall:', result"
        },
        {
          "line": 128,
          "content": "logger.debug('Debug - Result metrics:', result.metrics);",
          "type": "direct_data",
          "match": "logger.debug('Debug - Result metrics:', result.metrics"
        },
        {
          "line": 128,
          "content": "logger.debug('Debug - Result metrics:', result.metrics);",
          "type": "variable_data",
          "match": "logger.debug('Debug - Result metrics:', result"
        },
        {
          "line": 128,
          "content": "logger.debug('Debug - Result metrics:', result.metrics);",
          "type": "request_response",
          "match": "logger.debug('Debug - Result metrics:', res"
        },
        {
          "line": 128,
          "content": "logger.debug('Debug - Result metrics:', result.metrics);",
          "type": "database_result",
          "match": "logger.debug('Debug - Result metrics:', result"
        },
        {
          "line": 129,
          "content": "logger.debug('Debug - Layer validation overall:', result.layerValidation.overall);",
          "type": "direct_data",
          "match": "logger.debug('Debug - Layer validation overall:', result.layerValidation.overall"
        },
        {
          "line": 129,
          "content": "logger.debug('Debug - Layer validation overall:', result.layerValidation.overall);",
          "type": "variable_data",
          "match": "logger.debug('Debug - Layer validation overall:', result"
        },
        {
          "line": 129,
          "content": "logger.debug('Debug - Layer validation overall:', result.layerValidation.overall);",
          "type": "request_response",
          "match": "logger.debug('Debug - Layer validation overall:', res"
        },
        {
          "line": 129,
          "content": "logger.debug('Debug - Layer validation overall:', result.layerValidation.overall);",
          "type": "database_result",
          "match": "logger.debug('Debug - Layer validation overall:', result"
        },
        {
          "line": 130,
          "content": "logger.debug('Debug - Logic validation overall:', result.logicValidation.overall);",
          "type": "direct_data",
          "match": "logger.debug('Debug - Logic validation overall:', result.logicValidation.overall"
        },
        {
          "line": 130,
          "content": "logger.debug('Debug - Logic validation overall:', result.logicValidation.overall);",
          "type": "variable_data",
          "match": "logger.debug('Debug - Logic validation overall:', result"
        },
        {
          "line": 130,
          "content": "logger.debug('Debug - Logic validation overall:', result.logicValidation.overall);",
          "type": "request_response",
          "match": "logger.debug('Debug - Logic validation overall:', res"
        },
        {
          "line": 130,
          "content": "logger.debug('Debug - Logic validation overall:', result.logicValidation.overall);",
          "type": "database_result",
          "match": "logger.debug('Debug - Logic validation overall:', result"
        }
      ]
    },
    "./backend/config/ide-deployment.js": {
      "totalFindings": 3,
      "byType": {
        "template_data": 3
      },
      "findings": [
        {
          "line": 302,
          "content": "errors.forEach(error => logger.error(`  - ${error}`));",
          "type": "template_data",
          "match": "logger.error(`  - ${error}`"
        },
        {
          "line": 306,
          "content": "logger.info(`Configuration loaded for environment: ${NODE_ENV}`);",
          "type": "template_data",
          "match": "logger.info(`Configuration loaded for environment: ${NODE_ENV}`"
        },
        {
          "line": 385,
          "content": "logger.info(`Received ${signal}. Starting graceful shutdown...`);",
          "type": "template_data",
          "match": "logger.info(`Received ${signal}. Starting graceful shutdown...`"
        }
      ]
    },
    "./backend/presentation/websocket/TaskWebSocket.js": {
      "totalFindings": 32,
      "byType": {
        "direct_data": 32
      },
      "findings": [
        {
          "line": 100,
          "content": "this.logger.info('TaskWebSocket: Client connected', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client connected', {"
        },
        {
          "line": 117,
          "content": "this.logger.error('TaskWebSocket: Failed to handle connection', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle connection', {"
        },
        {
          "line": 146,
          "content": "this.logger.error('TaskWebSocket: Authentication failed', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Authentication failed', {"
        },
        {
          "line": 238,
          "content": "this.logger.error('TaskWebSocket: Socket error', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Socket error', {"
        },
        {
          "line": 270,
          "content": "this.logger.info('TaskWebSocket: Task subscription added', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Task subscription added', {"
        },
        {
          "line": 284,
          "content": "this.logger.error('TaskWebSocket: Failed to subscribe to task', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to subscribe to task', {"
        },
        {
          "line": 320,
          "content": "this.logger.info('TaskWebSocket: Task subscription removed', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Task subscription removed', {"
        },
        {
          "line": 334,
          "content": "this.logger.error('TaskWebSocket: Failed to unsubscribe from task', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to unsubscribe from task', {"
        },
        {
          "line": 360,
          "content": "this.logger.info('TaskWebSocket: Project subscription added', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Project subscription added', {"
        },
        {
          "line": 374,
          "content": "this.logger.error('TaskWebSocket: Failed to subscribe to project', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to subscribe to project', {"
        },
        {
          "line": 401,
          "content": "this.logger.info('TaskWebSocket: Project subscription removed', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Project subscription removed', {"
        },
        {
          "line": 415,
          "content": "this.logger.error('TaskWebSocket: Failed to unsubscribe from project', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to unsubscribe from project', {"
        },
        {
          "line": 441,
          "content": "this.logger.info('TaskWebSocket: Auto mode subscription added', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Auto mode subscription added', {"
        },
        {
          "line": 455,
          "content": "this.logger.error('TaskWebSocket: Failed to subscribe to auto mode', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to subscribe to auto mode', {"
        },
        {
          "line": 482,
          "content": "this.logger.info('TaskWebSocket: Auto mode subscription removed', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Auto mode subscription removed', {"
        },
        {
          "line": 496,
          "content": "this.logger.error('TaskWebSocket: Failed to unsubscribe from auto mode', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to unsubscribe from auto mode', {"
        },
        {
          "line": 524,
          "content": "this.logger.error('TaskWebSocket: Failed to get task status', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to get task status', {"
        },
        {
          "line": 554,
          "content": "this.logger.error('TaskWebSocket: Failed to get execution logs', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to get execution logs', {"
        },
        {
          "line": 587,
          "content": "this.logger.info('TaskWebSocket: Client disconnected', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client disconnected', {"
        },
        {
          "line": 594,
          "content": "this.logger.error('TaskWebSocket: Error handling disconnection', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Error handling disconnection', {"
        },
        {
          "line": 731,
          "content": "this.logger.info('TaskWebSocket: Client subscribed to IDE updates', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client subscribed to IDE updates', {"
        },
        {
          "line": 743,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE subscription', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE subscription', {"
        },
        {
          "line": 762,
          "content": "this.logger.info('TaskWebSocket: Client unsubscribed from IDE updates', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client unsubscribed from IDE updates', {"
        },
        {
          "line": 774,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE unsubscription', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE unsubscription', {"
        },
        {
          "line": 794,
          "content": "this.logger.info('TaskWebSocket: Client subscribed to IDE mirror updates', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client subscribed to IDE mirror updates', {"
        },
        {
          "line": 808,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE mirror subscription', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE mirror subscription', {"
        },
        {
          "line": 828,
          "content": "this.logger.info('TaskWebSocket: Client unsubscribed from IDE mirror updates', {",
          "type": "direct_data",
          "match": "logger.info('TaskWebSocket: Client unsubscribed from IDE mirror updates', {"
        },
        {
          "line": 842,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE mirror unsubscription', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE mirror unsubscription', {"
        },
        {
          "line": 867,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE status request', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE status request', {"
        },
        {
          "line": 896,
          "content": "this.logger.error('TaskWebSocket: Failed to handle IDE features request', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to handle IDE features request', {"
        },
        {
          "line": 918,
          "content": "this.logger.debug('TaskWebSocket: Event broadcasted', {",
          "type": "direct_data",
          "match": "logger.debug('TaskWebSocket: Event broadcasted', {"
        },
        {
          "line": 925,
          "content": "this.logger.error('TaskWebSocket: Failed to broadcast event', {",
          "type": "direct_data",
          "match": "logger.error('TaskWebSocket: Failed to broadcast event', {"
        }
      ]
    },
    "./backend/presentation/websocket/WebSocketManager.js": {
      "totalFindings": 42,
      "byType": {
        "direct_data": 14,
        "variable_data": 14,
        "error_object": 9,
        "template_data": 4,
        "database_result": 1
      },
      "findings": [
        {
          "line": 36,
          "content": "logger.error('WebSocket server error:', error);",
          "type": "direct_data",
          "match": "logger.error('WebSocket server error:', error"
        },
        {
          "line": 36,
          "content": "logger.error('WebSocket server error:', error);",
          "type": "variable_data",
          "match": "logger.error('WebSocket server error:', error"
        },
        {
          "line": 36,
          "content": "logger.error('WebSocket server error:', error);",
          "type": "error_object",
          "match": "logger.error('WebSocket server error:', error"
        },
        {
          "line": 78,
          "content": "logger.info(`User connected (${this.getUserConnectionCount(userId)} connections)`);",
          "type": "template_data",
          "match": "logger.info(`User connected (${this.getUserConnectionCount(userId)} connections)`"
        },
        {
          "line": 83,
          "content": "logger.debug('Total clients after anonymous connection:', this.wss.clients.size);",
          "type": "direct_data",
          "match": "logger.debug('Total clients after anonymous connection:', this.wss.clients.size"
        },
        {
          "line": 83,
          "content": "logger.debug('Total clients after anonymous connection:', this.wss.clients.size);",
          "type": "variable_data",
          "match": "logger.debug('Total clients after anonymous connection:', this"
        },
        {
          "line": 102,
          "content": "logger.error(`WebSocket error:`, error);",
          "type": "direct_data",
          "match": "logger.error(`WebSocket error:`, error"
        },
        {
          "line": 102,
          "content": "logger.error(`WebSocket error:`, error);",
          "type": "variable_data",
          "match": "logger.error(`WebSocket error:`, error"
        },
        {
          "line": 102,
          "content": "logger.error(`WebSocket error:`, error);",
          "type": "error_object",
          "match": "logger.error(`WebSocket error:`, error"
        },
        {
          "line": 117,
          "content": "logger.error('Connection setup error:', error);",
          "type": "direct_data",
          "match": "logger.error('Connection setup error:', error"
        },
        {
          "line": 117,
          "content": "logger.error('Connection setup error:', error);",
          "type": "variable_data",
          "match": "logger.error('Connection setup error:', error"
        },
        {
          "line": 117,
          "content": "logger.error('Connection setup error:', error);",
          "type": "error_object",
          "match": "logger.error('Connection setup error:', error"
        },
        {
          "line": 146,
          "content": "logger.error('Authentication error:', error);",
          "type": "direct_data",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 146,
          "content": "logger.error('Authentication error:', error);",
          "type": "variable_data",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 146,
          "content": "logger.error('Authentication error:', error);",
          "type": "error_object",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 194,
          "content": "logger.debug('Anonymous connection registered. Total connections:', this.connectionCount);",
          "type": "direct_data",
          "match": "logger.debug('Anonymous connection registered. Total connections:', this.connectionCount"
        },
        {
          "line": 194,
          "content": "logger.debug('Anonymous connection registered. Total connections:', this.connectionCount);",
          "type": "variable_data",
          "match": "logger.debug('Anonymous connection registered. Total connections:', this"
        },
        {
          "line": 198,
          "content": "logger.info(`Anonymous connection disconnected (code: ${code}, reason: ${reason})`);",
          "type": "direct_data",
          "match": "logger.info(`Anonymous connection disconnected (code: ${code}, reason: ${reason}"
        },
        {
          "line": 198,
          "content": "logger.info(`Anonymous connection disconnected (code: ${code}, reason: ${reason})`);",
          "type": "variable_data",
          "match": "logger.info(`Anonymous connection disconnected (code: ${code}, reason"
        },
        {
          "line": 198,
          "content": "logger.info(`Anonymous connection disconnected (code: ${code}, reason: ${reason})`);",
          "type": "template_data",
          "match": "logger.info(`Anonymous connection disconnected (code: ${code}, reason: ${reason})`"
        },
        {
          "line": 204,
          "content": "logger.info(`User disconnected (code: ${code}, reason: ${reason})`);",
          "type": "direct_data",
          "match": "logger.info(`User disconnected (code: ${code}, reason: ${reason}"
        },
        {
          "line": 204,
          "content": "logger.info(`User disconnected (code: ${code}, reason: ${reason})`);",
          "type": "variable_data",
          "match": "logger.info(`User disconnected (code: ${code}, reason"
        },
        {
          "line": 204,
          "content": "logger.info(`User disconnected (code: ${code}, reason: ${reason})`);",
          "type": "template_data",
          "match": "logger.info(`User disconnected (code: ${code}, reason: ${reason})`"
        },
        {
          "line": 258,
          "content": "logger.error('Message handling error:', error);",
          "type": "direct_data",
          "match": "logger.error('Message handling error:', error"
        },
        {
          "line": 258,
          "content": "logger.error('Message handling error:', error);",
          "type": "variable_data",
          "match": "logger.error('Message handling error:', error"
        },
        {
          "line": 258,
          "content": "logger.error('Message handling error:', error);",
          "type": "error_object",
          "match": "logger.error('Message handling error:', error"
        },
        {
          "line": 414,
          "content": "logger.error('Authentication error:', error);",
          "type": "direct_data",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 414,
          "content": "logger.error('Authentication error:', error);",
          "type": "variable_data",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 414,
          "content": "logger.error('Authentication error:', error);",
          "type": "error_object",
          "match": "logger.error('Authentication error:', error"
        },
        {
          "line": 490,
          "content": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data);",
          "type": "direct_data",
          "match": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data"
        },
        {
          "line": 490,
          "content": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data);",
          "type": "variable_data",
          "match": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data"
        },
        {
          "line": 490,
          "content": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data);",
          "type": "template_data",
          "match": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`"
        },
        {
          "line": 490,
          "content": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data);",
          "type": "database_result",
          "match": "logger.debug(`Broadcasting ${event} to ${this.wss.clients.size} clients:`, data"
        },
        {
          "line": 596,
          "content": "logger.error('Error sending topic message:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error sending topic message:', error.message"
        },
        {
          "line": 596,
          "content": "logger.error('Error sending topic message:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error sending topic message:', error"
        },
        {
          "line": 596,
          "content": "logger.error('Error sending topic message:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error sending topic message:', error"
        },
        {
          "line": 602,
          "content": "logger.error('Error broadcasting to topic:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error broadcasting to topic:', error.message"
        },
        {
          "line": 602,
          "content": "logger.error('Error broadcasting to topic:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error broadcasting to topic:', error"
        },
        {
          "line": 602,
          "content": "logger.error('Error broadcasting to topic:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error broadcasting to topic:', error"
        },
        {
          "line": 629,
          "content": "logger.error('Error sending frame data:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error sending frame data:', error.message"
        },
        {
          "line": 629,
          "content": "logger.error('Error sending frame data:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error sending frame data:', error"
        },
        {
          "line": 629,
          "content": "logger.error('Error sending frame data:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error sending frame data:', error"
        }
      ]
    },
    "./backend/presentation/websocket/TaskProgressTracker.js": {
      "totalFindings": 27,
      "byType": {
        "direct_data": 26,
        "object_data": 1
      },
      "findings": [
        {
          "line": 96,
          "content": "this.logger.info('TaskProgressTracker: Task execution started', {",
          "type": "direct_data",
          "match": "logger.info('TaskProgressTracker: Task execution started', {"
        },
        {
          "line": 104,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle task execution start', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle task execution start', {"
        },
        {
          "line": 155,
          "content": "this.logger.debug('TaskProgressTracker: Task progress updated', {",
          "type": "direct_data",
          "match": "logger.debug('TaskProgressTracker: Task progress updated', {"
        },
        {
          "line": 164,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle task execution progress', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle task execution progress', {"
        },
        {
          "line": 201,
          "content": "this.logger.info('TaskProgressTracker: Task execution completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskProgressTracker: Task execution completed', {"
        },
        {
          "line": 214,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle task execution complete', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle task execution complete', {"
        },
        {
          "line": 250,
          "content": "this.logger.error('TaskProgressTracker: Task execution failed', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Task execution failed', {"
        },
        {
          "line": 263,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle task execution error', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle task execution error', {"
        },
        {
          "line": 304,
          "content": "this.logger.info('TaskProgressTracker: Auto mode started', {",
          "type": "direct_data",
          "match": "logger.info('TaskProgressTracker: Auto mode started', {"
        },
        {
          "line": 312,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle auto mode start', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle auto mode start', {"
        },
        {
          "line": 357,
          "content": "this.logger.debug('TaskProgressTracker: Auto mode progress updated', {",
          "type": "direct_data",
          "match": "logger.debug('TaskProgressTracker: Auto mode progress updated', {"
        },
        {
          "line": 366,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle auto mode progress', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle auto mode progress', {"
        },
        {
          "line": 403,
          "content": "this.logger.info('TaskProgressTracker: Auto mode completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskProgressTracker: Auto mode completed', {"
        },
        {
          "line": 416,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle auto mode complete', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle auto mode complete', {"
        },
        {
          "line": 451,
          "content": "this.logger.error('TaskProgressTracker: Auto mode failed', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Auto mode failed', {"
        },
        {
          "line": 464,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle auto mode error', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle auto mode error', {"
        },
        {
          "line": 521,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle generic progress start', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle generic progress start', {"
        },
        {
          "line": 561,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle generic progress update', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle generic progress update', {"
        },
        {
          "line": 600,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle generic progress complete', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle generic progress complete', {"
        },
        {
          "line": 638,
          "content": "this.logger.error('TaskProgressTracker: Failed to handle generic progress error', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to handle generic progress error', {"
        },
        {
          "line": 669,
          "content": "this.logger.error('TaskProgressTracker: Failed to update active task progress', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to update active task progress', {"
        },
        {
          "line": 686,
          "content": "this.logger.debug('TaskProgressTracker: Cleaned up completed task', { taskId });",
          "type": "direct_data",
          "match": "logger.debug('TaskProgressTracker: Cleaned up completed task', { taskId }"
        },
        {
          "line": 686,
          "content": "this.logger.debug('TaskProgressTracker: Cleaned up completed task', { taskId });",
          "type": "object_data",
          "match": "logger.debug('TaskProgressTracker: Cleaned up completed task', { taskId }"
        },
        {
          "line": 691,
          "content": "this.logger.error('TaskProgressTracker: Failed to cleanup completed tasks', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to cleanup completed tasks', {"
        },
        {
          "line": 709,
          "content": "this.logger.error('TaskProgressTracker: Failed to save progress history', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to save progress history', {"
        },
        {
          "line": 780,
          "content": "this.logger.debug('TaskProgressTracker: Progress update broadcasted', {",
          "type": "direct_data",
          "match": "logger.debug('TaskProgressTracker: Progress update broadcasted', {"
        },
        {
          "line": 787,
          "content": "this.logger.error('TaskProgressTracker: Failed to broadcast progress update', {",
          "type": "direct_data",
          "match": "logger.error('TaskProgressTracker: Failed to broadcast progress update', {"
        }
      ]
    },
    "./backend/presentation/websocket/TaskNotificationService.js": {
      "totalFindings": 15,
      "byType": {
        "direct_data": 14,
        "object_data": 1
      },
      "findings": [
        {
          "line": 412,
          "content": "this.logger.warn('TaskNotificationService: No template found for notification type', { type });",
          "type": "direct_data",
          "match": "logger.warn('TaskNotificationService: No template found for notification type', { type }"
        },
        {
          "line": 412,
          "content": "this.logger.warn('TaskNotificationService: No template found for notification type', { type });",
          "type": "object_data",
          "match": "logger.warn('TaskNotificationService: No template found for notification type', { type }"
        },
        {
          "line": 438,
          "content": "this.logger.info('TaskNotificationService: Notification created', {",
          "type": "direct_data",
          "match": "logger.info('TaskNotificationService: Notification created', {"
        },
        {
          "line": 445,
          "content": "this.logger.error('TaskNotificationService: Failed to create notification', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to create notification', {"
        },
        {
          "line": 558,
          "content": "this.logger.error('TaskNotificationService: Failed to send notifications', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to send notifications', {"
        },
        {
          "line": 585,
          "content": "this.logger.debug('TaskNotificationService: Notification stored for user', {",
          "type": "direct_data",
          "match": "logger.debug('TaskNotificationService: Notification stored for user', {"
        },
        {
          "line": 591,
          "content": "this.logger.error('TaskNotificationService: Failed to store user notification', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to store user notification', {"
        },
        {
          "line": 624,
          "content": "this.logger.info('TaskNotificationService: User subscribed to notifications', {",
          "type": "direct_data",
          "match": "logger.info('TaskNotificationService: User subscribed to notifications', {"
        },
        {
          "line": 630,
          "content": "this.logger.error('TaskNotificationService: Failed to subscribe user', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to subscribe user', {"
        },
        {
          "line": 650,
          "content": "this.logger.info('TaskNotificationService: User unsubscribed from notifications', {",
          "type": "direct_data",
          "match": "logger.info('TaskNotificationService: User unsubscribed from notifications', {"
        },
        {
          "line": 656,
          "content": "this.logger.error('TaskNotificationService: Failed to unsubscribe user', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to unsubscribe user', {"
        },
        {
          "line": 677,
          "content": "this.logger.debug('TaskNotificationService: Notification marked as read', {",
          "type": "direct_data",
          "match": "logger.debug('TaskNotificationService: Notification marked as read', {"
        },
        {
          "line": 683,
          "content": "this.logger.error('TaskNotificationService: Failed to mark notification as read', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to mark notification as read', {"
        },
        {
          "line": 704,
          "content": "this.logger.debug('TaskNotificationService: Notification dismissed', {",
          "type": "direct_data",
          "match": "logger.debug('TaskNotificationService: Notification dismissed', {"
        },
        {
          "line": 710,
          "content": "this.logger.error('TaskNotificationService: Failed to dismiss notification', {",
          "type": "direct_data",
          "match": "logger.error('TaskNotificationService: Failed to dismiss notification', {"
        }
      ]
    },
    "./backend/presentation/api/DocumentationController.js": {
      "totalFindings": 88,
      "byType": {
        "direct_data": 82,
        "variable_data": 6
      },
      "findings": [
        {
          "line": 39,
          "content": "this.logger.info('Found IDEs for bulk analysis', {",
          "type": "direct_data",
          "match": "logger.info('Found IDEs for bulk analysis', {"
        },
        {
          "line": 52,
          "content": "this.logger.warn('Skipping IDE with invalid workspace', {",
          "type": "direct_data",
          "match": "logger.warn('Skipping IDE with invalid workspace', {"
        },
        {
          "line": 66,
          "content": "this.logger.info('Sending prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending prompt to IDE', {"
        },
        {
          "line": 87,
          "content": "this.logger.error('Failed to send prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.error('Failed to send prompt to IDE', {"
        },
        {
          "line": 112,
          "content": "this.logger.warn('Skipping failed prompt result', {",
          "type": "direct_data",
          "match": "logger.warn('Skipping failed prompt result', {"
        },
        {
          "line": 122,
          "content": "this.logger.info('Processing IDE completely', {",
          "type": "direct_data",
          "match": "logger.info('Processing IDE completely', {"
        },
        {
          "line": 135,
          "content": "this.logger.info('Successfully collected response, creating tasks', {",
          "type": "direct_data",
          "match": "logger.info('Successfully collected response, creating tasks', {"
        },
        {
          "line": 135,
          "content": "this.logger.info('Successfully collected response, creating tasks', {",
          "type": "variable_data",
          "match": "logger.info('Successfully collected response, creating"
        },
        {
          "line": 170,
          "content": "this.logger.info('Successfully processed IDE completely', {",
          "type": "direct_data",
          "match": "logger.info('Successfully processed IDE completely', {"
        },
        {
          "line": 179,
          "content": "this.logger.warn('No response found for IDE', {",
          "type": "direct_data",
          "match": "logger.warn('No response found for IDE', {"
        },
        {
          "line": 204,
          "content": "this.logger.error('Failed to process IDE completely', {",
          "type": "direct_data",
          "match": "logger.error('Failed to process IDE completely', {"
        },
        {
          "line": 245,
          "content": "this.logger.info('Bulk analysis completed', {",
          "type": "direct_data",
          "match": "logger.info('Bulk analysis completed', {"
        },
        {
          "line": 268,
          "content": "this.logger.error('Bulk documentation analysis failed', {",
          "type": "direct_data",
          "match": "logger.error('Bulk documentation analysis failed', {"
        },
        {
          "line": 285,
          "content": "this.logger.warn('No IDE manager available, using active IDE');",
          "type": "direct_data",
          "match": "logger.warn('No IDE manager available, using active IDE'"
        },
        {
          "line": 285,
          "content": "this.logger.warn('No IDE manager available, using active IDE');",
          "type": "variable_data",
          "match": "logger.warn('No IDE manager available, using"
        },
        {
          "line": 296,
          "content": "this.logger.info('Found matching IDE', {",
          "type": "direct_data",
          "match": "logger.info('Found matching IDE', {"
        },
        {
          "line": 309,
          "content": "this.logger.info('Found partial match IDE', {",
          "type": "direct_data",
          "match": "logger.info('Found partial match IDE', {"
        },
        {
          "line": 320,
          "content": "this.logger.warn('No matching IDE found, using active IDE', {",
          "type": "direct_data",
          "match": "logger.warn('No matching IDE found, using active IDE', {"
        },
        {
          "line": 320,
          "content": "this.logger.warn('No matching IDE found, using active IDE', {",
          "type": "variable_data",
          "match": "logger.warn('No matching IDE found, using"
        },
        {
          "line": 327,
          "content": "this.logger.error('Error finding project IDE', {",
          "type": "direct_data",
          "match": "logger.error('Error finding project IDE', {"
        },
        {
          "line": 344,
          "content": "this.logger.info('Starting documentation analysis', {",
          "type": "direct_data",
          "match": "logger.info('Starting documentation analysis', {"
        },
        {
          "line": 358,
          "content": "this.logger.info('Found project IDE', {",
          "type": "direct_data",
          "match": "logger.info('Found project IDE', {"
        },
        {
          "line": 367,
          "content": "this.logger.info('Switching to project IDE', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE', {"
        },
        {
          "line": 409,
          "content": "this.logger.info('Sending documentation analysis prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending documentation analysis prompt to IDE', {"
        },
        {
          "line": 420,
          "content": "this.logger.info('Received AI response', {",
          "type": "direct_data",
          "match": "logger.info('Received AI response', {"
        },
        {
          "line": 436,
          "content": "this.logger.info('Created and executed tasks from analysis', {",
          "type": "direct_data",
          "match": "logger.info('Created and executed tasks from analysis', {"
        },
        {
          "line": 460,
          "content": "this.logger.error('Documentation analysis failed', {",
          "type": "direct_data",
          "match": "logger.error('Documentation analysis failed', {"
        },
        {
          "line": 477,
          "content": "this.logger.info('Processing analysis response', {",
          "type": "direct_data",
          "match": "logger.info('Processing analysis response', {"
        },
        {
          "line": 500,
          "content": "this.logger.error('Failed to process analysis', {",
          "type": "direct_data",
          "match": "logger.error('Failed to process analysis', {"
        },
        {
          "line": 521,
          "content": "this.logger.info('DEBUG: Full AI response text', {",
          "type": "direct_data",
          "match": "logger.info('DEBUG: Full AI response text', {"
        },
        {
          "line": 552,
          "content": "this.logger.warn('Complex regex failed, using simple fallback');",
          "type": "direct_data",
          "match": "logger.warn('Complex regex failed, using simple fallback'"
        },
        {
          "line": 552,
          "content": "this.logger.warn('Complex regex failed, using simple fallback');",
          "type": "variable_data",
          "match": "logger.warn('Complex regex failed, using"
        },
        {
          "line": 577,
          "content": "this.logger.info('Extracted tasks from analysis', {",
          "type": "direct_data",
          "match": "logger.info('Extracted tasks from analysis', {"
        },
        {
          "line": 612,
          "content": "this.logger.info('Chat message saved', {",
          "type": "direct_data",
          "match": "logger.info('Chat message saved', {"
        },
        {
          "line": 719,
          "content": "this.logger.info('Creating and executing tasks from analysis', {",
          "type": "direct_data",
          "match": "logger.info('Creating and executing tasks from analysis', {"
        },
        {
          "line": 753,
          "content": "this.logger.error('Failed to create individual task', {",
          "type": "direct_data",
          "match": "logger.error('Failed to create individual task', {"
        },
        {
          "line": 762,
          "content": "this.logger.info('Executing all tasks in batch', {",
          "type": "direct_data",
          "match": "logger.info('Executing all tasks in batch', {"
        },
        {
          "line": 778,
          "content": "this.logger.info('Batch task execution completed', {",
          "type": "direct_data",
          "match": "logger.info('Batch task execution completed', {"
        },
        {
          "line": 784,
          "content": "this.logger.error('Batch task execution failed', {",
          "type": "direct_data",
          "match": "logger.error('Batch task execution failed', {"
        },
        {
          "line": 799,
          "content": "this.logger.info('Task creation and execution completed', {",
          "type": "direct_data",
          "match": "logger.info('Task creation and execution completed', {"
        },
        {
          "line": 807,
          "content": "this.logger.error('Failed to create tasks from analysis', {",
          "type": "direct_data",
          "match": "logger.error('Failed to create tasks from analysis', {"
        },
        {
          "line": 853,
          "content": "this.logger.info('Running single project analysis', {",
          "type": "direct_data",
          "match": "logger.info('Running single project analysis', {"
        },
        {
          "line": 862,
          "content": "this.logger.info('Switching to project IDE for analysis', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for analysis', {"
        },
        {
          "line": 895,
          "content": "this.logger.info('Sending analysis prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending analysis prompt to IDE', {"
        },
        {
          "line": 907,
          "content": "this.logger.info('Received AI response for project', {",
          "type": "direct_data",
          "match": "logger.info('Received AI response for project', {"
        },
        {
          "line": 925,
          "content": "this.logger.info('Created and executed tasks for project', {",
          "type": "direct_data",
          "match": "logger.info('Created and executed tasks for project', {"
        },
        {
          "line": 951,
          "content": "this.logger.info('Quick-sending prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Quick-sending prompt to IDE', {"
        },
        {
          "line": 960,
          "content": "this.logger.info('Switching to project IDE for quick prompt', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for quick prompt', {"
        },
        {
          "line": 993,
          "content": "this.logger.info('Sending quick prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending quick prompt to IDE', {"
        },
        {
          "line": 1007,
          "content": "this.logger.info('Quick prompt sent successfully', {",
          "type": "direct_data",
          "match": "logger.info('Quick prompt sent successfully', {"
        },
        {
          "line": 1019,
          "content": "this.logger.info('Collecting response from IDE', {",
          "type": "direct_data",
          "match": "logger.info('Collecting response from IDE', {"
        },
        {
          "line": 1028,
          "content": "this.logger.info('Switching to project IDE for response collection', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for response collection', {"
        },
        {
          "line": 1039,
          "content": "this.logger.info('Collected AI response for project', {",
          "type": "direct_data",
          "match": "logger.info('Collected AI response for project', {"
        },
        {
          "line": 1048,
          "content": "this.logger.warn('No response found, using fallback method', {",
          "type": "direct_data",
          "match": "logger.warn('No response found, using fallback method', {"
        },
        {
          "line": 1048,
          "content": "this.logger.warn('No response found, using fallback method', {",
          "type": "variable_data",
          "match": "logger.warn('No response found, using"
        },
        {
          "line": 1073,
          "content": "this.logger.info('Created and executed tasks for project', {",
          "type": "direct_data",
          "match": "logger.info('Created and executed tasks for project', {"
        },
        {
          "line": 1100,
          "content": "this.logger.info('Reading latest chat response from ChatRepository by port', {",
          "type": "direct_data",
          "match": "logger.info('Reading latest chat response from ChatRepository by port', {"
        },
        {
          "line": 1114,
          "content": "this.logger.warn('No messages found for port', {",
          "type": "direct_data",
          "match": "logger.warn('No messages found for port', {"
        },
        {
          "line": 1134,
          "content": "this.logger.warn('No AI messages found for port', {",
          "type": "direct_data",
          "match": "logger.warn('No AI messages found for port', {"
        },
        {
          "line": 1149,
          "content": "this.logger.info('Successfully read chat response from ChatRepository by port', {",
          "type": "direct_data",
          "match": "logger.info('Successfully read chat response from ChatRepository by port', {"
        },
        {
          "line": 1165,
          "content": "this.logger.error('Error reading chat response from ChatRepository by port', {",
          "type": "direct_data",
          "match": "logger.error('Error reading chat response from ChatRepository by port', {"
        },
        {
          "line": 1183,
          "content": "this.logger.info('Collecting response only from IDE', {",
          "type": "direct_data",
          "match": "logger.info('Collecting response only from IDE', {"
        },
        {
          "line": 1192,
          "content": "this.logger.info('Switching to project IDE for response collection', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for response collection', {"
        },
        {
          "line": 1203,
          "content": "this.logger.info('Collected AI response for project', {",
          "type": "direct_data",
          "match": "logger.info('Collected AI response for project', {"
        },
        {
          "line": 1211,
          "content": "this.logger.warn('No response found', {",
          "type": "direct_data",
          "match": "logger.warn('No response found', {"
        },
        {
          "line": 1238,
          "content": "this.logger.info('Executing documentation tasks in batch', {",
          "type": "direct_data",
          "match": "logger.info('Executing documentation tasks in batch', {"
        },
        {
          "line": 1244,
          "content": "this.logger.info('Step 1: Creating Git branch for documentation tasks', {",
          "type": "direct_data",
          "match": "logger.info('Step 1: Creating Git branch for documentation tasks', {"
        },
        {
          "line": 1258,
          "content": "this.logger.info('Git branch created successfully via GitService', {",
          "type": "direct_data",
          "match": "logger.info('Git branch created successfully via GitService', {"
        },
        {
          "line": 1265,
          "content": "this.logger.info('Git branch created via direct command', {",
          "type": "direct_data",
          "match": "logger.info('Git branch created via direct command', {"
        },
        {
          "line": 1270,
          "content": "this.logger.warn('Failed to create Git branch, continuing without it', {",
          "type": "direct_data",
          "match": "logger.warn('Failed to create Git branch, continuing without it', {"
        },
        {
          "line": 1270,
          "content": "this.logger.warn('Failed to create Git branch, continuing without it', {",
          "type": "variable_data",
          "match": "logger.warn('Failed to create Git branch, continuing"
        },
        {
          "line": 1332,
          "content": "this.logger.info('Sending batch execution prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending batch execution prompt to IDE', {"
        },
        {
          "line": 1341,
          "content": "this.logger.info('Batch execution prompt sent', {",
          "type": "direct_data",
          "match": "logger.info('Batch execution prompt sent', {"
        },
        {
          "line": 1359,
          "content": "this.logger.error('Batch task execution failed', {",
          "type": "direct_data",
          "match": "logger.error('Batch task execution failed', {"
        },
        {
          "line": 1379,
          "content": "this.logger.info('Executing documentation task directly', {",
          "type": "direct_data",
          "match": "logger.info('Executing documentation task directly', {"
        },
        {
          "line": 1407,
          "content": "this.logger.info('Sending doc-execute prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending doc-execute prompt to IDE', {"
        },
        {
          "line": 1416,
          "content": "this.logger.info('Documentation task execution prompt sent', {",
          "type": "direct_data",
          "match": "logger.info('Documentation task execution prompt sent', {"
        },
        {
          "line": 1433,
          "content": "this.logger.error('Documentation task execution failed', {",
          "type": "direct_data",
          "match": "logger.error('Documentation task execution failed', {"
        },
        {
          "line": 1459,
          "content": "this.logger.info('Switching to project IDE for task execution', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for task execution', {"
        },
        {
          "line": 1553,
          "content": "this.logger.info('Sending task execution prompt to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Sending task execution prompt to IDE', {"
        },
        {
          "line": 1565,
          "content": "this.logger.info('Task execution prompt sent to IDE', {",
          "type": "direct_data",
          "match": "logger.info('Task execution prompt sent to IDE', {"
        },
        {
          "line": 1586,
          "content": "this.logger.error('Failed to send tasks to IDE', {",
          "type": "direct_data",
          "match": "logger.error('Failed to send tasks to IDE', {"
        },
        {
          "line": 1604,
          "content": "this.logger.info('Polling for AI response in IDE', {",
          "type": "direct_data",
          "match": "logger.info('Polling for AI response in IDE', {"
        },
        {
          "line": 1613,
          "content": "this.logger.info('Switching to project IDE for polling', {",
          "type": "direct_data",
          "match": "logger.info('Switching to project IDE for polling', {"
        },
        {
          "line": 1638,
          "content": "this.logger.warn('No AI response found after polling', {",
          "type": "direct_data",
          "match": "logger.warn('No AI response found after polling', {"
        },
        {
          "line": 1671,
          "content": "this.logger.info('AI response saved to ChatRepository', {",
          "type": "direct_data",
          "match": "logger.info('AI response saved to ChatRepository', {"
        },
        {
          "line": 1679,
          "content": "this.logger.error('Failed to save message to ChatRepository', {",
          "type": "direct_data",
          "match": "logger.error('Failed to save message to ChatRepository', {"
        },
        {
          "line": 1688,
          "content": "this.logger.info('AI response collected and saved', {",
          "type": "direct_data",
          "match": "logger.info('AI response collected and saved', {"
        }
      ]
    },
    "./backend/presentation/api/ProjectAnalysisController.js": {
      "totalFindings": 21,
      "byType": {
        "direct_data": 7,
        "variable_data": 7,
        "error_object": 7
      },
      "findings": [
        {
          "line": 36,
          "content": "this.logger.error('Error getting project analyses:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting project analyses:', error"
        },
        {
          "line": 36,
          "content": "this.logger.error('Error getting project analyses:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting project analyses:', error"
        },
        {
          "line": 36,
          "content": "this.logger.error('Error getting project analyses:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting project analyses:', error"
        },
        {
          "line": 72,
          "content": "this.logger.error('Error getting latest analysis:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting latest analysis:', error"
        },
        {
          "line": 72,
          "content": "this.logger.error('Error getting latest analysis:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting latest analysis:', error"
        },
        {
          "line": 72,
          "content": "this.logger.error('Error getting latest analysis:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting latest analysis:', error"
        },
        {
          "line": 106,
          "content": "this.logger.error('Error getting analyses by type:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting analyses by type:', error"
        },
        {
          "line": 106,
          "content": "this.logger.error('Error getting analyses by type:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting analyses by type:', error"
        },
        {
          "line": 106,
          "content": "this.logger.error('Error getting analyses by type:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting analyses by type:', error"
        },
        {
          "line": 143,
          "content": "this.logger.error('Error creating analysis:', error);",
          "type": "direct_data",
          "match": "logger.error('Error creating analysis:', error"
        },
        {
          "line": 143,
          "content": "this.logger.error('Error creating analysis:', error);",
          "type": "variable_data",
          "match": "logger.error('Error creating analysis:', error"
        },
        {
          "line": 143,
          "content": "this.logger.error('Error creating analysis:', error);",
          "type": "error_object",
          "match": "logger.error('Error creating analysis:', error"
        },
        {
          "line": 197,
          "content": "this.logger.error('Error updating analysis:', error);",
          "type": "direct_data",
          "match": "logger.error('Error updating analysis:', error"
        },
        {
          "line": 197,
          "content": "this.logger.error('Error updating analysis:', error);",
          "type": "variable_data",
          "match": "logger.error('Error updating analysis:', error"
        },
        {
          "line": 197,
          "content": "this.logger.error('Error updating analysis:', error);",
          "type": "error_object",
          "match": "logger.error('Error updating analysis:', error"
        },
        {
          "line": 233,
          "content": "this.logger.error('Error deleting analysis:', error);",
          "type": "direct_data",
          "match": "logger.error('Error deleting analysis:', error"
        },
        {
          "line": 233,
          "content": "this.logger.error('Error deleting analysis:', error);",
          "type": "variable_data",
          "match": "logger.error('Error deleting analysis:', error"
        },
        {
          "line": 233,
          "content": "this.logger.error('Error deleting analysis:', error);",
          "type": "error_object",
          "match": "logger.error('Error deleting analysis:', error"
        },
        {
          "line": 291,
          "content": "this.logger.error('Error getting analysis stats:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting analysis stats:', error"
        },
        {
          "line": 291,
          "content": "this.logger.error('Error getting analysis stats:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting analysis stats:', error"
        },
        {
          "line": 291,
          "content": "this.logger.error('Error getting analysis stats:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting analysis stats:', error"
        }
      ]
    },
    "./backend/presentation/api/AuthController.js": {
      "totalFindings": 27,
      "byType": {
        "direct_data": 10,
        "variable_data": 9,
        "error_object": 8
      },
      "findings": [
        {
          "line": 36,
          "content": "logger.error('Registration error:', error);",
          "type": "direct_data",
          "match": "logger.error('Registration error:', error"
        },
        {
          "line": 36,
          "content": "logger.error('Registration error:', error);",
          "type": "variable_data",
          "match": "logger.error('Registration error:', error"
        },
        {
          "line": 36,
          "content": "logger.error('Registration error:', error);",
          "type": "error_object",
          "match": "logger.error('Registration error:', error"
        },
        {
          "line": 46,
          "content": "logger.info('🔍 [AuthController] Login request received:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [AuthController] Login request received:', {"
        },
        {
          "line": 78,
          "content": "logger.info('✅ [AuthController] Login successful, sending response:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [AuthController] Login successful, sending response:', {"
        },
        {
          "line": 78,
          "content": "logger.info('✅ [AuthController] Login successful, sending response:', {",
          "type": "variable_data",
          "match": "logger.info('✅ [AuthController] Login successful, sending"
        },
        {
          "line": 88,
          "content": "logger.error('Login error:', error);",
          "type": "direct_data",
          "match": "logger.error('Login error:', error"
        },
        {
          "line": 88,
          "content": "logger.error('Login error:', error);",
          "type": "variable_data",
          "match": "logger.error('Login error:', error"
        },
        {
          "line": 88,
          "content": "logger.error('Login error:', error);",
          "type": "error_object",
          "match": "logger.error('Login error:', error"
        },
        {
          "line": 122,
          "content": "logger.error('Refresh error:', error);",
          "type": "direct_data",
          "match": "logger.error('Refresh error:', error"
        },
        {
          "line": 122,
          "content": "logger.error('Refresh error:', error);",
          "type": "variable_data",
          "match": "logger.error('Refresh error:', error"
        },
        {
          "line": 122,
          "content": "logger.error('Refresh error:', error);",
          "type": "error_object",
          "match": "logger.error('Refresh error:', error"
        },
        {
          "line": 153,
          "content": "logger.error('Logout error:', error);",
          "type": "direct_data",
          "match": "logger.error('Logout error:', error"
        },
        {
          "line": 153,
          "content": "logger.error('Logout error:', error);",
          "type": "variable_data",
          "match": "logger.error('Logout error:', error"
        },
        {
          "line": 153,
          "content": "logger.error('Logout error:', error);",
          "type": "error_object",
          "match": "logger.error('Logout error:', error"
        },
        {
          "line": 178,
          "content": "logger.error('Get profile error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get profile error:', error"
        },
        {
          "line": 178,
          "content": "logger.error('Get profile error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get profile error:', error"
        },
        {
          "line": 178,
          "content": "logger.error('Get profile error:', error);",
          "type": "error_object",
          "match": "logger.error('Get profile error:', error"
        },
        {
          "line": 204,
          "content": "logger.error('Token validation error:', error);",
          "type": "direct_data",
          "match": "logger.error('Token validation error:', error"
        },
        {
          "line": 204,
          "content": "logger.error('Token validation error:', error);",
          "type": "variable_data",
          "match": "logger.error('Token validation error:', error"
        },
        {
          "line": 204,
          "content": "logger.error('Token validation error:', error);",
          "type": "error_object",
          "match": "logger.error('Token validation error:', error"
        },
        {
          "line": 270,
          "content": "logger.error('Update profile error:', error);",
          "type": "direct_data",
          "match": "logger.error('Update profile error:', error"
        },
        {
          "line": 270,
          "content": "logger.error('Update profile error:', error);",
          "type": "variable_data",
          "match": "logger.error('Update profile error:', error"
        },
        {
          "line": 270,
          "content": "logger.error('Update profile error:', error);",
          "type": "error_object",
          "match": "logger.error('Update profile error:', error"
        },
        {
          "line": 303,
          "content": "logger.error('Get sessions error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get sessions error:', error"
        },
        {
          "line": 303,
          "content": "logger.error('Get sessions error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get sessions error:', error"
        },
        {
          "line": 303,
          "content": "logger.error('Get sessions error:', error);",
          "type": "error_object",
          "match": "logger.error('Get sessions error:', error"
        }
      ]
    },
    "./backend/presentation/api/TaskController.js": {
      "totalFindings": 51,
      "byType": {
        "direct_data": 22,
        "variable_data": 15,
        "task_data": 4,
        "error_object": 6,
        "template_data": 4
      },
      "findings": [
        {
          "line": 32,
          "content": "logger.info('🔍 [TaskController] Creating task:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskController] Creating task:', {"
        },
        {
          "line": 46,
          "content": "logger.info('✅ [TaskController] Task created successfully:', task);",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskController] Task created successfully:', task"
        },
        {
          "line": 46,
          "content": "logger.info('✅ [TaskController] Task created successfully:', task);",
          "type": "variable_data",
          "match": "logger.info('✅ [TaskController] Task created successfully:', task"
        },
        {
          "line": 46,
          "content": "logger.info('✅ [TaskController] Task created successfully:', task);",
          "type": "task_data",
          "match": "logger.info('✅ [TaskController] Task created successfully:', task"
        },
        {
          "line": 53,
          "content": "logger.error('❌ [TaskController] Failed to create task:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskController] Failed to create task:', error"
        },
        {
          "line": 53,
          "content": "logger.error('❌ [TaskController] Failed to create task:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskController] Failed to create task:', error"
        },
        {
          "line": 53,
          "content": "logger.error('❌ [TaskController] Failed to create task:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskController] Failed to create task:', error"
        },
        {
          "line": 179,
          "content": "logger.info('🚀 [TaskController] executeTask called with Categories system:', {",
          "type": "direct_data",
          "match": "logger.info('🚀 [TaskController] executeTask called with Categories system:', { "
        },
        {
          "line": 187,
          "content": "logger.info('🔍 [TaskController] Found task:', task ? {",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskController] Found task:', task ? {"
        },
        {
          "line": 187,
          "content": "logger.info('🔍 [TaskController] Found task:', task ? {",
          "type": "variable_data",
          "match": "logger.info('🔍 [TaskController] Found task:', task"
        },
        {
          "line": 187,
          "content": "logger.info('🔍 [TaskController] Found task:', task ? {",
          "type": "task_data",
          "match": "logger.info('🔍 [TaskController] Found task:', task"
        },
        {
          "line": 196,
          "content": "logger.info('❌ [TaskController] Task exists:', !!task);",
          "type": "direct_data",
          "match": "logger.info('❌ [TaskController] Task exists:', !!task"
        },
        {
          "line": 197,
          "content": "logger.info('❌ [TaskController] Task projectId:', task?.projectId);",
          "type": "direct_data",
          "match": "logger.info('❌ [TaskController] Task projectId:', task?.projectId"
        },
        {
          "line": 197,
          "content": "logger.info('❌ [TaskController] Task projectId:', task?.projectId);",
          "type": "variable_data",
          "match": "logger.info('❌ [TaskController] Task projectId:', task"
        },
        {
          "line": 197,
          "content": "logger.info('❌ [TaskController] Task projectId:', task?.projectId);",
          "type": "task_data",
          "match": "logger.info('❌ [TaskController] Task projectId:', task"
        },
        {
          "line": 198,
          "content": "logger.info('❌ [TaskController] Requested projectId:', projectId);",
          "type": "direct_data",
          "match": "logger.info('❌ [TaskController] Requested projectId:', projectId"
        },
        {
          "line": 198,
          "content": "logger.info('❌ [TaskController] Requested projectId:', projectId);",
          "type": "variable_data",
          "match": "logger.info('❌ [TaskController] Requested projectId:', projectId"
        },
        {
          "line": 199,
          "content": "logger.info('❌ [TaskController] belongsToProject result:', task?.belongsToProject(projectId));",
          "type": "direct_data",
          "match": "logger.info('❌ [TaskController] belongsToProject result:', task?.belongsToProject(projectId"
        },
        {
          "line": 199,
          "content": "logger.info('❌ [TaskController] belongsToProject result:', task?.belongsToProject(projectId));",
          "type": "variable_data",
          "match": "logger.info('❌ [TaskController] belongsToProject result:', task"
        },
        {
          "line": 199,
          "content": "logger.info('❌ [TaskController] belongsToProject result:', task?.belongsToProject(projectId));",
          "type": "task_data",
          "match": "logger.info('❌ [TaskController] belongsToProject result:', task"
        },
        {
          "line": 206,
          "content": "logger.info('🔍 [TaskController] Found task, executing with Categories system...');",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskController] Found task, executing with Categories system...'"
        },
        {
          "line": 206,
          "content": "logger.info('🔍 [TaskController] Found task, executing with Categories system...');",
          "type": "variable_data",
          "match": "logger.info('🔍 [TaskController] Found task, executing"
        },
        {
          "line": 211,
          "content": "logger.info('✅ [TaskController] Task execution completed with Categories:', {",
          "type": "direct_data",
          "match": "logger.info('✅ [TaskController] Task execution completed with Categories:', {"
        },
        {
          "line": 225,
          "content": "logger.error('❌ [TaskController] Error executing task with Categories:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskController] Error executing task with Categories:', error"
        },
        {
          "line": 225,
          "content": "logger.error('❌ [TaskController] Error executing task with Categories:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskController] Error executing task with Categories:', error"
        },
        {
          "line": 225,
          "content": "logger.error('❌ [TaskController] Error executing task with Categories:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskController] Error executing task with Categories:', error"
        },
        {
          "line": 488,
          "content": "logger.info('🔄 [TaskController] Syncing docs tasks for project:', projectId);",
          "type": "direct_data",
          "match": "logger.info('🔄 [TaskController] Syncing docs tasks for project:', projectId"
        },
        {
          "line": 488,
          "content": "logger.info('🔄 [TaskController] Syncing docs tasks for project:', projectId);",
          "type": "variable_data",
          "match": "logger.info('🔄 [TaskController] Syncing docs tasks for project:', projectId"
        },
        {
          "line": 505,
          "content": "logger.warn('🔍 [TaskController] Failed to get workspace path, using fallback:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('🔍 [TaskController] Failed to get workspace path, using fallback:', error.message"
        },
        {
          "line": 505,
          "content": "logger.warn('🔍 [TaskController] Failed to get workspace path, using fallback:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('🔍 [TaskController] Failed to get workspace path, using"
        },
        {
          "line": 520,
          "content": "logger.info(`✅ [TaskController] Docs import completed:`, {",
          "type": "direct_data",
          "match": "logger.info(`✅ [TaskController] Docs import completed:`, {"
        },
        {
          "line": 533,
          "content": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error"
        },
        {
          "line": 533,
          "content": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error"
        },
        {
          "line": 533,
          "content": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskController] Failed to sync docs tasks:', error"
        },
        {
          "line": 558,
          "content": "logger.info('🔍 [TaskController] Priority parsing:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskController] Priority parsing:', {"
        },
        {
          "line": 579,
          "content": "logger.info('🔍 [TaskController] Type parsing:', {",
          "type": "direct_data",
          "match": "logger.info('🔍 [TaskController] Type parsing:', {"
        },
        {
          "line": 621,
          "content": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error"
        },
        {
          "line": 621,
          "content": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error"
        },
        {
          "line": 621,
          "content": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error);",
          "type": "template_data",
          "match": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`"
        },
        {
          "line": 621,
          "content": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [TaskController] Failed to parse markdown file ${filename}:`, error"
        },
        {
          "line": 634,
          "content": "logger.info('🗑️ [TaskController] Cleaning docs tasks for project:', projectId);",
          "type": "direct_data",
          "match": "logger.info('🗑️ [TaskController] Cleaning docs tasks for project:', projectId"
        },
        {
          "line": 634,
          "content": "logger.info('🗑️ [TaskController] Cleaning docs tasks for project:', projectId);",
          "type": "variable_data",
          "match": "logger.info('🗑️ [TaskController] Cleaning docs tasks for project:', projectId"
        },
        {
          "line": 639,
          "content": "logger.info(`🗑️ [TaskController] Found ${allTasks.length} tasks to delete`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ [TaskController] Found ${allTasks.length} tasks to delete`"
        },
        {
          "line": 647,
          "content": "logger.info(`🗑️ [TaskController] Deleted task: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`🗑️ [TaskController] Deleted task: ${task.title}`"
        },
        {
          "line": 649,
          "content": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error"
        },
        {
          "line": 649,
          "content": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error"
        },
        {
          "line": 649,
          "content": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error);",
          "type": "template_data",
          "match": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`"
        },
        {
          "line": 649,
          "content": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error);",
          "type": "error_object",
          "match": "logger.error(`❌ [TaskController] Failed to delete task ${task.id}:`, error"
        },
        {
          "line": 664,
          "content": "logger.error('❌ [TaskController] Failed to clean tasks:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ [TaskController] Failed to clean tasks:', error"
        },
        {
          "line": 664,
          "content": "logger.error('❌ [TaskController] Failed to clean tasks:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ [TaskController] Failed to clean tasks:', error"
        },
        {
          "line": 664,
          "content": "logger.error('❌ [TaskController] Failed to clean tasks:', error);",
          "type": "error_object",
          "match": "logger.error('❌ [TaskController] Failed to clean tasks:', error"
        }
      ]
    },
    "./backend/presentation/api/IDEMirrorController.js": {
      "totalFindings": 52,
      "byType": {
        "direct_data": 18,
        "variable_data": 14,
        "error_object": 12,
        "template_data": 8
      },
      "findings": [
        {
          "line": 45,
          "content": "logger.info('Browser manager available:', !!browserManager);",
          "type": "direct_data",
          "match": "logger.info('Browser manager available:', !!browserManager"
        },
        {
          "line": 48,
          "content": "logger.info('WebSocket manager available:', !!webSocketManager);",
          "type": "direct_data",
          "match": "logger.info('WebSocket manager available:', !!webSocketManager"
        },
        {
          "line": 51,
          "content": "logger.info('Event bus available:', !!eventBus);",
          "type": "direct_data",
          "match": "logger.info('Event bus available:', !!eventBus"
        },
        {
          "line": 91,
          "content": "logger.error('Error initializing streaming services:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error initializing streaming services:', error.message"
        },
        {
          "line": 91,
          "content": "logger.error('Error initializing streaming services:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error initializing streaming services:', error"
        },
        {
          "line": 91,
          "content": "logger.error('Error initializing streaming services:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error initializing streaming services:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Error stack:', error.stack);",
          "type": "direct_data",
          "match": "logger.error('Error stack:', error.stack"
        },
        {
          "line": 92,
          "content": "logger.error('Error stack:', error.stack);",
          "type": "variable_data",
          "match": "logger.error('Error stack:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Error stack:', error.stack);",
          "type": "error_object",
          "match": "logger.error('Error stack:', error"
        },
        {
          "line": 111,
          "content": "logger.error('❌ Failed to get IDE state:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to get IDE state:', error.message"
        },
        {
          "line": 111,
          "content": "logger.error('❌ Failed to get IDE state:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to get IDE state:', error"
        },
        {
          "line": 111,
          "content": "logger.error('❌ Failed to get IDE state:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to get IDE state:', error"
        },
        {
          "line": 135,
          "content": "logger.error('❌ Failed to get available IDEs:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to get available IDEs:', error.message"
        },
        {
          "line": 135,
          "content": "logger.error('❌ Failed to get available IDEs:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to get available IDEs:', error"
        },
        {
          "line": 135,
          "content": "logger.error('❌ Failed to get available IDEs:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to get available IDEs:', error"
        },
        {
          "line": 176,
          "content": "logger.error('❌ Failed to click element:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to click element:', error.message"
        },
        {
          "line": 176,
          "content": "logger.error('❌ Failed to click element:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to click element:', error"
        },
        {
          "line": 176,
          "content": "logger.error('❌ Failed to click element:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to click element:', error"
        },
        {
          "line": 207,
          "content": "logger.error('❌ Failed to switch IDE:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to switch IDE:', error.message"
        },
        {
          "line": 207,
          "content": "logger.error('❌ Failed to switch IDE:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to switch IDE:', error"
        },
        {
          "line": 207,
          "content": "logger.error('❌ Failed to switch IDE:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to switch IDE:', error"
        },
        {
          "line": 226,
          "content": "logger.error('❌ Failed to connect to IDE:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to connect to IDE:', error.message"
        },
        {
          "line": 226,
          "content": "logger.error('❌ Failed to connect to IDE:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to connect to IDE:', error"
        },
        {
          "line": 226,
          "content": "logger.error('❌ Failed to connect to IDE:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to connect to IDE:', error"
        },
        {
          "line": 265,
          "content": "logger.error('❌ Failed to type text:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to type text:', error.message"
        },
        {
          "line": 265,
          "content": "logger.error('❌ Failed to type text:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to type text:', error"
        },
        {
          "line": 265,
          "content": "logger.error('❌ Failed to type text:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to type text:', error"
        },
        {
          "line": 305,
          "content": "logger.error('❌ Failed to focus and type:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to focus and type:', error.message"
        },
        {
          "line": 305,
          "content": "logger.error('❌ Failed to focus and type:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to focus and type:', error"
        },
        {
          "line": 305,
          "content": "logger.error('❌ Failed to focus and type:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to focus and type:', error"
        },
        {
          "line": 344,
          "content": "logger.error('❌ Failed to send chat message:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to send chat message:', error.message"
        },
        {
          "line": 344,
          "content": "logger.error('❌ Failed to send chat message:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to send chat message:', error"
        },
        {
          "line": 344,
          "content": "logger.error('❌ Failed to send chat message:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to send chat message:', error"
        },
        {
          "line": 362,
          "content": "logger.error('❌ WebSocket message error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ WebSocket message error:', error.message"
        },
        {
          "line": 362,
          "content": "logger.error('❌ WebSocket message error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ WebSocket message error:', error"
        },
        {
          "line": 362,
          "content": "logger.error('❌ WebSocket message error:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ WebSocket message error:', error"
        },
        {
          "line": 469,
          "content": "logger.error('❌ Queue processing error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Queue processing error:', error.message"
        },
        {
          "line": 469,
          "content": "logger.error('❌ Queue processing error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Queue processing error:', error"
        },
        {
          "line": 469,
          "content": "logger.error('❌ Queue processing error:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Queue processing error:', error"
        },
        {
          "line": 483,
          "content": "logger.info(`⚡ Processed ${processedCount} keystrokes in queue`);",
          "type": "template_data",
          "match": "logger.info(`⚡ Processed ${processedCount} keystrokes in queue`"
        },
        {
          "line": 496,
          "content": "logger.info(`🖱️ Processing click: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`🖱️ Processing click: ${selector}`"
        },
        {
          "line": 504,
          "content": "logger.info(`📸 Screenshot updated after click: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`📸 Screenshot updated after click: ${selector}`"
        },
        {
          "line": 514,
          "content": "logger.info(`⌨️ Processing keystroke: ${key || text} for ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`⌨️ Processing keystroke: ${key || text} for ${selector}`"
        },
        {
          "line": 534,
          "content": "logger.info(`📸 Screenshot updated for key: ${key}`);",
          "type": "template_data",
          "match": "logger.info(`📸 Screenshot updated for key: ${key}`"
        },
        {
          "line": 536,
          "content": "logger.info(`⏩ Skipping screenshot for: ${key || text}`);",
          "type": "template_data",
          "match": "logger.info(`⏩ Skipping screenshot for: ${key || text}`"
        },
        {
          "line": 554,
          "content": "logger.info(`⚡ Processing batch: \"${text}\" (${text.length} chars) for ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`⚡ Processing batch: \"${text}\" (${text.length} chars) for ${selector}`"
        },
        {
          "line": 564,
          "content": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20)}...\"`);",
          "type": "direct_data",
          "match": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20"
        },
        {
          "line": 564,
          "content": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20)}...\"`);",
          "type": "variable_data",
          "match": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20"
        },
        {
          "line": 564,
          "content": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20)}...\"`);",
          "type": "template_data",
          "match": "logger.info(`📸 Screenshot updated after batch: \"${text.substring(0, 20)}...\"`"
        },
        {
          "line": 640,
          "content": "logger.info('Streaming controller available:', !!this.streamingController);",
          "type": "direct_data",
          "match": "logger.info('Streaming controller available:', !!this.streamingController"
        },
        {
          "line": 672,
          "content": "logger.info('Streaming controller not available, skipping streaming routes');",
          "type": "direct_data",
          "match": "logger.info('Streaming controller not available, skipping streaming routes'"
        },
        {
          "line": 672,
          "content": "logger.info('Streaming controller not available, skipping streaming routes');",
          "type": "variable_data",
          "match": "logger.info('Streaming controller not available, skipping"
        }
      ]
    },
    "./backend/presentation/api/GitController.js": {
      "totalFindings": 31,
      "byType": {
        "direct_data": 26,
        "object_data": 5
      },
      "findings": [
        {
          "line": 40,
          "content": "this.logger.info('GitController: Getting Git status', { projectId, userId });",
          "type": "direct_data",
          "match": "logger.info('GitController: Getting Git status', { projectId, userId }"
        },
        {
          "line": 40,
          "content": "this.logger.info('GitController: Getting Git status', { projectId, userId });",
          "type": "object_data",
          "match": "logger.info('GitController: Getting Git status', { projectId, userId }"
        },
        {
          "line": 83,
          "content": "this.logger.error('GitController: Failed to get Git status', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to get Git status', {"
        },
        {
          "line": 121,
          "content": "this.logger.info('GitController: Getting branches', { projectId, userId });",
          "type": "direct_data",
          "match": "logger.info('GitController: Getting branches', { projectId, userId }"
        },
        {
          "line": 121,
          "content": "this.logger.info('GitController: Getting branches', { projectId, userId });",
          "type": "object_data",
          "match": "logger.info('GitController: Getting branches', { projectId, userId }"
        },
        {
          "line": 136,
          "content": "this.logger.error('GitController: Failed to get branches', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to get branches', {"
        },
        {
          "line": 174,
          "content": "this.logger.info('GitController: Validating changes', { projectId, userId });",
          "type": "direct_data",
          "match": "logger.info('GitController: Validating changes', { projectId, userId }"
        },
        {
          "line": 174,
          "content": "this.logger.info('GitController: Validating changes', { projectId, userId });",
          "type": "object_data",
          "match": "logger.info('GitController: Validating changes', { projectId, userId }"
        },
        {
          "line": 222,
          "content": "this.logger.error('GitController: Failed to validate changes', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to validate changes', {"
        },
        {
          "line": 260,
          "content": "this.logger.info('GitController: Comparing branches', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Comparing branches', { "
        },
        {
          "line": 309,
          "content": "this.logger.error('GitController: Failed to compare branches', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to compare branches', {"
        },
        {
          "line": 349,
          "content": "this.logger.info('GitController: Pulling changes', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Pulling changes', { "
        },
        {
          "line": 393,
          "content": "this.logger.error('GitController: Failed to pull changes', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to pull changes', {"
        },
        {
          "line": 432,
          "content": "this.logger.info('GitController: Checking out branch', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Checking out branch', { "
        },
        {
          "line": 460,
          "content": "this.logger.error('GitController: Failed to checkout branch', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to checkout branch', {"
        },
        {
          "line": 499,
          "content": "this.logger.info('GitController: Merging branches', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Merging branches', { "
        },
        {
          "line": 543,
          "content": "this.logger.error('GitController: Failed to merge branches', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to merge branches', {"
        },
        {
          "line": 583,
          "content": "this.logger.info('GitController: Creating branch', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Creating branch', { "
        },
        {
          "line": 616,
          "content": "this.logger.error('GitController: Failed to create branch', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to create branch', {"
        },
        {
          "line": 655,
          "content": "this.logger.info('GitController: Getting repository info', { projectId, userId });",
          "type": "direct_data",
          "match": "logger.info('GitController: Getting repository info', { projectId, userId }"
        },
        {
          "line": 655,
          "content": "this.logger.info('GitController: Getting repository info', { projectId, userId });",
          "type": "object_data",
          "match": "logger.info('GitController: Getting repository info', { projectId, userId }"
        },
        {
          "line": 666,
          "content": "this.logger.error('GitController: Failed to get repository info', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to get repository info', {"
        },
        {
          "line": 704,
          "content": "this.logger.info('GitController: Pulling from pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Pulling from pidea-agent branch', { "
        },
        {
          "line": 750,
          "content": "this.logger.error('GitController: Failed to pull from pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to pull from pidea-agent branch', {"
        },
        {
          "line": 789,
          "content": "this.logger.info('GitController: Merging to pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Merging to pidea-agent branch', { "
        },
        {
          "line": 831,
          "content": "this.logger.error('GitController: Failed to merge to pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to merge to pidea-agent branch', {"
        },
        {
          "line": 870,
          "content": "this.logger.info('GitController: Getting pidea-agent branch status', { projectId, userId });",
          "type": "direct_data",
          "match": "logger.info('GitController: Getting pidea-agent branch status', { projectId, userId }"
        },
        {
          "line": 870,
          "content": "this.logger.info('GitController: Getting pidea-agent branch status', { projectId, userId });",
          "type": "object_data",
          "match": "logger.info('GitController: Getting pidea-agent branch status', { projectId, userId }"
        },
        {
          "line": 916,
          "content": "this.logger.error('GitController: Failed to get pidea-agent branch status', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to get pidea-agent branch status', {"
        },
        {
          "line": 954,
          "content": "this.logger.info('GitController: Comparing with pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.info('GitController: Comparing with pidea-agent branch', { "
        },
        {
          "line": 1013,
          "content": "this.logger.error('GitController: Failed to compare with pidea-agent branch', {",
          "type": "direct_data",
          "match": "logger.error('GitController: Failed to compare with pidea-agent branch', {"
        }
      ]
    },
    "./backend/presentation/api/TaskExecutionController.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 22
      },
      "findings": [
        {
          "line": 50,
          "content": "this.logger.info('TaskExecutionController: Task execution started', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Task execution started', {"
        },
        {
          "line": 66,
          "content": "this.logger.error('TaskExecutionController: Failed to execute task', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to execute task', {"
        },
        {
          "line": 103,
          "content": "this.logger.info('TaskExecutionController: Execution status retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Execution status retrieved', {"
        },
        {
          "line": 114,
          "content": "this.logger.error('TaskExecutionController: Failed to get execution status', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get execution status', {"
        },
        {
          "line": 146,
          "content": "this.logger.info('TaskExecutionController: Task execution cancelled', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Task execution cancelled', {"
        },
        {
          "line": 158,
          "content": "this.logger.error('TaskExecutionController: Failed to cancel execution', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to cancel execution', {"
        },
        {
          "line": 188,
          "content": "this.logger.info('TaskExecutionController: Task execution paused', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Task execution paused', {"
        },
        {
          "line": 200,
          "content": "this.logger.error('TaskExecutionController: Failed to pause execution', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to pause execution', {"
        },
        {
          "line": 230,
          "content": "this.logger.info('TaskExecutionController: Task execution resumed', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Task execution resumed', {"
        },
        {
          "line": 242,
          "content": "this.logger.error('TaskExecutionController: Failed to resume execution', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to resume execution', {"
        },
        {
          "line": 276,
          "content": "this.logger.info('TaskExecutionController: Execution logs retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Execution logs retrieved', {"
        },
        {
          "line": 296,
          "content": "this.logger.error('TaskExecutionController: Failed to get execution logs', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get execution logs', {"
        },
        {
          "line": 326,
          "content": "this.logger.info('TaskExecutionController: Execution metrics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Execution metrics retrieved', {"
        },
        {
          "line": 337,
          "content": "this.logger.error('TaskExecutionController: Failed to get execution metrics', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get execution metrics', {"
        },
        {
          "line": 380,
          "content": "this.logger.info('TaskExecutionController: Active executions retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Active executions retrieved', {"
        },
        {
          "line": 399,
          "content": "this.logger.error('TaskExecutionController: Failed to get active executions', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get active executions', {"
        },
        {
          "line": 445,
          "content": "this.logger.info('TaskExecutionController: Execution history retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Execution history retrieved', {"
        },
        {
          "line": 464,
          "content": "this.logger.error('TaskExecutionController: Failed to get execution history', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get execution history', {"
        },
        {
          "line": 494,
          "content": "this.logger.info('TaskExecutionController: Bulk executions cancelled', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Bulk executions cancelled', {"
        },
        {
          "line": 509,
          "content": "this.logger.error('TaskExecutionController: Failed to bulk cancel executions', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to bulk cancel executions', {"
        },
        {
          "line": 540,
          "content": "this.logger.info('TaskExecutionController: Execution statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskExecutionController: Execution statistics retrieved', {"
        },
        {
          "line": 550,
          "content": "this.logger.error('TaskExecutionController: Failed to get execution statistics', {",
          "type": "direct_data",
          "match": "logger.error('TaskExecutionController: Failed to get execution statistics', {"
        }
      ]
    },
    "./backend/presentation/api/AutoFinishController.js": {
      "totalFindings": 39,
      "byType": {
        "direct_data": 16,
        "variable_data": 9,
        "error_object": 9,
        "object_data": 5
      },
      "findings": [
        {
          "line": 28,
          "content": "this.logger.info('Processing TODO list request', {",
          "type": "direct_data",
          "match": "logger.info('Processing TODO list request', {"
        },
        {
          "line": 70,
          "content": "this.logger.info('TODO list processing completed', {",
          "type": "direct_data",
          "match": "logger.info('TODO list processing completed', {"
        },
        {
          "line": 83,
          "content": "this.logger.error('TODO list processing failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('TODO list processing failed:', error.message"
        },
        {
          "line": 83,
          "content": "this.logger.error('TODO list processing failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('TODO list processing failed:', error"
        },
        {
          "line": 83,
          "content": "this.logger.error('TODO list processing failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('TODO list processing failed:', error"
        },
        {
          "line": 102,
          "content": "this.logger.info('Getting session status', { sessionId });",
          "type": "direct_data",
          "match": "logger.info('Getting session status', { sessionId }"
        },
        {
          "line": 102,
          "content": "this.logger.info('Getting session status', { sessionId });",
          "type": "object_data",
          "match": "logger.info('Getting session status', { sessionId }"
        },
        {
          "line": 135,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get session status:', error.message"
        },
        {
          "line": 135,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get session status:', error"
        },
        {
          "line": 135,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get session status:', error"
        },
        {
          "line": 154,
          "content": "this.logger.info('Getting user sessions', { limit, offset, status });",
          "type": "direct_data",
          "match": "logger.info('Getting user sessions', { limit, offset, status }"
        },
        {
          "line": 154,
          "content": "this.logger.info('Getting user sessions', { limit, offset, status });",
          "type": "object_data",
          "match": "logger.info('Getting user sessions', { limit, offset, status }"
        },
        {
          "line": 181,
          "content": "this.logger.error('Failed to get user sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get user sessions:', error.message"
        },
        {
          "line": 181,
          "content": "this.logger.error('Failed to get user sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get user sessions:', error"
        },
        {
          "line": 181,
          "content": "this.logger.error('Failed to get user sessions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get user sessions:', error"
        },
        {
          "line": 201,
          "content": "this.logger.info('Getting project sessions', { projectId, limit, offset, status });",
          "type": "direct_data",
          "match": "logger.info('Getting project sessions', { projectId, limit, offset, status }"
        },
        {
          "line": 201,
          "content": "this.logger.info('Getting project sessions', { projectId, limit, offset, status });",
          "type": "object_data",
          "match": "logger.info('Getting project sessions', { projectId, limit, offset, status }"
        },
        {
          "line": 228,
          "content": "this.logger.error('Failed to get project sessions:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get project sessions:', error.message"
        },
        {
          "line": 228,
          "content": "this.logger.error('Failed to get project sessions:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get project sessions:', error"
        },
        {
          "line": 228,
          "content": "this.logger.error('Failed to get project sessions:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get project sessions:', error"
        },
        {
          "line": 247,
          "content": "this.logger.info('Cancelling session', { sessionId });",
          "type": "direct_data",
          "match": "logger.info('Cancelling session', { sessionId }"
        },
        {
          "line": 247,
          "content": "this.logger.info('Cancelling session', { sessionId });",
          "type": "object_data",
          "match": "logger.info('Cancelling session', { sessionId }"
        },
        {
          "line": 291,
          "content": "this.logger.info('Session cancelled successfully', { sessionId });",
          "type": "direct_data",
          "match": "logger.info('Session cancelled successfully', { sessionId }"
        },
        {
          "line": 291,
          "content": "this.logger.info('Session cancelled successfully', { sessionId });",
          "type": "object_data",
          "match": "logger.info('Session cancelled successfully', { sessionId }"
        },
        {
          "line": 299,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to cancel session:', error.message"
        },
        {
          "line": 299,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to cancel session:', error"
        },
        {
          "line": 299,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to cancel session:', error"
        },
        {
          "line": 330,
          "content": "this.logger.error('Failed to get system stats:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get system stats:', error.message"
        },
        {
          "line": 330,
          "content": "this.logger.error('Failed to get system stats:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get system stats:', error"
        },
        {
          "line": 330,
          "content": "this.logger.error('Failed to get system stats:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get system stats:', error"
        },
        {
          "line": 363,
          "content": "this.logger.error('Failed to get supported patterns:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get supported patterns:', error.message"
        },
        {
          "line": 363,
          "content": "this.logger.error('Failed to get supported patterns:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get supported patterns:', error"
        },
        {
          "line": 363,
          "content": "this.logger.error('Failed to get supported patterns:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get supported patterns:', error"
        },
        {
          "line": 396,
          "content": "this.logger.error('Failed to get task type keywords:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get task type keywords:', error.message"
        },
        {
          "line": 396,
          "content": "this.logger.error('Failed to get task type keywords:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get task type keywords:', error"
        },
        {
          "line": 396,
          "content": "this.logger.error('Failed to get task type keywords:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get task type keywords:', error"
        },
        {
          "line": 442,
          "content": "this.logger.error('Health check failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Health check failed:', error.message"
        },
        {
          "line": 442,
          "content": "this.logger.error('Health check failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Health check failed:', error"
        },
        {
          "line": 442,
          "content": "this.logger.error('Health check failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Health check failed:', error"
        }
      ]
    },
    "./backend/presentation/api/TaskAnalysisController.js": {
      "totalFindings": 16,
      "byType": {
        "direct_data": 16
      },
      "findings": [
        {
          "line": 50,
          "content": "this.logger.info('TaskAnalysisController: Project analysis completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Project analysis completed', {"
        },
        {
          "line": 67,
          "content": "this.logger.error('TaskAnalysisController: Failed to analyze project', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to analyze project', {"
        },
        {
          "line": 104,
          "content": "this.logger.info('TaskAnalysisController: Project analysis retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Project analysis retrieved', {"
        },
        {
          "line": 115,
          "content": "this.logger.error('TaskAnalysisController: Failed to get project analysis', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to get project analysis', {"
        },
        {
          "line": 154,
          "content": "this.logger.info('TaskAnalysisController: AI analysis completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: AI analysis completed', {"
        },
        {
          "line": 175,
          "content": "this.logger.error('TaskAnalysisController: Failed to perform AI analysis', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to perform AI analysis', {"
        },
        {
          "line": 220,
          "content": "this.logger.info('TaskAnalysisController: Analysis history retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Analysis history retrieved', {"
        },
        {
          "line": 239,
          "content": "this.logger.error('TaskAnalysisController: Failed to get analysis history', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to get analysis history', {"
        },
        {
          "line": 269,
          "content": "this.logger.info('TaskAnalysisController: Analysis comparison completed', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Analysis comparison completed', {"
        },
        {
          "line": 287,
          "content": "this.logger.error('TaskAnalysisController: Failed to compare analyses', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to compare analyses', {"
        },
        {
          "line": 326,
          "content": "this.logger.info('TaskAnalysisController: Analysis exported', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Analysis exported', {"
        },
        {
          "line": 339,
          "content": "this.logger.error('TaskAnalysisController: Failed to export analysis', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to export analysis', {"
        },
        {
          "line": 371,
          "content": "this.logger.info('TaskAnalysisController: Analysis statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Analysis statistics retrieved', {"
        },
        {
          "line": 381,
          "content": "this.logger.error('TaskAnalysisController: Failed to get analysis statistics', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to get analysis statistics', {"
        },
        {
          "line": 419,
          "content": "this.logger.info('TaskAnalysisController: Analysis scheduled', {",
          "type": "direct_data",
          "match": "logger.info('TaskAnalysisController: Analysis scheduled', {"
        },
        {
          "line": 432,
          "content": "this.logger.error('TaskAnalysisController: Failed to schedule analysis', {",
          "type": "direct_data",
          "match": "logger.error('TaskAnalysisController: Failed to schedule analysis', {"
        }
      ]
    },
    "./backend/presentation/api/AnalysisController.js": {
      "totalFindings": 90,
      "byType": {
        "direct_data": 27,
        "variable_data": 27,
        "error_object": 21,
        "template_data": 15
      },
      "findings": [
        {
          "line": 76,
          "content": "this.logger.error(`Code quality analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Code quality analysis failed:`, error"
        },
        {
          "line": 76,
          "content": "this.logger.error(`Code quality analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Code quality analysis failed:`, error"
        },
        {
          "line": 76,
          "content": "this.logger.error(`Code quality analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Code quality analysis failed:`, error"
        },
        {
          "line": 136,
          "content": "this.logger.error(`Security analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Security analysis failed:`, error"
        },
        {
          "line": 136,
          "content": "this.logger.error(`Security analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Security analysis failed:`, error"
        },
        {
          "line": 136,
          "content": "this.logger.error(`Security analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Security analysis failed:`, error"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Performance analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Performance analysis failed:`, error"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Performance analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Performance analysis failed:`, error"
        },
        {
          "line": 196,
          "content": "this.logger.error(`Performance analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Performance analysis failed:`, error"
        },
        {
          "line": 260,
          "content": "this.logger.error(`Architecture analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Architecture analysis failed:`, error"
        },
        {
          "line": 260,
          "content": "this.logger.error(`Architecture analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Architecture analysis failed:`, error"
        },
        {
          "line": 260,
          "content": "this.logger.error(`Architecture analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Architecture analysis failed:`, error"
        },
        {
          "line": 371,
          "content": "this.logger.error(`Comprehensive analysis failed:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Comprehensive analysis failed:`, error"
        },
        {
          "line": 371,
          "content": "this.logger.error(`Comprehensive analysis failed:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Comprehensive analysis failed:`, error"
        },
        {
          "line": 371,
          "content": "this.logger.error(`Comprehensive analysis failed:`, error);",
          "type": "error_object",
          "match": "logger.error(`Comprehensive analysis failed:`, error"
        },
        {
          "line": 388,
          "content": "this.logger.info(`Getting analysis status for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis status for project: ${projectId}`"
        },
        {
          "line": 460,
          "content": "this.logger.info(`Analysis status:`, status);",
          "type": "direct_data",
          "match": "logger.info(`Analysis status:`, status"
        },
        {
          "line": 460,
          "content": "this.logger.info(`Analysis status:`, status);",
          "type": "variable_data",
          "match": "logger.info(`Analysis status:`, status"
        },
        {
          "line": 464,
          "content": "this.logger.error(`Failed to get analysis status:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis status:`, error"
        },
        {
          "line": 464,
          "content": "this.logger.error(`Failed to get analysis status:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis status:`, error"
        },
        {
          "line": 464,
          "content": "this.logger.error(`Failed to get analysis status:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis status:`, error"
        },
        {
          "line": 478,
          "content": "this.logger.info(`Getting analysis metrics for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis metrics for project: ${projectId}`"
        },
        {
          "line": 483,
          "content": "this.logger.info(`Found ${analyses.length} analyses for project ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${analyses.length} analyses for project ${projectId}`"
        },
        {
          "line": 587,
          "content": "this.logger.info(`Calculated metrics:`, metrics);",
          "type": "direct_data",
          "match": "logger.info(`Calculated metrics:`, metrics"
        },
        {
          "line": 587,
          "content": "this.logger.info(`Calculated metrics:`, metrics);",
          "type": "variable_data",
          "match": "logger.info(`Calculated metrics:`, metrics"
        },
        {
          "line": 591,
          "content": "this.logger.error(`Failed to get analysis metrics:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis metrics:`, error"
        },
        {
          "line": 591,
          "content": "this.logger.error(`Failed to get analysis metrics:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis metrics:`, error"
        },
        {
          "line": 591,
          "content": "this.logger.error(`Failed to get analysis metrics:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis metrics:`, error"
        },
        {
          "line": 605,
          "content": "this.logger.info(`Getting analysis history for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis history for project: ${projectId}`"
        },
        {
          "line": 606,
          "content": "this.logger.info(`Request URL: ${req.url}`);",
          "type": "template_data",
          "match": "logger.info(`Request URL: ${req.url}`"
        },
        {
          "line": 607,
          "content": "this.logger.info(`Request method: ${req.method}`);",
          "type": "template_data",
          "match": "logger.info(`Request method: ${req.method}`"
        },
        {
          "line": 608,
          "content": "this.logger.info(`AnalysisRepository type: ${this.analysisRepository.constructor.name}`);",
          "type": "template_data",
          "match": "logger.info(`AnalysisRepository type: ${this.analysisRepository.constructor.name}`"
        },
        {
          "line": 611,
          "content": "this.logger.info(`Calling analysisRepository.findByProjectId('${projectId}')`);",
          "type": "template_data",
          "match": "logger.info(`Calling analysisRepository.findByProjectId('${projectId}')`"
        },
        {
          "line": 614,
          "content": "this.logger.info(`Found ${analyses.length} analyses from repository:`, analyses);",
          "type": "direct_data",
          "match": "logger.info(`Found ${analyses.length} analyses from repository:`, analyses"
        },
        {
          "line": 614,
          "content": "this.logger.info(`Found ${analyses.length} analyses from repository:`, analyses);",
          "type": "variable_data",
          "match": "logger.info(`Found ${analyses.length} analyses from repository:`, analyses"
        },
        {
          "line": 614,
          "content": "this.logger.info(`Found ${analyses.length} analyses from repository:`, analyses);",
          "type": "template_data",
          "match": "logger.info(`Found ${analyses.length} analyses from repository:`"
        },
        {
          "line": 653,
          "content": "this.logger.info(`Transformed analysis:`, transformedAnalysis);",
          "type": "direct_data",
          "match": "logger.info(`Transformed analysis:`, transformedAnalysis"
        },
        {
          "line": 653,
          "content": "this.logger.info(`Transformed analysis:`, transformedAnalysis);",
          "type": "variable_data",
          "match": "logger.info(`Transformed analysis:`, transformedAnalysis"
        },
        {
          "line": 661,
          "content": "this.logger.error(`Failed to get analysis history:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis history:`, error"
        },
        {
          "line": 661,
          "content": "this.logger.error(`Failed to get analysis history:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis history:`, error"
        },
        {
          "line": 661,
          "content": "this.logger.error(`Failed to get analysis history:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis history:`, error"
        },
        {
          "line": 677,
          "content": "this.logger.error(`Failed to get analysis file:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis file:`, error"
        },
        {
          "line": 677,
          "content": "this.logger.error(`Failed to get analysis file:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis file:`, error"
        },
        {
          "line": 677,
          "content": "this.logger.error(`Failed to get analysis file:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis file:`, error"
        },
        {
          "line": 701,
          "content": "this.logger.error(`Failed to get analysis from database:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis from database:`, error"
        },
        {
          "line": 701,
          "content": "this.logger.error(`Failed to get analysis from database:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis from database:`, error"
        },
        {
          "line": 701,
          "content": "this.logger.error(`Failed to get analysis from database:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis from database:`, error"
        },
        {
          "line": 715,
          "content": "this.logger.info(`Getting analysis issues for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis issues for project: ${projectId}`"
        },
        {
          "line": 858,
          "content": "this.logger.info(`Issues data extracted, count: ${issues.length}`);",
          "type": "direct_data",
          "match": "logger.info(`Issues data extracted, count: ${issues.length}`"
        },
        {
          "line": 858,
          "content": "this.logger.info(`Issues data extracted, count: ${issues.length}`);",
          "type": "variable_data",
          "match": "logger.info(`Issues data extracted, count"
        },
        {
          "line": 858,
          "content": "this.logger.info(`Issues data extracted, count: ${issues.length}`);",
          "type": "template_data",
          "match": "logger.info(`Issues data extracted, count: ${issues.length}`"
        },
        {
          "line": 862,
          "content": "this.logger.error(`Failed to get analysis issues:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis issues:`, error"
        },
        {
          "line": 862,
          "content": "this.logger.error(`Failed to get analysis issues:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis issues:`, error"
        },
        {
          "line": 862,
          "content": "this.logger.error(`Failed to get analysis issues:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis issues:`, error"
        },
        {
          "line": 875,
          "content": "this.logger.info(`Getting analysis tech stack for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis tech stack for project: ${projectId}`"
        },
        {
          "line": 951,
          "content": "this.logger.error(`Failed to get analysis tech stack:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis tech stack:`, error"
        },
        {
          "line": 951,
          "content": "this.logger.error(`Failed to get analysis tech stack:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis tech stack:`, error"
        },
        {
          "line": 951,
          "content": "this.logger.error(`Failed to get analysis tech stack:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis tech stack:`, error"
        },
        {
          "line": 965,
          "content": "this.logger.info(`Getting analysis architecture for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis architecture for project: ${projectId}`"
        },
        {
          "line": 1042,
          "content": "this.logger.error(`Failed to get analysis architecture:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis architecture:`, error"
        },
        {
          "line": 1042,
          "content": "this.logger.error(`Failed to get analysis architecture:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis architecture:`, error"
        },
        {
          "line": 1042,
          "content": "this.logger.error(`Failed to get analysis architecture:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis architecture:`, error"
        },
        {
          "line": 1057,
          "content": "this.logger.info(`Getting analysis charts for project: ${projectId}, type: ${type}`);",
          "type": "direct_data",
          "match": "logger.info(`Getting analysis charts for project: ${projectId}, type: ${type}`"
        },
        {
          "line": 1057,
          "content": "this.logger.info(`Getting analysis charts for project: ${projectId}, type: ${type}`);",
          "type": "variable_data",
          "match": "logger.info(`Getting analysis charts for project: ${projectId}, type"
        },
        {
          "line": 1057,
          "content": "this.logger.info(`Getting analysis charts for project: ${projectId}, type: ${type}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis charts for project: ${projectId}, type: ${type}`"
        },
        {
          "line": 1085,
          "content": "this.logger.error(`Failed to get analysis charts:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis charts:`, error"
        },
        {
          "line": 1085,
          "content": "this.logger.error(`Failed to get analysis charts:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis charts:`, error"
        },
        {
          "line": 1085,
          "content": "this.logger.error(`Failed to get analysis charts:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis charts:`, error"
        },
        {
          "line": 1173,
          "content": "this.logger.info(`Getting analysis recommendations for project: ${projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Getting analysis recommendations for project: ${projectId}`"
        },
        {
          "line": 1239,
          "content": "this.logger.error(`Failed to get analysis recommendations:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get analysis recommendations:`, error"
        },
        {
          "line": 1239,
          "content": "this.logger.error(`Failed to get analysis recommendations:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get analysis recommendations:`, error"
        },
        {
          "line": 1239,
          "content": "this.logger.error(`Failed to get analysis recommendations:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get analysis recommendations:`, error"
        },
        {
          "line": 1280,
          "content": "this.logger.error(`Failed to generate comprehensive report:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to generate comprehensive report:`, error"
        },
        {
          "line": 1280,
          "content": "this.logger.error(`Failed to generate comprehensive report:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to generate comprehensive report:`, error"
        },
        {
          "line": 1280,
          "content": "this.logger.error(`Failed to generate comprehensive report:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to generate comprehensive report:`, error"
        },
        {
          "line": 1327,
          "content": "this.logger.error(`Failed to get code quality analysis:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get code quality analysis:`, error"
        },
        {
          "line": 1327,
          "content": "this.logger.error(`Failed to get code quality analysis:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get code quality analysis:`, error"
        },
        {
          "line": 1327,
          "content": "this.logger.error(`Failed to get code quality analysis:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get code quality analysis:`, error"
        },
        {
          "line": 1374,
          "content": "this.logger.error(`Failed to get security analysis:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get security analysis:`, error"
        },
        {
          "line": 1374,
          "content": "this.logger.error(`Failed to get security analysis:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get security analysis:`, error"
        },
        {
          "line": 1374,
          "content": "this.logger.error(`Failed to get security analysis:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get security analysis:`, error"
        },
        {
          "line": 1421,
          "content": "this.logger.error(`Failed to get performance analysis:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get performance analysis:`, error"
        },
        {
          "line": 1421,
          "content": "this.logger.error(`Failed to get performance analysis:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get performance analysis:`, error"
        },
        {
          "line": 1421,
          "content": "this.logger.error(`Failed to get performance analysis:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get performance analysis:`, error"
        },
        {
          "line": 1470,
          "content": "this.logger.error(`Failed to get architecture analysis:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get architecture analysis:`, error"
        },
        {
          "line": 1470,
          "content": "this.logger.error(`Failed to get architecture analysis:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get architecture analysis:`, error"
        },
        {
          "line": 1470,
          "content": "this.logger.error(`Failed to get architecture analysis:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get architecture analysis:`, error"
        },
        {
          "line": 1510,
          "content": "this.logger.error(`Failed to get comprehensive analysis:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Failed to get comprehensive analysis:`, error"
        },
        {
          "line": 1510,
          "content": "this.logger.error(`Failed to get comprehensive analysis:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Failed to get comprehensive analysis:`, error"
        },
        {
          "line": 1510,
          "content": "this.logger.error(`Failed to get comprehensive analysis:`, error);",
          "type": "error_object",
          "match": "logger.error(`Failed to get comprehensive analysis:`, error"
        }
      ]
    },
    "./backend/presentation/api/controllers/AutoRefactorController.js": {
      "totalFindings": 3,
      "byType": {
        "direct_data": 3
      },
      "findings": [
        {
          "line": 31,
          "content": "this.logger.info('AutoRefactorController: Executing auto refactor', {",
          "type": "direct_data",
          "match": "logger.info('AutoRefactorController: Executing auto refactor', {"
        },
        {
          "line": 56,
          "content": "this.logger.info('AutoRefactorController: Auto refactor completed', {",
          "type": "direct_data",
          "match": "logger.info('AutoRefactorController: Auto refactor completed', {"
        },
        {
          "line": 71,
          "content": "this.logger.error('AutoRefactorController: Auto refactor failed', {",
          "type": "direct_data",
          "match": "logger.error('AutoRefactorController: Auto refactor failed', {"
        }
      ]
    },
    "./backend/presentation/api/controllers/TestCorrectionController.js": {
      "totalFindings": 28,
      "byType": {
        "direct_data": 15,
        "object_data": 13
      },
      "findings": [
        {
          "line": 40,
          "content": "logger.error('Failed to get test correction status', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to get test correction status', { error: error.message }"
        },
        {
          "line": 40,
          "content": "logger.error('Failed to get test correction status', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to get test correction status', { error: error.message }"
        },
        {
          "line": 64,
          "content": "logger.info('Starting test analysis', {",
          "type": "direct_data",
          "match": "logger.info('Starting test analysis', { "
        },
        {
          "line": 104,
          "content": "logger.error('Failed to analyze tests', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to analyze tests', { error: error.message }"
        },
        {
          "line": 104,
          "content": "logger.error('Failed to analyze tests', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to analyze tests', { error: error.message }"
        },
        {
          "line": 128,
          "content": "logger.info('Starting test fixes', {",
          "type": "direct_data",
          "match": "logger.info('Starting test fixes', { "
        },
        {
          "line": 165,
          "content": "logger.error('Failed to fix tests', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to fix tests', { error: error.message }"
        },
        {
          "line": 165,
          "content": "logger.error('Failed to fix tests', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to fix tests', { error: error.message }"
        },
        {
          "line": 182,
          "content": "logger.info('Starting auto-fix workflow', { options });",
          "type": "direct_data",
          "match": "logger.info('Starting auto-fix workflow', { options }"
        },
        {
          "line": 182,
          "content": "logger.info('Starting auto-fix workflow', { options });",
          "type": "object_data",
          "match": "logger.info('Starting auto-fix workflow', { options }"
        },
        {
          "line": 222,
          "content": "logger.error('Failed to run auto-fix', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to run auto-fix', { error: error.message }"
        },
        {
          "line": 222,
          "content": "logger.error('Failed to run auto-fix', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to run auto-fix', { error: error.message }"
        },
        {
          "line": 239,
          "content": "logger.info('Starting coverage improvement', { targetCoverage, options });",
          "type": "direct_data",
          "match": "logger.info('Starting coverage improvement', { targetCoverage, options }"
        },
        {
          "line": 239,
          "content": "logger.info('Starting coverage improvement', { targetCoverage, options });",
          "type": "object_data",
          "match": "logger.info('Starting coverage improvement', { targetCoverage, options }"
        },
        {
          "line": 262,
          "content": "logger.error('Failed to improve coverage', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to improve coverage', { error: error.message }"
        },
        {
          "line": 262,
          "content": "logger.error('Failed to improve coverage', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to improve coverage', { error: error.message }"
        },
        {
          "line": 291,
          "content": "logger.error('Failed to get coverage', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to get coverage', { error: error.message }"
        },
        {
          "line": 291,
          "content": "logger.error('Failed to get coverage', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to get coverage', { error: error.message }"
        },
        {
          "line": 322,
          "content": "logger.info('Starting test refactoring', { refactorType, scope, options });",
          "type": "direct_data",
          "match": "logger.info('Starting test refactoring', { refactorType, scope, options }"
        },
        {
          "line": 322,
          "content": "logger.info('Starting test refactoring', { refactorType, scope, options });",
          "type": "object_data",
          "match": "logger.info('Starting test refactoring', { refactorType, scope, options }"
        },
        {
          "line": 364,
          "content": "logger.error('Failed to refactor tests', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to refactor tests', { error: error.message }"
        },
        {
          "line": 364,
          "content": "logger.error('Failed to refactor tests', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to refactor tests', { error: error.message }"
        },
        {
          "line": 392,
          "content": "logger.error('Failed to stop corrections', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to stop corrections', { error: error.message }"
        },
        {
          "line": 392,
          "content": "logger.error('Failed to stop corrections', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to stop corrections', { error: error.message }"
        },
        {
          "line": 437,
          "content": "logger.error('Failed to get report', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to get report', { error: error.message }"
        },
        {
          "line": 437,
          "content": "logger.error('Failed to get report', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to get report', { error: error.message }"
        },
        {
          "line": 469,
          "content": "logger.error('Health check failed', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Health check failed', { error: error.message }"
        },
        {
          "line": 469,
          "content": "logger.error('Health check failed', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Health check failed', { error: error.message }"
        }
      ]
    },
    "./backend/presentation/api/controllers/AutoTestFixController.js": {
      "totalFindings": 37,
      "byType": {
        "direct_data": 19,
        "variable_data": 9,
        "error_object": 9
      },
      "findings": [
        {
          "line": 43,
          "content": "this.logger.info('Executing auto test fix', {",
          "type": "direct_data",
          "match": "logger.info('Executing auto test fix', {"
        },
        {
          "line": 85,
          "content": "this.logger.error('Auto test fix execution failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Auto test fix execution failed:', error.message"
        },
        {
          "line": 85,
          "content": "this.logger.error('Auto test fix execution failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Auto test fix execution failed:', error"
        },
        {
          "line": 85,
          "content": "this.logger.error('Auto test fix execution failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Auto test fix execution failed:', error"
        },
        {
          "line": 104,
          "content": "this.logger.info('Analyzing project tests', {",
          "type": "direct_data",
          "match": "logger.info('Analyzing project tests', {"
        },
        {
          "line": 122,
          "content": "this.logger.info('Project test analysis completed', {",
          "type": "direct_data",
          "match": "logger.info('Project test analysis completed', {"
        },
        {
          "line": 133,
          "content": "this.logger.error('Project test analysis failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Project test analysis failed:', error.message"
        },
        {
          "line": 133,
          "content": "this.logger.error('Project test analysis failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Project test analysis failed:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Project test analysis failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Project test analysis failed:', error"
        },
        {
          "line": 152,
          "content": "this.logger.info('Getting session status', {",
          "type": "direct_data",
          "match": "logger.info('Getting session status', {"
        },
        {
          "line": 166,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get session status:', error.message"
        },
        {
          "line": 166,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get session status:', error"
        },
        {
          "line": 166,
          "content": "this.logger.error('Failed to get session status:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get session status:', error"
        },
        {
          "line": 185,
          "content": "this.logger.info('Cancelling session', {",
          "type": "direct_data",
          "match": "logger.info('Cancelling session', {"
        },
        {
          "line": 200,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to cancel session:', error.message"
        },
        {
          "line": 200,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to cancel session:', error"
        },
        {
          "line": 200,
          "content": "this.logger.error('Failed to cancel session:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to cancel session:', error"
        },
        {
          "line": 218,
          "content": "this.logger.info('Getting auto test fix statistics', {",
          "type": "direct_data",
          "match": "logger.info('Getting auto test fix statistics', {"
        },
        {
          "line": 254,
          "content": "this.logger.error('Failed to get statistics:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get statistics:', error.message"
        },
        {
          "line": 254,
          "content": "this.logger.error('Failed to get statistics:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get statistics:', error"
        },
        {
          "line": 254,
          "content": "this.logger.error('Failed to get statistics:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get statistics:', error"
        },
        {
          "line": 273,
          "content": "this.logger.info('Getting auto test tasks', {",
          "type": "direct_data",
          "match": "logger.info('Getting auto test tasks', {"
        },
        {
          "line": 303,
          "content": "this.logger.error('Failed to get auto test tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get auto test tasks:', error.message"
        },
        {
          "line": 303,
          "content": "this.logger.error('Failed to get auto test tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get auto test tasks:', error"
        },
        {
          "line": 303,
          "content": "this.logger.error('Failed to get auto test tasks:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get auto test tasks:', error"
        },
        {
          "line": 321,
          "content": "this.logger.info('Getting auto test task details', {",
          "type": "direct_data",
          "match": "logger.info('Getting auto test task details', {"
        },
        {
          "line": 348,
          "content": "this.logger.error('Failed to get auto test task details:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to get auto test task details:', error.message"
        },
        {
          "line": 348,
          "content": "this.logger.error('Failed to get auto test task details:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to get auto test task details:', error"
        },
        {
          "line": 348,
          "content": "this.logger.error('Failed to get auto test task details:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to get auto test task details:', error"
        },
        {
          "line": 367,
          "content": "this.logger.info('Retrying auto test task', {",
          "type": "direct_data",
          "match": "logger.info('Retrying auto test task', {"
        },
        {
          "line": 401,
          "content": "this.logger.error('Failed to retry auto test task:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to retry auto test task:', error.message"
        },
        {
          "line": 401,
          "content": "this.logger.error('Failed to retry auto test task:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to retry auto test task:', error"
        },
        {
          "line": 401,
          "content": "this.logger.error('Failed to retry auto test task:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to retry auto test task:', error"
        },
        {
          "line": 421,
          "content": "this.logger.info('Loading existing tasks', {",
          "type": "direct_data",
          "match": "logger.info('Loading existing tasks', {"
        },
        {
          "line": 444,
          "content": "this.logger.error('Failed to load existing tasks:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to load existing tasks:', error.message"
        },
        {
          "line": 444,
          "content": "this.logger.error('Failed to load existing tasks:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to load existing tasks:', error"
        },
        {
          "line": 444,
          "content": "this.logger.error('Failed to load existing tasks:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to load existing tasks:', error"
        }
      ]
    },
    "./backend/presentation/api/ChatController.js": {
      "totalFindings": 31,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 1
      },
      "findings": [
        {
          "line": 57,
          "content": "logger.error('Send message error:', error);",
          "type": "direct_data",
          "match": "logger.error('Send message error:', error"
        },
        {
          "line": 57,
          "content": "logger.error('Send message error:', error);",
          "type": "variable_data",
          "match": "logger.error('Send message error:', error"
        },
        {
          "line": 57,
          "content": "logger.error('Send message error:', error);",
          "type": "error_object",
          "match": "logger.error('Send message error:', error"
        },
        {
          "line": 101,
          "content": "logger.error('Get chat history error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get chat history error:', error"
        },
        {
          "line": 101,
          "content": "logger.error('Get chat history error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get chat history error:', error"
        },
        {
          "line": 101,
          "content": "logger.error('Get chat history error:', error);",
          "type": "error_object",
          "match": "logger.error('Get chat history error:', error"
        },
        {
          "line": 116,
          "content": "logger.info(`Getting chat history for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Getting chat history for port ${port}`"
        },
        {
          "line": 135,
          "content": "logger.error('Get port chat history error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get port chat history error:', error"
        },
        {
          "line": 135,
          "content": "logger.error('Get port chat history error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get port chat history error:', error"
        },
        {
          "line": 135,
          "content": "logger.error('Get port chat history error:', error);",
          "type": "error_object",
          "match": "logger.error('Get port chat history error:', error"
        },
        {
          "line": 169,
          "content": "logger.error('Get user sessions error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get user sessions error:', error"
        },
        {
          "line": 169,
          "content": "logger.error('Get user sessions error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get user sessions error:', error"
        },
        {
          "line": 169,
          "content": "logger.error('Get user sessions error:', error);",
          "type": "error_object",
          "match": "logger.error('Get user sessions error:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Create session error:', error);",
          "type": "direct_data",
          "match": "logger.error('Create session error:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Create session error:', error);",
          "type": "variable_data",
          "match": "logger.error('Create session error:', error"
        },
        {
          "line": 205,
          "content": "logger.error('Create session error:', error);",
          "type": "error_object",
          "match": "logger.error('Create session error:', error"
        },
        {
          "line": 235,
          "content": "logger.error('Delete session error:', error);",
          "type": "direct_data",
          "match": "logger.error('Delete session error:', error"
        },
        {
          "line": 235,
          "content": "logger.error('Delete session error:', error);",
          "type": "variable_data",
          "match": "logger.error('Delete session error:', error"
        },
        {
          "line": 235,
          "content": "logger.error('Delete session error:', error);",
          "type": "error_object",
          "match": "logger.error('Delete session error:', error"
        },
        {
          "line": 266,
          "content": "logger.error('Get connection status error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get connection status error:', error"
        },
        {
          "line": 266,
          "content": "logger.error('Get connection status error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get connection status error:', error"
        },
        {
          "line": 266,
          "content": "logger.error('Get connection status error:', error);",
          "type": "error_object",
          "match": "logger.error('Get connection status error:', error"
        },
        {
          "line": 293,
          "content": "logger.error('Get quick prompts error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get quick prompts error:', error"
        },
        {
          "line": 293,
          "content": "logger.error('Get quick prompts error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get quick prompts error:', error"
        },
        {
          "line": 293,
          "content": "logger.error('Get quick prompts error:', error);",
          "type": "error_object",
          "match": "logger.error('Get quick prompts error:', error"
        },
        {
          "line": 313,
          "content": "logger.error('Get settings error:', error);",
          "type": "direct_data",
          "match": "logger.error('Get settings error:', error"
        },
        {
          "line": 313,
          "content": "logger.error('Get settings error:', error);",
          "type": "variable_data",
          "match": "logger.error('Get settings error:', error"
        },
        {
          "line": 313,
          "content": "logger.error('Get settings error:', error);",
          "type": "error_object",
          "match": "logger.error('Get settings error:', error"
        },
        {
          "line": 343,
          "content": "logger.error('Update settings error:', error);",
          "type": "direct_data",
          "match": "logger.error('Update settings error:', error"
        },
        {
          "line": 343,
          "content": "logger.error('Update settings error:', error);",
          "type": "variable_data",
          "match": "logger.error('Update settings error:', error"
        },
        {
          "line": 343,
          "content": "logger.error('Update settings error:', error);",
          "type": "error_object",
          "match": "logger.error('Update settings error:', error"
        }
      ]
    },
    "./backend/presentation/api/CodeExplorerController.js": {
      "totalFindings": 13,
      "byType": {
        "direct_data": 4,
        "variable_data": 4,
        "error_object": 4,
        "template_data": 1
      },
      "findings": [
        {
          "line": 23,
          "content": "logger.error('Error getting file tree:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 23,
          "content": "logger.error('Error getting file tree:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 23,
          "content": "logger.error('Error getting file tree:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting file tree:', error"
        },
        {
          "line": 34,
          "content": "logger.info(`Getting file content for: ${path}`);",
          "type": "template_data",
          "match": "logger.info(`Getting file content for: ${path}`"
        },
        {
          "line": 57,
          "content": "logger.error('Error getting file content:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 57,
          "content": "logger.error('Error getting file content:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 57,
          "content": "logger.error('Error getting file content:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting file content:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error getting current file info:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting current file info:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error getting current file info:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting current file info:', error"
        },
        {
          "line": 76,
          "content": "logger.error('Error getting current file info:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting current file info:', error"
        },
        {
          "line": 95,
          "content": "logger.error('Error refreshing explorer:', error);",
          "type": "direct_data",
          "match": "logger.error('Error refreshing explorer:', error"
        },
        {
          "line": 95,
          "content": "logger.error('Error refreshing explorer:', error);",
          "type": "variable_data",
          "match": "logger.error('Error refreshing explorer:', error"
        },
        {
          "line": 95,
          "content": "logger.error('Error refreshing explorer:', error);",
          "type": "error_object",
          "match": "logger.error('Error refreshing explorer:', error"
        }
      ]
    },
    "./backend/presentation/api/StreamingController.js": {
      "totalFindings": 30,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10
      },
      "findings": [
        {
          "line": 67,
          "content": "logger.error('Error starting streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error starting streaming:', error.message"
        },
        {
          "line": 67,
          "content": "logger.error('Error starting streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error starting streaming:', error"
        },
        {
          "line": 67,
          "content": "logger.error('Error starting streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error starting streaming:', error"
        },
        {
          "line": 114,
          "content": "logger.error('Error stopping streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error stopping streaming:', error.message"
        },
        {
          "line": 114,
          "content": "logger.error('Error stopping streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error stopping streaming:', error"
        },
        {
          "line": 114,
          "content": "logger.error('Error stopping streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error stopping streaming:', error"
        },
        {
          "line": 157,
          "content": "logger.error('Error getting port status:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting port status:', error.message"
        },
        {
          "line": 157,
          "content": "logger.error('Error getting port status:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting port status:', error"
        },
        {
          "line": 157,
          "content": "logger.error('Error getting port status:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting port status:', error"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting all ports:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting all ports:', error.message"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting all ports:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting all ports:', error"
        },
        {
          "line": 181,
          "content": "logger.error('Error getting all ports:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting all ports:', error"
        },
        {
          "line": 235,
          "content": "logger.error('Error updating port config:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error updating port config:', error.message"
        },
        {
          "line": 235,
          "content": "logger.error('Error updating port config:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error updating port config:', error"
        },
        {
          "line": 235,
          "content": "logger.error('Error updating port config:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error updating port config:', error"
        },
        {
          "line": 282,
          "content": "logger.error('Error pausing streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error pausing streaming:', error.message"
        },
        {
          "line": 282,
          "content": "logger.error('Error pausing streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error pausing streaming:', error"
        },
        {
          "line": 282,
          "content": "logger.error('Error pausing streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error pausing streaming:', error"
        },
        {
          "line": 329,
          "content": "logger.error('Error resuming streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error resuming streaming:', error.message"
        },
        {
          "line": 329,
          "content": "logger.error('Error resuming streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error resuming streaming:', error"
        },
        {
          "line": 329,
          "content": "logger.error('Error resuming streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error resuming streaming:', error"
        },
        {
          "line": 352,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error getting stats:', error.message"
        },
        {
          "line": 352,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 352,
          "content": "logger.error('Error getting stats:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error getting stats:', error"
        },
        {
          "line": 376,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Error stopping all streaming:', error.message"
        },
        {
          "line": 376,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Error stopping all streaming:', error"
        },
        {
          "line": 376,
          "content": "logger.error('Error stopping all streaming:', error.message);",
          "type": "error_object",
          "match": "logger.error('Error stopping all streaming:', error"
        },
        {
          "line": 403,
          "content": "logger.error('Health check error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Health check error:', error.message"
        },
        {
          "line": 403,
          "content": "logger.error('Health check error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Health check error:', error"
        },
        {
          "line": 403,
          "content": "logger.error('Health check error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Health check error:', error"
        }
      ]
    },
    "./backend/presentation/api/ScriptGenerationController.js": {
      "totalFindings": 22,
      "byType": {
        "direct_data": 22
      },
      "findings": [
        {
          "line": 54,
          "content": "this.logger.info('ScriptGenerationController: Script generated', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script generated', {"
        },
        {
          "line": 71,
          "content": "this.logger.error('ScriptGenerationController: Failed to generate script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to generate script', {"
        },
        {
          "line": 118,
          "content": "this.logger.info('ScriptGenerationController: Scripts retrieved', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Scripts retrieved', {"
        },
        {
          "line": 137,
          "content": "this.logger.error('ScriptGenerationController: Failed to get scripts', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to get scripts', {"
        },
        {
          "line": 175,
          "content": "this.logger.info('ScriptGenerationController: Script retrieved', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script retrieved', {"
        },
        {
          "line": 186,
          "content": "this.logger.error('ScriptGenerationController: Failed to get script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to get script', {"
        },
        {
          "line": 218,
          "content": "this.logger.info('ScriptGenerationController: Script execution started', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script execution started', {"
        },
        {
          "line": 234,
          "content": "this.logger.error('ScriptGenerationController: Failed to execute script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to execute script', {"
        },
        {
          "line": 271,
          "content": "this.logger.info('ScriptGenerationController: Script execution retrieved', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script execution retrieved', {"
        },
        {
          "line": 282,
          "content": "this.logger.error('ScriptGenerationController: Failed to get script execution', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to get script execution', {"
        },
        {
          "line": 322,
          "content": "this.logger.info('ScriptGenerationController: Script updated', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script updated', {"
        },
        {
          "line": 334,
          "content": "this.logger.error('ScriptGenerationController: Failed to update script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to update script', {"
        },
        {
          "line": 364,
          "content": "this.logger.info('ScriptGenerationController: Script deleted', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script deleted', {"
        },
        {
          "line": 375,
          "content": "this.logger.error('ScriptGenerationController: Failed to delete script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to delete script', {"
        },
        {
          "line": 406,
          "content": "this.logger.info('ScriptGenerationController: Script templates retrieved', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script templates retrieved', {"
        },
        {
          "line": 417,
          "content": "this.logger.error('ScriptGenerationController: Failed to get script templates', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to get script templates', {"
        },
        {
          "line": 459,
          "content": "this.logger.info('ScriptGenerationController: Script template created', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script template created', {"
        },
        {
          "line": 471,
          "content": "this.logger.error('ScriptGenerationController: Failed to create script template', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to create script template', {"
        },
        {
          "line": 501,
          "content": "this.logger.info('ScriptGenerationController: Script statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script statistics retrieved', {"
        },
        {
          "line": 511,
          "content": "this.logger.error('ScriptGenerationController: Failed to get script statistics', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to get script statistics', {"
        },
        {
          "line": 549,
          "content": "this.logger.info('ScriptGenerationController: Script exported', {",
          "type": "direct_data",
          "match": "logger.info('ScriptGenerationController: Script exported', {"
        },
        {
          "line": 562,
          "content": "this.logger.error('ScriptGenerationController: Failed to export script', {",
          "type": "direct_data",
          "match": "logger.error('ScriptGenerationController: Failed to export script', {"
        }
      ]
    },
    "./backend/presentation/api/TaskSuggestionController.js": {
      "totalFindings": 20,
      "byType": {
        "direct_data": 20
      },
      "findings": [
        {
          "line": 52,
          "content": "this.logger.info('TaskSuggestionController: AI suggestions generated', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: AI suggestions generated', {"
        },
        {
          "line": 69,
          "content": "this.logger.error('TaskSuggestionController: Failed to generate suggestions', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to generate suggestions', {"
        },
        {
          "line": 118,
          "content": "this.logger.info('TaskSuggestionController: Suggestions retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestions retrieved', {"
        },
        {
          "line": 137,
          "content": "this.logger.error('TaskSuggestionController: Failed to get suggestions', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to get suggestions', {"
        },
        {
          "line": 175,
          "content": "this.logger.info('TaskSuggestionController: Suggestion retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion retrieved', {"
        },
        {
          "line": 186,
          "content": "this.logger.error('TaskSuggestionController: Failed to get suggestion', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to get suggestion', {"
        },
        {
          "line": 218,
          "content": "this.logger.info('TaskSuggestionController: Suggestion applied', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion applied', {"
        },
        {
          "line": 234,
          "content": "this.logger.error('TaskSuggestionController: Failed to apply suggestion', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to apply suggestion', {"
        },
        {
          "line": 266,
          "content": "this.logger.info('TaskSuggestionController: Suggestion rejected', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion rejected', {"
        },
        {
          "line": 278,
          "content": "this.logger.error('TaskSuggestionController: Failed to reject suggestion', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to reject suggestion', {"
        },
        {
          "line": 318,
          "content": "this.logger.info('TaskSuggestionController: Suggestion updated', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion updated', {"
        },
        {
          "line": 330,
          "content": "this.logger.error('TaskSuggestionController: Failed to update suggestion', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to update suggestion', {"
        },
        {
          "line": 360,
          "content": "this.logger.info('TaskSuggestionController: Suggestion deleted', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion deleted', {"
        },
        {
          "line": 371,
          "content": "this.logger.error('TaskSuggestionController: Failed to delete suggestion', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to delete suggestion', {"
        },
        {
          "line": 403,
          "content": "this.logger.info('TaskSuggestionController: Suggestion statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Suggestion statistics retrieved', {"
        },
        {
          "line": 413,
          "content": "this.logger.error('TaskSuggestionController: Failed to get suggestion statistics', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to get suggestion statistics', {"
        },
        {
          "line": 443,
          "content": "this.logger.info('TaskSuggestionController: Bulk suggestions applied', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: Bulk suggestions applied', {"
        },
        {
          "line": 459,
          "content": "this.logger.error('TaskSuggestionController: Failed to bulk apply suggestions', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to bulk apply suggestions', {"
        },
        {
          "line": 489,
          "content": "this.logger.info('TaskSuggestionController: AI performance retrieved', {",
          "type": "direct_data",
          "match": "logger.info('TaskSuggestionController: AI performance retrieved', {"
        },
        {
          "line": 500,
          "content": "this.logger.error('TaskSuggestionController: Failed to get AI performance', {",
          "type": "direct_data",
          "match": "logger.error('TaskSuggestionController: Failed to get AI performance', {"
        }
      ]
    },
    "./backend/presentation/api/ide/IDEMirrorController.js": {
      "totalFindings": 33,
      "byType": {
        "direct_data": 10,
        "variable_data": 10,
        "error_object": 10,
        "template_data": 3
      },
      "findings": [
        {
          "line": 59,
          "content": "this.logger.error('Error getting IDE DOM:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE DOM:', error"
        },
        {
          "line": 59,
          "content": "this.logger.error('Error getting IDE DOM:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE DOM:', error"
        },
        {
          "line": 59,
          "content": "this.logger.error('Error getting IDE DOM:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE DOM:', error"
        },
        {
          "line": 104,
          "content": "this.logger.error('Error interacting with IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error interacting with IDE:', error"
        },
        {
          "line": 104,
          "content": "this.logger.error('Error interacting with IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error interacting with IDE:', error"
        },
        {
          "line": 104,
          "content": "this.logger.error('Error interacting with IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error interacting with IDE:', error"
        },
        {
          "line": 152,
          "content": "this.logger.error('Error getting mirror status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting mirror status:', error"
        },
        {
          "line": 152,
          "content": "this.logger.error('Error getting mirror status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting mirror status:', error"
        },
        {
          "line": 152,
          "content": "this.logger.error('Error getting mirror status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting mirror status:', error"
        },
        {
          "line": 214,
          "content": "this.logger.error('Error connecting to IDE mirror:', error);",
          "type": "direct_data",
          "match": "logger.error('Error connecting to IDE mirror:', error"
        },
        {
          "line": 214,
          "content": "this.logger.error('Error connecting to IDE mirror:', error);",
          "type": "variable_data",
          "match": "logger.error('Error connecting to IDE mirror:', error"
        },
        {
          "line": 214,
          "content": "this.logger.error('Error connecting to IDE mirror:', error);",
          "type": "error_object",
          "match": "logger.error('Error connecting to IDE mirror:', error"
        },
        {
          "line": 259,
          "content": "this.logger.error('Error disconnecting from IDE mirror:', error);",
          "type": "direct_data",
          "match": "logger.error('Error disconnecting from IDE mirror:', error"
        },
        {
          "line": 259,
          "content": "this.logger.error('Error disconnecting from IDE mirror:', error);",
          "type": "variable_data",
          "match": "logger.error('Error disconnecting from IDE mirror:', error"
        },
        {
          "line": 259,
          "content": "this.logger.error('Error disconnecting from IDE mirror:', error);",
          "type": "error_object",
          "match": "logger.error('Error disconnecting from IDE mirror:', error"
        },
        {
          "line": 307,
          "content": "this.logger.error('Error getting mirror data:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting mirror data:', error"
        },
        {
          "line": 307,
          "content": "this.logger.error('Error getting mirror data:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting mirror data:', error"
        },
        {
          "line": 307,
          "content": "this.logger.error('Error getting mirror data:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting mirror data:', error"
        },
        {
          "line": 359,
          "content": "this.logger.error('Error sending chat message:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending chat message:', error"
        },
        {
          "line": 359,
          "content": "this.logger.error('Error sending chat message:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending chat message:', error"
        },
        {
          "line": 359,
          "content": "this.logger.error('Error sending chat message:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending chat message:', error"
        },
        {
          "line": 416,
          "content": "this.logger.error(`Error capturing DOM for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error capturing DOM for port ${port}:`, error"
        },
        {
          "line": 416,
          "content": "this.logger.error(`Error capturing DOM for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error capturing DOM for port ${port}:`, error"
        },
        {
          "line": 416,
          "content": "this.logger.error(`Error capturing DOM for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error capturing DOM for port ${port}:`"
        },
        {
          "line": 416,
          "content": "this.logger.error(`Error capturing DOM for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error capturing DOM for port ${port}:`, error"
        },
        {
          "line": 448,
          "content": "this.logger.error(`Error performing interaction for port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error performing interaction for port ${port}:`, error"
        },
        {
          "line": 448,
          "content": "this.logger.error(`Error performing interaction for port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error performing interaction for port ${port}:`, error"
        },
        {
          "line": 448,
          "content": "this.logger.error(`Error performing interaction for port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error performing interaction for port ${port}:`"
        },
        {
          "line": 448,
          "content": "this.logger.error(`Error performing interaction for port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error performing interaction for port ${port}:`, error"
        },
        {
          "line": 519,
          "content": "this.logger.error(`Error sending message to IDE port ${port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error sending message to IDE port ${port}:`, error"
        },
        {
          "line": 519,
          "content": "this.logger.error(`Error sending message to IDE port ${port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error sending message to IDE port ${port}:`, error"
        },
        {
          "line": 519,
          "content": "this.logger.error(`Error sending message to IDE port ${port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error sending message to IDE port ${port}:`"
        },
        {
          "line": 519,
          "content": "this.logger.error(`Error sending message to IDE port ${port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error sending message to IDE port ${port}:`, error"
        }
      ]
    },
    "./backend/presentation/api/ide/IDEFeatureController.js": {
      "totalFindings": 18,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6
      },
      "findings": [
        {
          "line": 49,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 49,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 49,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 88,
          "content": "this.logger.error('Error getting feature capabilities:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting feature capabilities:', error"
        },
        {
          "line": 88,
          "content": "this.logger.error('Error getting feature capabilities:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting feature capabilities:', error"
        },
        {
          "line": 88,
          "content": "this.logger.error('Error getting feature capabilities:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting feature capabilities:', error"
        },
        {
          "line": 128,
          "content": "this.logger.error('Error checking feature availability:', error);",
          "type": "direct_data",
          "match": "logger.error('Error checking feature availability:', error"
        },
        {
          "line": 128,
          "content": "this.logger.error('Error checking feature availability:', error);",
          "type": "variable_data",
          "match": "logger.error('Error checking feature availability:', error"
        },
        {
          "line": 128,
          "content": "this.logger.error('Error checking feature availability:', error);",
          "type": "error_object",
          "match": "logger.error('Error checking feature availability:', error"
        },
        {
          "line": 167,
          "content": "this.logger.error('Error getting feature config:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting feature config:', error"
        },
        {
          "line": 167,
          "content": "this.logger.error('Error getting feature config:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting feature config:', error"
        },
        {
          "line": 167,
          "content": "this.logger.error('Error getting feature config:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting feature config:', error"
        },
        {
          "line": 213,
          "content": "this.logger.error('Error updating feature config:', error);",
          "type": "direct_data",
          "match": "logger.error('Error updating feature config:', error"
        },
        {
          "line": 213,
          "content": "this.logger.error('Error updating feature config:', error);",
          "type": "variable_data",
          "match": "logger.error('Error updating feature config:', error"
        },
        {
          "line": 213,
          "content": "this.logger.error('Error updating feature config:', error);",
          "type": "error_object",
          "match": "logger.error('Error updating feature config:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error getting feature stats:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting feature stats:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error getting feature stats:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting feature stats:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error getting feature stats:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting feature stats:', error"
        }
      ]
    },
    "./backend/presentation/api/ide/IDESelectionController.js": {
      "totalFindings": 21,
      "byType": {
        "direct_data": 7,
        "variable_data": 7,
        "error_object": 7
      },
      "findings": [
        {
          "line": 55,
          "content": "this.logger.error('Error getting current selection:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting current selection:', error"
        },
        {
          "line": 55,
          "content": "this.logger.error('Error getting current selection:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting current selection:', error"
        },
        {
          "line": 55,
          "content": "this.logger.error('Error getting current selection:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting current selection:', error"
        },
        {
          "line": 138,
          "content": "this.logger.error('Error setting selection:', error);",
          "type": "direct_data",
          "match": "logger.error('Error setting selection:', error"
        },
        {
          "line": 138,
          "content": "this.logger.error('Error setting selection:', error);",
          "type": "variable_data",
          "match": "logger.error('Error setting selection:', error"
        },
        {
          "line": 138,
          "content": "this.logger.error('Error setting selection:', error);",
          "type": "error_object",
          "match": "logger.error('Error setting selection:', error"
        },
        {
          "line": 181,
          "content": "this.logger.error('Error getting available IDEs:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 181,
          "content": "this.logger.error('Error getting available IDEs:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 181,
          "content": "this.logger.error('Error getting available IDEs:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 212,
          "content": "this.logger.error('Error getting selection history:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting selection history:', error"
        },
        {
          "line": 212,
          "content": "this.logger.error('Error getting selection history:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting selection history:', error"
        },
        {
          "line": 212,
          "content": "this.logger.error('Error getting selection history:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting selection history:', error"
        },
        {
          "line": 238,
          "content": "this.logger.error('Error clearing selection history:', error);",
          "type": "direct_data",
          "match": "logger.error('Error clearing selection history:', error"
        },
        {
          "line": 238,
          "content": "this.logger.error('Error clearing selection history:', error);",
          "type": "variable_data",
          "match": "logger.error('Error clearing selection history:', error"
        },
        {
          "line": 238,
          "content": "this.logger.error('Error clearing selection history:', error);",
          "type": "error_object",
          "match": "logger.error('Error clearing selection history:', error"
        },
        {
          "line": 260,
          "content": "this.logger.error('Error getting selection stats:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting selection stats:', error"
        },
        {
          "line": 260,
          "content": "this.logger.error('Error getting selection stats:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting selection stats:', error"
        },
        {
          "line": 260,
          "content": "this.logger.error('Error getting selection stats:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting selection stats:', error"
        },
        {
          "line": 326,
          "content": "this.logger.error('Error auto-selecting IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error auto-selecting IDE:', error"
        },
        {
          "line": 326,
          "content": "this.logger.error('Error auto-selecting IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error auto-selecting IDE:', error"
        },
        {
          "line": 326,
          "content": "this.logger.error('Error auto-selecting IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error auto-selecting IDE:', error"
        }
      ]
    },
    "./backend/presentation/api/ide/IDEController.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 8,
        "variable_data": 8,
        "error_object": 8
      },
      "findings": [
        {
          "line": 44,
          "content": "this.logger.error('Error getting IDE list:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE list:', error"
        },
        {
          "line": 44,
          "content": "this.logger.error('Error getting IDE list:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE list:', error"
        },
        {
          "line": 44,
          "content": "this.logger.error('Error getting IDE list:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE list:', error"
        },
        {
          "line": 95,
          "content": "this.logger.error('Error getting IDE status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE status:', error"
        },
        {
          "line": 95,
          "content": "this.logger.error('Error getting IDE status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE status:', error"
        },
        {
          "line": 95,
          "content": "this.logger.error('Error getting IDE status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE status:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Error starting IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Error starting IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 133,
          "content": "this.logger.error('Error starting IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 166,
          "content": "this.logger.error('Error stopping IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 166,
          "content": "this.logger.error('Error stopping IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 166,
          "content": "this.logger.error('Error stopping IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 211,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 211,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 211,
          "content": "this.logger.error('Error getting IDE features:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE features:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error switching IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error switching IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 248,
          "content": "this.logger.error('Error switching IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 290,
          "content": "this.logger.error('Error getting IDE config:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting IDE config:', error"
        },
        {
          "line": 290,
          "content": "this.logger.error('Error getting IDE config:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting IDE config:', error"
        },
        {
          "line": 290,
          "content": "this.logger.error('Error getting IDE config:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting IDE config:', error"
        },
        {
          "line": 323,
          "content": "this.logger.error('Error updating IDE config:', error);",
          "type": "direct_data",
          "match": "logger.error('Error updating IDE config:', error"
        },
        {
          "line": 323,
          "content": "this.logger.error('Error updating IDE config:', error);",
          "type": "variable_data",
          "match": "logger.error('Error updating IDE config:', error"
        },
        {
          "line": 323,
          "content": "this.logger.error('Error updating IDE config:', error);",
          "type": "error_object",
          "match": "logger.error('Error updating IDE config:', error"
        }
      ]
    },
    "./backend/presentation/api/routes/test-correction.js": {
      "totalFindings": 1,
      "byType": {
        "direct_data": 1
      },
      "findings": [
        {
          "line": 123,
          "content": "logger.error('Test correction route error', {",
          "type": "direct_data",
          "match": "logger.error('Test correction route error', {"
        }
      ]
    },
    "./backend/presentation/api/ContentLibraryController.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 8,
        "variable_data": 8,
        "error_object": 8
      },
      "findings": [
        {
          "line": 43,
          "content": "logger.error('Error loading frameworks:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading frameworks:', error"
        },
        {
          "line": 43,
          "content": "logger.error('Error loading frameworks:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading frameworks:', error"
        },
        {
          "line": 43,
          "content": "logger.error('Error loading frameworks:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading frameworks:', error"
        },
        {
          "line": 77,
          "content": "logger.error('Error loading framework prompts:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading framework prompts:', error"
        },
        {
          "line": 77,
          "content": "logger.error('Error loading framework prompts:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading framework prompts:', error"
        },
        {
          "line": 77,
          "content": "logger.error('Error loading framework prompts:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading framework prompts:', error"
        },
        {
          "line": 111,
          "content": "logger.error('Error loading framework templates:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading framework templates:', error"
        },
        {
          "line": 111,
          "content": "logger.error('Error loading framework templates:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading framework templates:', error"
        },
        {
          "line": 111,
          "content": "logger.error('Error loading framework templates:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading framework templates:', error"
        },
        {
          "line": 142,
          "content": "logger.error('Error loading prompts:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading prompts:', error"
        },
        {
          "line": 142,
          "content": "logger.error('Error loading prompts:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading prompts:', error"
        },
        {
          "line": 142,
          "content": "logger.error('Error loading prompts:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading prompts:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Error loading prompts by category:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading prompts by category:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Error loading prompts by category:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading prompts by category:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Error loading prompts by category:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading prompts by category:', error"
        },
        {
          "line": 222,
          "content": "logger.error('Error loading templates:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading templates:', error"
        },
        {
          "line": 222,
          "content": "logger.error('Error loading templates:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading templates:', error"
        },
        {
          "line": 222,
          "content": "logger.error('Error loading templates:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading templates:', error"
        },
        {
          "line": 247,
          "content": "logger.error('Error loading templates by category:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading templates by category:', error"
        },
        {
          "line": 247,
          "content": "logger.error('Error loading templates by category:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading templates by category:', error"
        },
        {
          "line": 247,
          "content": "logger.error('Error loading templates by category:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading templates by category:', error"
        },
        {
          "line": 299,
          "content": "logger.error('Error loading file:', error);",
          "type": "direct_data",
          "match": "logger.error('Error loading file:', error"
        },
        {
          "line": 299,
          "content": "logger.error('Error loading file:', error);",
          "type": "variable_data",
          "match": "logger.error('Error loading file:', error"
        },
        {
          "line": 299,
          "content": "logger.error('Error loading file:', error);",
          "type": "error_object",
          "match": "logger.error('Error loading file:', error"
        }
      ]
    },
    "./backend/presentation/api/IDEController.js": {
      "totalFindings": 190,
      "byType": {
        "direct_data": 56,
        "variable_data": 55,
        "error_object": 35,
        "request_response": 4,
        "ide_data": 8,
        "database_result": 1,
        "object_data": 1,
        "template_data": 30
      },
      "findings": [
        {
          "line": 16,
          "content": "logger.info('Active workspace path:', activePath);",
          "type": "direct_data",
          "match": "logger.info('Active workspace path:', activePath"
        },
        {
          "line": 16,
          "content": "logger.info('Active workspace path:', activePath);",
          "type": "variable_data",
          "match": "logger.info('Active workspace path:', activePath"
        },
        {
          "line": 17,
          "content": "logger.info('Active port:', this.ideManager.getActivePort());",
          "type": "direct_data",
          "match": "logger.info('Active port:', this.ideManager.getActivePort("
        },
        {
          "line": 17,
          "content": "logger.info('Active port:', this.ideManager.getActivePort());",
          "type": "variable_data",
          "match": "logger.info('Active port:', this"
        },
        {
          "line": 18,
          "content": "logger.info('Available workspaces:', Array.from(this.ideManager.ideWorkspaces.entries()));",
          "type": "direct_data",
          "match": "logger.info('Available workspaces:', Array.from(this.ideManager.ideWorkspaces.entries("
        },
        {
          "line": 18,
          "content": "logger.info('Available workspaces:', Array.from(this.ideManager.ideWorkspaces.entries()));",
          "type": "variable_data",
          "match": "logger.info('Available workspaces:', Array"
        },
        {
          "line": 39,
          "content": "logger.error('Error getting available IDEs:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Error getting available IDEs:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Error getting available IDEs:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting available IDEs:', error"
        },
        {
          "line": 66,
          "content": "logger.error('Error starting IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 66,
          "content": "logger.error('Error starting IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 66,
          "content": "logger.error('Error starting IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error starting IDE:', error"
        },
        {
          "line": 76,
          "content": "logger.info('switchIDE called with req.params:', req.params);",
          "type": "direct_data",
          "match": "logger.info('switchIDE called with req.params:', req.params"
        },
        {
          "line": 76,
          "content": "logger.info('switchIDE called with req.params:', req.params);",
          "type": "variable_data",
          "match": "logger.info('switchIDE called with req.params:', req"
        },
        {
          "line": 76,
          "content": "logger.info('switchIDE called with req.params:', req.params);",
          "type": "request_response",
          "match": "logger.info('switchIDE called with req.params:', req"
        },
        {
          "line": 77,
          "content": "logger.info('switchIDE called with req.url:', req.url);",
          "type": "direct_data",
          "match": "logger.info('switchIDE called with req.url:', req.url"
        },
        {
          "line": 77,
          "content": "logger.info('switchIDE called with req.url:', req.url);",
          "type": "variable_data",
          "match": "logger.info('switchIDE called with req.url:', req"
        },
        {
          "line": 77,
          "content": "logger.info('switchIDE called with req.url:', req.url);",
          "type": "request_response",
          "match": "logger.info('switchIDE called with req.url:', req"
        },
        {
          "line": 78,
          "content": "logger.info('switchIDE called with req.path:', req.path);",
          "type": "direct_data",
          "match": "logger.info('switchIDE called with req.path:', req.path"
        },
        {
          "line": 78,
          "content": "logger.info('switchIDE called with req.path:', req.path);",
          "type": "variable_data",
          "match": "logger.info('switchIDE called with req.path:', req"
        },
        {
          "line": 78,
          "content": "logger.info('switchIDE called with req.path:', req.path);",
          "type": "request_response",
          "match": "logger.info('switchIDE called with req.path:', req"
        },
        {
          "line": 82,
          "content": "logger.info('switchIDE called with portParam:', portParam);",
          "type": "direct_data",
          "match": "logger.info('switchIDE called with portParam:', portParam"
        },
        {
          "line": 82,
          "content": "logger.info('switchIDE called with portParam:', portParam);",
          "type": "variable_data",
          "match": "logger.info('switchIDE called with portParam:', portParam"
        },
        {
          "line": 82,
          "content": "logger.info('switchIDE called with portParam:', portParam);",
          "type": "ide_data",
          "match": "logger.info('switchIDE called with portParam:', port"
        },
        {
          "line": 83,
          "content": "logger.info('Current active port before switch:', this.ideManager.getActivePort());",
          "type": "direct_data",
          "match": "logger.info('Current active port before switch:', this.ideManager.getActivePort("
        },
        {
          "line": 83,
          "content": "logger.info('Current active port before switch:', this.ideManager.getActivePort());",
          "type": "variable_data",
          "match": "logger.info('Current active port before switch:', this"
        },
        {
          "line": 87,
          "content": "logger.info('Parsed port:', port);",
          "type": "direct_data",
          "match": "logger.info('Parsed port:', port"
        },
        {
          "line": 87,
          "content": "logger.info('Parsed port:', port);",
          "type": "variable_data",
          "match": "logger.info('Parsed port:', port"
        },
        {
          "line": 87,
          "content": "logger.info('Parsed port:', port);",
          "type": "ide_data",
          "match": "logger.info('Parsed port:', port"
        },
        {
          "line": 90,
          "content": "logger.error('Invalid port:', portParam);",
          "type": "direct_data",
          "match": "logger.error('Invalid port:', portParam"
        },
        {
          "line": 90,
          "content": "logger.error('Invalid port:', portParam);",
          "type": "variable_data",
          "match": "logger.error('Invalid port:', portParam"
        },
        {
          "line": 90,
          "content": "logger.error('Invalid port:', portParam);",
          "type": "ide_data",
          "match": "logger.error('Invalid port:', port"
        },
        {
          "line": 101,
          "content": "logger.error('Port validation failed:', port);",
          "type": "direct_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 101,
          "content": "logger.error('Port validation failed:', port);",
          "type": "variable_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 101,
          "content": "logger.error('Port validation failed:', port);",
          "type": "ide_data",
          "match": "logger.error('Port validation failed:', port"
        },
        {
          "line": 110,
          "content": "logger.info('ideManager.switchToIDE completed, result:', result);",
          "type": "direct_data",
          "match": "logger.info('ideManager.switchToIDE completed, result:', result"
        },
        {
          "line": 110,
          "content": "logger.info('ideManager.switchToIDE completed, result:', result);",
          "type": "variable_data",
          "match": "logger.info('ideManager.switchToIDE completed, result"
        },
        {
          "line": 110,
          "content": "logger.info('ideManager.switchToIDE completed, result:', result);",
          "type": "request_response",
          "match": "logger.info('ideManager.switchToIDE completed, res"
        },
        {
          "line": 110,
          "content": "logger.info('ideManager.switchToIDE completed, result:', result);",
          "type": "database_result",
          "match": "logger.info('ideManager.switchToIDE completed, result"
        },
        {
          "line": 111,
          "content": "logger.info('New active port after switch:', this.ideManager.getActivePort());",
          "type": "direct_data",
          "match": "logger.info('New active port after switch:', this.ideManager.getActivePort("
        },
        {
          "line": 111,
          "content": "logger.info('New active port after switch:', this.ideManager.getActivePort());",
          "type": "variable_data",
          "match": "logger.info('New active port after switch:', this"
        },
        {
          "line": 115,
          "content": "logger.info('Publishing activeIDEChanged event:', { port, previousPort: this.ideManager.getActivePort() });",
          "type": "direct_data",
          "match": "logger.info('Publishing activeIDEChanged event:', { port, previousPort: this.ideManager.getActivePort("
        },
        {
          "line": 115,
          "content": "logger.info('Publishing activeIDEChanged event:', { port, previousPort: this.ideManager.getActivePort() });",
          "type": "object_data",
          "match": "logger.info('Publishing activeIDEChanged event:', { port, previousPort: this.ideManager.getActivePort() }"
        },
        {
          "line": 129,
          "content": "logger.error('Error switching IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 129,
          "content": "logger.error('Error switching IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 129,
          "content": "logger.error('Error switching IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error switching IDE:', error"
        },
        {
          "line": 154,
          "content": "logger.error('Error stopping IDE:', error);",
          "type": "direct_data",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 154,
          "content": "logger.error('Error stopping IDE:', error);",
          "type": "variable_data",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 154,
          "content": "logger.error('Error stopping IDE:', error);",
          "type": "error_object",
          "match": "logger.error('Error stopping IDE:', error"
        },
        {
          "line": 170,
          "content": "logger.error('Error getting status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting status:', error"
        },
        {
          "line": 170,
          "content": "logger.error('Error getting status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting status:', error"
        },
        {
          "line": 170,
          "content": "logger.error('Error getting status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting status:', error"
        },
        {
          "line": 187,
          "content": "logger.error('Error restarting user app:', error);",
          "type": "direct_data",
          "match": "logger.error('Error restarting user app:', error"
        },
        {
          "line": 187,
          "content": "logger.error('Error restarting user app:', error);",
          "type": "variable_data",
          "match": "logger.error('Error restarting user app:', error"
        },
        {
          "line": 187,
          "content": "logger.error('Error restarting user app:', error);",
          "type": "error_object",
          "match": "logger.error('Error restarting user app:', error"
        },
        {
          "line": 203,
          "content": "logger.info('Searching for frontend URLs in', availableIDEs.length, 'IDEs');",
          "type": "direct_data",
          "match": "logger.info('Searching for frontend URLs in', availableIDEs.length, 'IDEs'"
        },
        {
          "line": 203,
          "content": "logger.info('Searching for frontend URLs in', availableIDEs.length, 'IDEs');",
          "type": "variable_data",
          "match": "logger.info('Searching for frontend URLs in', availableIDEs"
        },
        {
          "line": 212,
          "content": "logger.info('Checking IDE port', ide.port, 'workspace:', ide.workspacePath);",
          "type": "direct_data",
          "match": "logger.info('Checking IDE port', ide.port, 'workspace:', ide.workspacePath"
        },
        {
          "line": 212,
          "content": "logger.info('Checking IDE port', ide.port, 'workspace:', ide.workspacePath);",
          "type": "variable_data",
          "match": "logger.info('Checking IDE port', ide"
        },
        {
          "line": 212,
          "content": "logger.info('Checking IDE port', ide.port, 'workspace:', ide.workspacePath);",
          "type": "ide_data",
          "match": "logger.info('Checking IDE port', ide"
        },
        {
          "line": 216,
          "content": "logger.info('Found frontend URL in IDE port', ide.port, ':', url);",
          "type": "direct_data",
          "match": "logger.info('Found frontend URL in IDE port', ide.port, ':', url"
        },
        {
          "line": 216,
          "content": "logger.info('Found frontend URL in IDE port', ide.port, ':', url);",
          "type": "variable_data",
          "match": "logger.info('Found frontend URL in IDE port', ide"
        },
        {
          "line": 216,
          "content": "logger.info('Found frontend URL in IDE port', ide.port, ':', url);",
          "type": "ide_data",
          "match": "logger.info('Found frontend URL in IDE port', ide"
        },
        {
          "line": 234,
          "content": "logger.error('Error getting user app URL:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting user app URL:', error"
        },
        {
          "line": 234,
          "content": "logger.error('Error getting user app URL:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting user app URL:', error"
        },
        {
          "line": 234,
          "content": "logger.error('Error getting user app URL:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting user app URL:', error"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting user app URL for port:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting user app URL for port:', error"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting user app URL for port:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting user app URL for port:', error"
        },
        {
          "line": 268,
          "content": "logger.error('Error getting user app URL for port:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting user app URL for port:', error"
        },
        {
          "line": 288,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "direct_data",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 288,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "variable_data",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 288,
          "content": "logger.error('Error monitoring terminal:', error);",
          "type": "error_object",
          "match": "logger.error('Error monitoring terminal:', error"
        },
        {
          "line": 314,
          "content": "logger.info('Detected dev server for workspace:', devServerUrl);",
          "type": "direct_data",
          "match": "logger.info('Detected dev server for workspace:', devServerUrl"
        },
        {
          "line": 314,
          "content": "logger.info('Detected dev server for workspace:', devServerUrl);",
          "type": "variable_data",
          "match": "logger.info('Detected dev server for workspace:', devServerUrl"
        },
        {
          "line": 330,
          "content": "logger.error('Error setting workspace path:', error);",
          "type": "direct_data",
          "match": "logger.error('Error setting workspace path:', error"
        },
        {
          "line": 330,
          "content": "logger.error('Error setting workspace path:', error);",
          "type": "variable_data",
          "match": "logger.error('Error setting workspace path:', error"
        },
        {
          "line": 330,
          "content": "logger.error('Error setting workspace path:', error);",
          "type": "error_object",
          "match": "logger.error('Error setting workspace path:', error"
        },
        {
          "line": 353,
          "content": "logger.error('Error getting workspace info:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting workspace info:', error"
        },
        {
          "line": 353,
          "content": "logger.error('Error getting workspace info:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting workspace info:', error"
        },
        {
          "line": 353,
          "content": "logger.error('Error getting workspace info:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting workspace info:', error"
        },
        {
          "line": 382,
          "content": "logger.error('Error detecting workspace paths:', error);",
          "type": "direct_data",
          "match": "logger.error('Error detecting workspace paths:', error"
        },
        {
          "line": 382,
          "content": "logger.error('Error detecting workspace paths:', error);",
          "type": "variable_data",
          "match": "logger.error('Error detecting workspace paths:', error"
        },
        {
          "line": 382,
          "content": "logger.error('Error detecting workspace paths:', error);",
          "type": "error_object",
          "match": "logger.error('Error detecting workspace paths:', error"
        },
        {
          "line": 468,
          "content": "logger.error('Error debugging DOM:', error);",
          "type": "direct_data",
          "match": "logger.error('Error debugging DOM:', error"
        },
        {
          "line": 468,
          "content": "logger.error('Error debugging DOM:', error);",
          "type": "variable_data",
          "match": "logger.error('Error debugging DOM:', error"
        },
        {
          "line": 468,
          "content": "logger.error('Error debugging DOM:', error);",
          "type": "error_object",
          "match": "logger.error('Error debugging DOM:', error"
        },
        {
          "line": 492,
          "content": "logger.error('Error detecting workspaces:', error);",
          "type": "direct_data",
          "match": "logger.error('Error detecting workspaces:', error"
        },
        {
          "line": 492,
          "content": "logger.error('Error detecting workspaces:', error);",
          "type": "variable_data",
          "match": "logger.error('Error detecting workspaces:', error"
        },
        {
          "line": 492,
          "content": "logger.error('Error detecting workspaces:', error);",
          "type": "error_object",
          "match": "logger.error('Error detecting workspaces:', error"
        },
        {
          "line": 510,
          "content": "logger.info(`Detecting workspace for port ${portNum}`);",
          "type": "template_data",
          "match": "logger.info(`Detecting workspace for port ${portNum}`"
        },
        {
          "line": 518,
          "content": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "direct_data",
          "match": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath"
        },
        {
          "line": 518,
          "content": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "variable_data",
          "match": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath"
        },
        {
          "line": 518,
          "content": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "template_data",
          "match": "logger.info(`Workspace detection completed for port ${portNum}:`"
        },
        {
          "line": 518,
          "content": "logger.info(`Workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "ide_data",
          "match": "logger.info(`Workspace detection completed for port ${portNum}:`, workspace"
        },
        {
          "line": 527,
          "content": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 527,
          "content": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 527,
          "content": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error detecting workspace for port ${req.params.port}:`"
        },
        {
          "line": 527,
          "content": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 545,
          "content": "logger.info(`Force detecting workspace for port ${portNum} (clearing cache)`);",
          "type": "template_data",
          "match": "logger.info(`Force detecting workspace for port ${portNum} (clearing cache)`"
        },
        {
          "line": 549,
          "content": "logger.info(`Cleared cached workspace for port ${portNum}`);",
          "type": "template_data",
          "match": "logger.info(`Cleared cached workspace for port ${portNum}`"
        },
        {
          "line": 554,
          "content": "logger.info(`Cleared FileBasedWorkspaceDetector cache for port ${portNum}`);",
          "type": "template_data",
          "match": "logger.info(`Cleared FileBasedWorkspaceDetector cache for port ${portNum}`"
        },
        {
          "line": 572,
          "content": "logger.info(`Deleted cached directory: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted cached directory: ${filePath}`"
        },
        {
          "line": 576,
          "content": "logger.info(`Deleted cached file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Deleted cached file: ${filePath}`"
        },
        {
          "line": 579,
          "content": "logger.info(`Cleared disk cache for port ${portNum}`);",
          "type": "template_data",
          "match": "logger.info(`Cleared disk cache for port ${portNum}`"
        },
        {
          "line": 581,
          "content": "logger.error(`Error clearing disk cache for port ${portNum}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error clearing disk cache for port ${portNum}:`, error"
        },
        {
          "line": 581,
          "content": "logger.error(`Error clearing disk cache for port ${portNum}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error clearing disk cache for port ${portNum}:`, error"
        },
        {
          "line": 581,
          "content": "logger.error(`Error clearing disk cache for port ${portNum}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error clearing disk cache for port ${portNum}:`"
        },
        {
          "line": 581,
          "content": "logger.error(`Error clearing disk cache for port ${portNum}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error clearing disk cache for port ${portNum}:`, error"
        },
        {
          "line": 592,
          "content": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "direct_data",
          "match": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath"
        },
        {
          "line": 592,
          "content": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "variable_data",
          "match": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath"
        },
        {
          "line": 592,
          "content": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "template_data",
          "match": "logger.info(`Force workspace detection completed for port ${portNum}:`"
        },
        {
          "line": 592,
          "content": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspacePath);",
          "type": "ide_data",
          "match": "logger.info(`Force workspace detection completed for port ${portNum}:`, workspace"
        },
        {
          "line": 601,
          "content": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 601,
          "content": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 601,
          "content": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error force detecting workspace for port ${req.params.port}:`"
        },
        {
          "line": 601,
          "content": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error force detecting workspace for port ${req.params.port}:`, error"
        },
        {
          "line": 624,
          "content": "logger.error('Error getting detection stats:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting detection stats:', error"
        },
        {
          "line": 624,
          "content": "logger.error('Error getting detection stats:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting detection stats:', error"
        },
        {
          "line": 624,
          "content": "logger.error('Error getting detection stats:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting detection stats:', error"
        },
        {
          "line": 647,
          "content": "logger.error('Error clearing detection results:', error);",
          "type": "direct_data",
          "match": "logger.error('Error clearing detection results:', error"
        },
        {
          "line": 647,
          "content": "logger.error('Error clearing detection results:', error);",
          "type": "variable_data",
          "match": "logger.error('Error clearing detection results:', error"
        },
        {
          "line": 647,
          "content": "logger.error('Error clearing detection results:', error);",
          "type": "error_object",
          "match": "logger.error('Error clearing detection results:', error"
        },
        {
          "line": 682,
          "content": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error"
        },
        {
          "line": 682,
          "content": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error"
        },
        {
          "line": 682,
          "content": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error executing terminal command for port ${req.params.port}:`"
        },
        {
          "line": 682,
          "content": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing terminal command for port ${req.params.port}:`, error"
        },
        {
          "line": 714,
          "content": "logger.error('Error in getDocsTasks:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in getDocsTasks:', error"
        },
        {
          "line": 714,
          "content": "logger.error('Error in getDocsTasks:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in getDocsTasks:', error"
        },
        {
          "line": 714,
          "content": "logger.error('Error in getDocsTasks:', error);",
          "type": "error_object",
          "match": "logger.error('Error in getDocsTasks:', error"
        },
        {
          "line": 752,
          "content": "logger.error('Error in getDocsTaskDetails:', error);",
          "type": "direct_data",
          "match": "logger.error('Error in getDocsTaskDetails:', error"
        },
        {
          "line": 752,
          "content": "logger.error('Error in getDocsTaskDetails:', error);",
          "type": "variable_data",
          "match": "logger.error('Error in getDocsTaskDetails:', error"
        },
        {
          "line": 752,
          "content": "logger.error('Error in getDocsTaskDetails:', error);",
          "type": "error_object",
          "match": "logger.error('Error in getDocsTaskDetails:', error"
        },
        {
          "line": 765,
          "content": "logger.info(`Clicking New Chat for port ${port}${message ? ` with message: ${message}` : ''}`);",
          "type": "template_data",
          "match": "logger.info(`Clicking New Chat for port ${port}${message ? ` with message: ${message}`"
        },
        {
          "line": 780,
          "content": "logger.info(`Successfully clicked New Chat button on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Successfully clicked New Chat button on port ${port}`"
        },
        {
          "line": 784,
          "content": "logger.info(`Typing message: ${message}`);",
          "type": "template_data",
          "match": "logger.info(`Typing message: ${message}`"
        },
        {
          "line": 796,
          "content": "logger.error('Error clicking New Chat:', error);",
          "type": "direct_data",
          "match": "logger.error('Error clicking New Chat:', error"
        },
        {
          "line": 796,
          "content": "logger.error('Error clicking New Chat:', error);",
          "type": "variable_data",
          "match": "logger.error('Error clicking New Chat:', error"
        },
        {
          "line": 796,
          "content": "logger.error('Error clicking New Chat:', error);",
          "type": "error_object",
          "match": "logger.error('Error clicking New Chat:', error"
        },
        {
          "line": 822,
          "content": "logger.info(`Executing terminal command with capture for port ${port}: ${command}`);",
          "type": "template_data",
          "match": "logger.info(`Executing terminal command with capture for port ${port}: ${command}`"
        },
        {
          "line": 839,
          "content": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error"
        },
        {
          "line": 839,
          "content": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error"
        },
        {
          "line": 839,
          "content": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`"
        },
        {
          "line": 839,
          "content": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error executing terminal command with capture for port ${req.params.port}:`, error"
        },
        {
          "line": 857,
          "content": "logger.info(`Getting terminal logs for port ${port}, lines: ${lines}`);",
          "type": "direct_data",
          "match": "logger.info(`Getting terminal logs for port ${port}, lines: ${lines}`"
        },
        {
          "line": 857,
          "content": "logger.info(`Getting terminal logs for port ${port}, lines: ${lines}`);",
          "type": "variable_data",
          "match": "logger.info(`Getting terminal logs for port ${port}, lines"
        },
        {
          "line": 857,
          "content": "logger.info(`Getting terminal logs for port ${port}, lines: ${lines}`);",
          "type": "template_data",
          "match": "logger.info(`Getting terminal logs for port ${port}, lines: ${lines}`"
        },
        {
          "line": 869,
          "content": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 869,
          "content": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 869,
          "content": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting terminal logs for port ${req.params.port}:`"
        },
        {
          "line": 869,
          "content": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 894,
          "content": "logger.info(`Searching terminal logs for port ${port}: \"${searchText}\"`);",
          "type": "template_data",
          "match": "logger.info(`Searching terminal logs for port ${port}: \"${searchText}\"`"
        },
        {
          "line": 913,
          "content": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 913,
          "content": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 913,
          "content": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error searching terminal logs for port ${req.params.port}:`"
        },
        {
          "line": 913,
          "content": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error searching terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 931,
          "content": "logger.info(`Exporting terminal logs for port ${port} in ${format} format`);",
          "type": "template_data",
          "match": "logger.info(`Exporting terminal logs for port ${port} in ${format} format`"
        },
        {
          "line": 948,
          "content": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 948,
          "content": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 948,
          "content": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`"
        },
        {
          "line": 948,
          "content": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error exporting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 965,
          "content": "logger.info(`Deleting terminal logs for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Deleting terminal logs for port ${port}`"
        },
        {
          "line": 979,
          "content": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 979,
          "content": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 979,
          "content": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`"
        },
        {
          "line": 979,
          "content": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error deleting terminal logs for port ${req.params.port}:`, error"
        },
        {
          "line": 996,
          "content": "logger.info(`Getting capture status for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Getting capture status for port ${port}`"
        },
        {
          "line": 1008,
          "content": "logger.error(`Error getting capture status for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error getting capture status for port ${req.params.port}:`, error"
        },
        {
          "line": 1008,
          "content": "logger.error(`Error getting capture status for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error getting capture status for port ${req.params.port}:`, error"
        },
        {
          "line": 1008,
          "content": "logger.error(`Error getting capture status for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error getting capture status for port ${req.params.port}:`"
        },
        {
          "line": 1008,
          "content": "logger.error(`Error getting capture status for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error getting capture status for port ${req.params.port}:`, error"
        },
        {
          "line": 1025,
          "content": "logger.info(`Initializing terminal log capture for port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Initializing terminal log capture for port ${port}`"
        },
        {
          "line": 1037,
          "content": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error);",
          "type": "direct_data",
          "match": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error"
        },
        {
          "line": 1037,
          "content": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error);",
          "type": "variable_data",
          "match": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error"
        },
        {
          "line": 1037,
          "content": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error);",
          "type": "template_data",
          "match": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`"
        },
        {
          "line": 1037,
          "content": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error);",
          "type": "error_object",
          "match": "logger.error(`Error initializing terminal log capture for port ${req.params.port}:`, error"
        },
        {
          "line": 1082,
          "content": "logger.error('Error starting VSCode:', error);",
          "type": "direct_data",
          "match": "logger.error('Error starting VSCode:', error"
        },
        {
          "line": 1082,
          "content": "logger.error('Error starting VSCode:', error);",
          "type": "variable_data",
          "match": "logger.error('Error starting VSCode:', error"
        },
        {
          "line": 1082,
          "content": "logger.error('Error starting VSCode:', error);",
          "type": "error_object",
          "match": "logger.error('Error starting VSCode:', error"
        },
        {
          "line": 1105,
          "content": "logger.error('Error getting VSCode extensions:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting VSCode extensions:', error"
        },
        {
          "line": 1105,
          "content": "logger.error('Error getting VSCode extensions:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting VSCode extensions:', error"
        },
        {
          "line": 1105,
          "content": "logger.error('Error getting VSCode extensions:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting VSCode extensions:', error"
        },
        {
          "line": 1128,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 1128,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 1128,
          "content": "logger.error('Error getting VSCode workspace info:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting VSCode workspace info:', error"
        },
        {
          "line": 1156,
          "content": "logger.error('Error sending message to VSCode:', error);",
          "type": "direct_data",
          "match": "logger.error('Error sending message to VSCode:', error"
        },
        {
          "line": 1156,
          "content": "logger.error('Error sending message to VSCode:', error);",
          "type": "variable_data",
          "match": "logger.error('Error sending message to VSCode:', error"
        },
        {
          "line": 1156,
          "content": "logger.error('Error sending message to VSCode:', error);",
          "type": "error_object",
          "match": "logger.error('Error sending message to VSCode:', error"
        },
        {
          "line": 1179,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "direct_data",
          "match": "logger.error('Error getting VSCode status:', error"
        },
        {
          "line": 1179,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "variable_data",
          "match": "logger.error('Error getting VSCode status:', error"
        },
        {
          "line": 1179,
          "content": "logger.error('Error getting VSCode status:', error);",
          "type": "error_object",
          "match": "logger.error('Error getting VSCode status:', error"
        }
      ]
    },
    "./backend/presentation/api/WorkflowController.js": {
      "totalFindings": 39,
      "byType": {
        "direct_data": 36,
        "variable_data": 2,
        "object_data": 1
      },
      "findings": [
        {
          "line": 46,
          "content": "this.logger.info('WorkflowController: Received request body', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Received request body', {"
        },
        {
          "line": 67,
          "content": "this.logger.info('WorkflowController: Extracted taskOptions', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Extracted taskOptions', {"
        },
        {
          "line": 94,
          "content": "this.logger.info('WorkflowController: Using workspace path from File-based detection', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Using workspace path from File-based detection', {"
        },
        {
          "line": 102,
          "content": "this.logger.warn('WorkflowController: File-based detection failed, using project root', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowController: File-based detection failed, using project root', {"
        },
        {
          "line": 102,
          "content": "this.logger.warn('WorkflowController: File-based detection failed, using project root', {",
          "type": "variable_data",
          "match": "logger.warn('WorkflowController: File-based detection failed, using"
        },
        {
          "line": 116,
          "content": "this.logger.info('WorkflowController: Using project root as final fallback', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Using project root as final fallback', {"
        },
        {
          "line": 121,
          "content": "this.logger.info('WorkflowController: Using workspace path', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Using workspace path', {"
        },
        {
          "line": 127,
          "content": "this.logger.info('WorkflowController: Checking task execution request', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Checking task execution request', {"
        },
        {
          "line": 134,
          "content": "this.logger.info('WorkflowController: Processing task execution request', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Processing task execution request', {"
        },
        {
          "line": 147,
          "content": "this.logger.info('WorkflowController: Git branch created', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Git branch created', {"
        },
        {
          "line": 152,
          "content": "this.logger.error('WorkflowController: Failed to create Git branch', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to create Git branch', {"
        },
        {
          "line": 165,
          "content": "this.logger.info('WorkflowController: Active IDE found', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Active IDE found', {"
        },
        {
          "line": 186,
          "content": "this.logger.info('WorkflowController: Port switched successfully', { port: activeIDE.port });",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Port switched successfully', { port: activeIDE.port }"
        },
        {
          "line": 186,
          "content": "this.logger.info('WorkflowController: Port switched successfully', { port: activeIDE.port });",
          "type": "object_data",
          "match": "logger.info('WorkflowController: Port switched successfully', { port: activeIDE.port }"
        },
        {
          "line": 218,
          "content": "this.logger.info('WorkflowController: New chat created successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: New chat created successfully', {"
        },
        {
          "line": 229,
          "content": "this.logger.error('WorkflowController: Failed to click new chat', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to click new chat', {"
        },
        {
          "line": 236,
          "content": "this.logger.info('WorkflowController: New Chat process completed, proceeding to task execution');",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: New Chat process completed, proceeding to task execution'"
        },
        {
          "line": 236,
          "content": "this.logger.info('WorkflowController: New Chat process completed, proceeding to task execution');",
          "type": "variable_data",
          "match": "logger.info('WorkflowController: New Chat process completed, proceeding"
        },
        {
          "line": 241,
          "content": "this.logger.info('WorkflowController: TaskService available', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: TaskService available', {"
        },
        {
          "line": 247,
          "content": "this.logger.info('WorkflowController: Starting task execution', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Starting task execution', {"
        },
        {
          "line": 260,
          "content": "this.logger.info('WorkflowController: Task executed successfully', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Task executed successfully', {"
        },
        {
          "line": 280,
          "content": "this.logger.error('WorkflowController: Failed to execute task', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to execute task', {"
        },
        {
          "line": 354,
          "content": "this.logger.info('WorkflowController: Executing Categories-based step', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Executing Categories-based step', {"
        },
        {
          "line": 393,
          "content": "this.logger.info('WorkflowController: Workflow execution saved to database', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow execution saved to database', {"
        },
        {
          "line": 398,
          "content": "this.logger.warn('WorkflowController: Failed to save workflow execution to database', {",
          "type": "direct_data",
          "match": "logger.warn('WorkflowController: Failed to save workflow execution to database', {"
        },
        {
          "line": 405,
          "content": "this.logger.info('WorkflowController: Workflow execution completed with Categories', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow execution completed with Categories', {"
        },
        {
          "line": 435,
          "content": "this.logger.error('WorkflowController: Failed to execute workflow', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to execute workflow', {"
        },
        {
          "line": 474,
          "content": "this.logger.info('WorkflowController: Workflow status retrieved', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow status retrieved', {"
        },
        {
          "line": 485,
          "content": "this.logger.error('WorkflowController: Failed to get workflow status', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to get workflow status', {"
        },
        {
          "line": 515,
          "content": "this.logger.info('WorkflowController: Workflow progress retrieved', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow progress retrieved', {"
        },
        {
          "line": 526,
          "content": "this.logger.error('WorkflowController: Failed to get workflow progress', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to get workflow progress', {"
        },
        {
          "line": 556,
          "content": "this.logger.info('WorkflowController: Workflow results retrieved', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow results retrieved', {"
        },
        {
          "line": 567,
          "content": "this.logger.error('WorkflowController: Failed to get workflow results', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to get workflow results', {"
        },
        {
          "line": 612,
          "content": "this.logger.info('WorkflowController: Workflow sessions retrieved', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow sessions retrieved', {"
        },
        {
          "line": 631,
          "content": "this.logger.error('WorkflowController: Failed to get workflow sessions', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to get workflow sessions', {"
        },
        {
          "line": 661,
          "content": "this.logger.info('WorkflowController: Workflow statistics retrieved', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Workflow statistics retrieved', {"
        },
        {
          "line": 671,
          "content": "this.logger.error('WorkflowController: Failed to get workflow statistics', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to get workflow statistics', {"
        },
        {
          "line": 693,
          "content": "this.logger.info('WorkflowController: Stopping workflow', {",
          "type": "direct_data",
          "match": "logger.info('WorkflowController: Stopping workflow', {"
        },
        {
          "line": 712,
          "content": "this.logger.error('WorkflowController: Failed to stop workflow', {",
          "type": "direct_data",
          "match": "logger.error('WorkflowController: Failed to stop workflow', {"
        }
      ]
    },
    "./backend/presentation/api/AnalyzeAllController.js": {
      "totalFindings": 24,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6,
        "template_data": 6
      },
      "findings": [
        {
          "line": 60,
          "content": "logger.error('❌ Analyze All failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Analyze All failed:', error.message"
        },
        {
          "line": 60,
          "content": "logger.error('❌ Analyze All failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Analyze All failed:', error"
        },
        {
          "line": 60,
          "content": "logger.error('❌ Analyze All failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Analyze All failed:', error"
        },
        {
          "line": 81,
          "content": "logger.warn('⚠️ Could not retrieve all frameworks:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ Could not retrieve all frameworks:', error.message"
        },
        {
          "line": 81,
          "content": "logger.warn('⚠️ Could not retrieve all frameworks:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ Could not retrieve all frameworks:', error"
        },
        {
          "line": 81,
          "content": "logger.warn('⚠️ Could not retrieve all frameworks:', error.message);",
          "type": "error_object",
          "match": "logger.warn('⚠️ Could not retrieve all frameworks:', error"
        },
        {
          "line": 98,
          "content": "logger.warn('⚠️ Could not retrieve all workflows:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('⚠️ Could not retrieve all workflows:', error.message"
        },
        {
          "line": 98,
          "content": "logger.warn('⚠️ Could not retrieve all workflows:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('⚠️ Could not retrieve all workflows:', error"
        },
        {
          "line": 98,
          "content": "logger.warn('⚠️ Could not retrieve all workflows:', error.message);",
          "type": "error_object",
          "match": "logger.warn('⚠️ Could not retrieve all workflows:', error"
        },
        {
          "line": 108,
          "content": "logger.info(`🔧 Executing framework: ${framework.name}`);",
          "type": "template_data",
          "match": "logger.info(`🔧 Executing framework: ${framework.name}`"
        },
        {
          "line": 125,
          "content": "logger.info(`✅ Framework ${framework.name} completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Framework ${framework.name} completed`"
        },
        {
          "line": 127,
          "content": "logger.error(`❌ Framework ${framework.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Framework ${framework.name} failed:`, error.message"
        },
        {
          "line": 127,
          "content": "logger.error(`❌ Framework ${framework.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Framework ${framework.name} failed:`, error"
        },
        {
          "line": 127,
          "content": "logger.error(`❌ Framework ${framework.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Framework ${framework.name} failed:`"
        },
        {
          "line": 127,
          "content": "logger.error(`❌ Framework ${framework.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Framework ${framework.name} failed:`, error"
        },
        {
          "line": 146,
          "content": "logger.info(`🔄 Executing workflow: ${workflow.name}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 Executing workflow: ${workflow.name}`"
        },
        {
          "line": 163,
          "content": "logger.info(`✅ Workflow ${workflow.name} completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Workflow ${workflow.name} completed`"
        },
        {
          "line": 165,
          "content": "logger.error(`❌ Workflow ${workflow.name} failed:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Workflow ${workflow.name} failed:`, error.message"
        },
        {
          "line": 165,
          "content": "logger.error(`❌ Workflow ${workflow.name} failed:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Workflow ${workflow.name} failed:`, error"
        },
        {
          "line": 165,
          "content": "logger.error(`❌ Workflow ${workflow.name} failed:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Workflow ${workflow.name} failed:`"
        },
        {
          "line": 165,
          "content": "logger.error(`❌ Workflow ${workflow.name} failed:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Workflow ${workflow.name} failed:`, error"
        },
        {
          "line": 199,
          "content": "logger.error('❌ Documentation workflow failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Documentation workflow failed:', error.message"
        },
        {
          "line": 199,
          "content": "logger.error('❌ Documentation workflow failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Documentation workflow failed:', error"
        },
        {
          "line": 199,
          "content": "logger.error('❌ Documentation workflow failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Documentation workflow failed:', error"
        }
      ]
    },
    "./backend/scripts/validate-git-workflow-deployment.js": {
      "totalFindings": 13,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "error_object": 2,
        "template_data": 7
      },
      "findings": [
        {
          "line": 64,
          "content": "logger.error('❌ Validation failed with error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Validation failed with error:', error.message"
        },
        {
          "line": 64,
          "content": "logger.error('❌ Validation failed with error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Validation failed with error:', error"
        },
        {
          "line": 64,
          "content": "logger.error('❌ Validation failed with error:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Validation failed with error:', error"
        },
        {
          "line": 461,
          "content": "logger.info(`✅ ${message}`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${message}`"
        },
        {
          "line": 469,
          "content": "logger.info(`⚠️ ${message}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ ${message}`"
        },
        {
          "line": 478,
          "content": "logger.info(`❌ ${message}`);",
          "type": "template_data",
          "match": "logger.info(`❌ ${message}`"
        },
        {
          "line": 487,
          "content": "logger.info(`✅ Passed: ${this.validationResults.passed}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passed: ${this.validationResults.passed}`"
        },
        {
          "line": 488,
          "content": "logger.info(`⚠️ Warnings: ${this.validationResults.warnings}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Warnings: ${this.validationResults.warnings}`"
        },
        {
          "line": 489,
          "content": "logger.info(`❌ Failed: ${this.validationResults.failed}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${this.validationResults.failed}`"
        },
        {
          "line": 494,
          "content": "logger.info(`${index + 1}. ${error}`);",
          "type": "template_data",
          "match": "logger.info(`${index + 1}. ${error}`"
        },
        {
          "line": 527,
          "content": "logger.error('Validation script failed:', error);",
          "type": "direct_data",
          "match": "logger.error('Validation script failed:', error"
        },
        {
          "line": 527,
          "content": "logger.error('Validation script failed:', error);",
          "type": "variable_data",
          "match": "logger.error('Validation script failed:', error"
        },
        {
          "line": 527,
          "content": "logger.error('Validation script failed:', error);",
          "type": "error_object",
          "match": "logger.error('Validation script failed:', error"
        }
      ]
    },
    "./backend/scripts/fix-imports.js": {
      "totalFindings": 7,
      "byType": {
        "template_data": 4,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "logger.info(`Processing directory: ${dir} (${files.length} items)`);",
          "type": "template_data",
          "match": "logger.info(`Processing directory: ${dir} (${files.length} items)`"
        },
        {
          "line": 36,
          "content": "logger.info(`Checking file: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Checking file: ${filePath}`"
        },
        {
          "line": 56,
          "content": "logger.info(`Fixed imports in: ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`Fixed imports in: ${filePath}`"
        },
        {
          "line": 64,
          "content": "logger.error(`Error processing ${filePath}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`Error processing ${filePath}:`, error.message"
        },
        {
          "line": 64,
          "content": "logger.error(`Error processing ${filePath}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`Error processing ${filePath}:`, error"
        },
        {
          "line": 64,
          "content": "logger.error(`Error processing ${filePath}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`Error processing ${filePath}:`"
        },
        {
          "line": 64,
          "content": "logger.error(`Error processing ${filePath}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`Error processing ${filePath}:`, error"
        }
      ]
    },
    "./backend/scripts/create-test-user.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 4,
        "direct_data": 3,
        "variable_data": 3,
        "error_object": 1
      },
      "findings": [
        {
          "line": 14,
          "content": "logger.info(`📁 Database path: ${dbPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Database path: ${dbPath}`"
        },
        {
          "line": 18,
          "content": "logger.error('❌ Error opening database:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error opening database:', err.message"
        },
        {
          "line": 18,
          "content": "logger.error('❌ Error opening database:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error opening database:', err"
        },
        {
          "line": 52,
          "content": "logger.error('❌ Error creating user:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error creating user:', err.message"
        },
        {
          "line": 52,
          "content": "logger.error('❌ Error creating user:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error creating user:', err"
        },
        {
          "line": 56,
          "content": "logger.info(`📧 Email: ${email}`);",
          "type": "template_data",
          "match": "logger.info(`📧 Email: ${email}`"
        },
        {
          "line": 57,
          "content": "logger.info(`🔑 Password: ${password}`);",
          "type": "template_data",
          "match": "logger.info(`🔑 Password: ${password}`"
        },
        {
          "line": 58,
          "content": "logger.info(`🆔 User ID: ${userId}`);",
          "type": "template_data",
          "match": "logger.info(`🆔 User ID: ${userId}`"
        },
        {
          "line": 65,
          "content": "logger.error('❌ Error creating test user:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error creating test user:', error.message"
        },
        {
          "line": 65,
          "content": "logger.error('❌ Error creating test user:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error creating test user:', error"
        },
        {
          "line": 65,
          "content": "logger.error('❌ Error creating test user:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error creating test user:', error"
        }
      ]
    },
    "./backend/scripts/test-management/test-versioner.js": {
      "totalFindings": 23,
      "byType": {
        "template_data": 22,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 35,
          "content": "logger.debug(`🔄 Versioning test file: ${path.basename(filePath)}`);",
          "type": "template_data",
          "match": "logger.debug(`🔄 Versioning test file: ${path.basename(filePath)}`"
        },
        {
          "line": 66,
          "content": "logger.info(`✅ Successfully versioned to ${version}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully versioned to ${version}`"
        },
        {
          "line": 70,
          "content": "logger.error(`❌ Failed to version test: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to version test: ${error.message}`"
        },
        {
          "line": 90,
          "content": "logger.info(`💾 Backup created: ${path.basename(backupPath)}`);",
          "type": "template_data",
          "match": "logger.info(`💾 Backup created: ${path.basename(backupPath)}`"
        },
        {
          "line": 207,
          "content": "logger.error(`❌ Failed to compare versions: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to compare versions: ${error.message}`"
        },
        {
          "line": 219,
          "content": "logger.info(`🔄 Rolling back ${path.basename(filePath)} to version ${version}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 Rolling back ${path.basename(filePath)} to version ${version}`"
        },
        {
          "line": 266,
          "content": "logger.info(`✅ Successfully rolled back to version ${version}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully rolled back to version ${version}`"
        },
        {
          "line": 270,
          "content": "logger.error(`❌ Failed to rollback: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to rollback: ${error.message}`"
        },
        {
          "line": 283,
          "content": "logger.info(`🔄 Migrating ${path.basename(filePath)} to ${targetFramework}`);",
          "type": "template_data",
          "match": "logger.info(`🔄 Migrating ${path.basename(filePath)} to ${targetFramework}`"
        },
        {
          "line": 337,
          "content": "logger.info(`✅ Successfully migrated to ${targetFramework}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successfully migrated to ${targetFramework}`"
        },
        {
          "line": 341,
          "content": "logger.error(`❌ Failed to migrate test: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to migrate test: ${error.message}`"
        },
        {
          "line": 464,
          "content": "logger.info(`📄 Versioning data exported to: ${outputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Versioning data exported to: ${outputPath}`"
        },
        {
          "line": 466,
          "content": "logger.error(`❌ Failed to export versioning data: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to export versioning data: ${error.message}`"
        },
        {
          "line": 505,
          "content": "logger.error(`❌ Error generating versioning report: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error generating versioning report: ${error.message}`"
        },
        {
          "line": 546,
          "content": "logger.info(`Test versioned successfully: ${args[1]} -> ${args[2]}`);",
          "type": "template_data",
          "match": "logger.info(`Test versioned successfully: ${args[1]} -> ${args[2]}`"
        },
        {
          "line": 555,
          "content": "logger.info(`Version comparison completed: ${args[2]} vs ${args[3]}`);",
          "type": "template_data",
          "match": "logger.info(`Version comparison completed: ${args[2]} vs ${args[3]}`"
        },
        {
          "line": 564,
          "content": "logger.info(`Rollback completed: ${args[1]} -> ${args[2]}`);",
          "type": "template_data",
          "match": "logger.info(`Rollback completed: ${args[1]} -> ${args[2]}`"
        },
        {
          "line": 573,
          "content": "logger.info(`Migration completed: ${args[1]} -> ${args[2]}`);",
          "type": "template_data",
          "match": "logger.info(`Migration completed: ${args[1]} -> ${args[2]}`"
        },
        {
          "line": 582,
          "content": "logger.info(`Version history for ${args[1]}: ${history.length} versions`);",
          "type": "template_data",
          "match": "logger.info(`Version history for ${args[1]}: ${history.length} versions`"
        },
        {
          "line": 587,
          "content": "logger.info(`Versioning report generated: ${report.totalFiles} files, ${report.totalVersions} versions`);",
          "type": "direct_data",
          "match": "logger.info(`Versioning report generated: ${report.totalFiles} files, ${report.totalVersions} versions`"
        },
        {
          "line": 587,
          "content": "logger.info(`Versioning report generated: ${report.totalFiles} files, ${report.totalVersions} versions`);",
          "type": "template_data",
          "match": "logger.info(`Versioning report generated: ${report.totalFiles} files, ${report.totalVersions} versions`"
        },
        {
          "line": 599,
          "content": "logger.error(`❌ Unknown command: ${command}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Unknown command: ${command}`"
        },
        {
          "line": 603,
          "content": "logger.error(`❌ Error: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error: ${error.message}`"
        }
      ]
    },
    "./backend/scripts/test-management/test-reporter.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 4
      },
      "findings": [
        {
          "line": 79,
          "content": "logger.debug(`✅ Test metadata exported to: ${dataFile}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Test metadata exported to: ${dataFile}`"
        },
        {
          "line": 214,
          "content": "logger.info(`📄 Report saved to: ${output}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Report saved to: ${output}`"
        },
        {
          "line": 280,
          "content": "logger.info(`📊 Full analysis saved to: ${fullOutputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📊 Full analysis saved to: ${fullOutputPath}`"
        },
        {
          "line": 485,
          "content": "logger.info(`📄 Full Markdown report saved to: ${fullMdPath}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Full Markdown report saved to: ${fullMdPath}`"
        }
      ]
    },
    "./backend/scripts/test-management/test-branch-strategy.js": {
      "totalFindings": 16,
      "byType": {
        "template_data": 13,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 44,
          "content": "logger.debug(`  ID: ${testTask.id}`);",
          "type": "template_data",
          "match": "logger.debug(`  ID: ${testTask.id}`"
        },
        {
          "line": 45,
          "content": "logger.debug(`  Title: ${testTask.title}`);",
          "type": "template_data",
          "match": "logger.debug(`  Title: ${testTask.title}`"
        },
        {
          "line": 46,
          "content": "logger.debug(`  Type: ${testTask.type.value}`);",
          "type": "template_data",
          "match": "logger.debug(`  Type: ${testTask.type.value}`"
        },
        {
          "line": 47,
          "content": "logger.debug(`  Task Type: ${testTask.metadata.taskType}\\n`);",
          "type": "template_data",
          "match": "logger.debug(`  Task Type: ${testTask.metadata.taskType}\\n`"
        },
        {
          "line": 52,
          "content": "logger.info(`  Strategy Type: ${branchStrategy.type}`);",
          "type": "template_data",
          "match": "logger.info(`  Strategy Type: ${branchStrategy.type}`"
        },
        {
          "line": 53,
          "content": "logger.info(`  Prefix: ${branchStrategy.prefix}`);",
          "type": "template_data",
          "match": "logger.info(`  Prefix: ${branchStrategy.prefix}`"
        },
        {
          "line": 54,
          "content": "logger.info(`  Start Point: ${branchStrategy.startPoint}`);",
          "type": "template_data",
          "match": "logger.info(`  Start Point: ${branchStrategy.startPoint}`"
        },
        {
          "line": 55,
          "content": "logger.info(`  Merge Target: ${branchStrategy.mergeTarget}`);",
          "type": "template_data",
          "match": "logger.info(`  Merge Target: ${branchStrategy.mergeTarget}`"
        },
        {
          "line": 56,
          "content": "logger.info(`  Protection: ${branchStrategy.protection}`);",
          "type": "template_data",
          "match": "logger.info(`  Protection: ${branchStrategy.protection}`"
        },
        {
          "line": 57,
          "content": "logger.info(`  Auto-Merge: ${branchStrategy.autoMerge}`);",
          "type": "template_data",
          "match": "logger.info(`  Auto-Merge: ${branchStrategy.autoMerge}`"
        },
        {
          "line": 58,
          "content": "logger.info(`  Requires Review: ${branchStrategy.requiresReview}\\n`);",
          "type": "template_data",
          "match": "logger.info(`  Requires Review: ${branchStrategy.requiresReview}\\n`"
        },
        {
          "line": 63,
          "content": "logger.info(`  Generated Branch: ${branchName}\\n`);",
          "type": "template_data",
          "match": "logger.info(`  Generated Branch: ${branchName}\\n`"
        },
        {
          "line": 79,
          "content": "logger.info(`  ${type}: ${strategy.type} (${match ? '✅' : '❌'})`);",
          "type": "template_data",
          "match": "logger.info(`  ${type}: ${strategy.type} (${match ? '✅' : '❌'})`"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Test failed:', error.message"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Test failed:', error"
        },
        {
          "line": 98,
          "content": "logger.error('❌ Test failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Test failed:', error"
        }
      ]
    },
    "./backend/scripts/test-management/generate-test-fix-tasks.js": {
      "totalFindings": 36,
      "byType": {
        "template_data": 20,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 4
      },
      "findings": [
        {
          "line": 97,
          "content": "this.logger.error(`Unknown option: ${arg}`);",
          "type": "template_data",
          "match": "logger.error(`Unknown option: ${arg}`"
        },
        {
          "line": 164,
          "content": "this.logger.info(`Connected to IDE on port ${activeIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`Connected to IDE on port ${activeIDE.port}`"
        },
        {
          "line": 166,
          "content": "this.logger.warn('No IDE found, starting new one...');",
          "type": "direct_data",
          "match": "logger.warn('No IDE found, starting new one...'"
        },
        {
          "line": 166,
          "content": "this.logger.warn('No IDE found, starting new one...');",
          "type": "variable_data",
          "match": "logger.warn('No IDE found, starting"
        },
        {
          "line": 170,
          "content": "this.logger.warn('IDE connection failed, continuing without IDE:', error.message);",
          "type": "direct_data",
          "match": "logger.warn('IDE connection failed, continuing without IDE:', error.message"
        },
        {
          "line": 170,
          "content": "this.logger.warn('IDE connection failed, continuing without IDE:', error.message);",
          "type": "variable_data",
          "match": "logger.warn('IDE connection failed, continuing"
        },
        {
          "line": 189,
          "content": "this.logger.error('Failed to initialize services:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Failed to initialize services:', error.message"
        },
        {
          "line": 189,
          "content": "this.logger.error('Failed to initialize services:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Failed to initialize services:', error"
        },
        {
          "line": 189,
          "content": "this.logger.error('Failed to initialize services:', error.message);",
          "type": "error_object",
          "match": "logger.error('Failed to initialize services:', error"
        },
        {
          "line": 216,
          "content": "missingFiles.forEach(file => this.logger.error(`  - ${file}`));",
          "type": "template_data",
          "match": "logger.error(`  - ${file}`"
        },
        {
          "line": 241,
          "content": "this.logger.info(`Project ID: ${this.options.projectId}`);",
          "type": "template_data",
          "match": "logger.info(`Project ID: ${this.options.projectId}`"
        },
        {
          "line": 243,
          "content": "this.logger.info(`Dry run: ${this.options.dryRun}`);",
          "type": "template_data",
          "match": "logger.info(`Dry run: ${this.options.dryRun}`"
        },
        {
          "line": 244,
          "content": "this.logger.info(`Clear existing: ${this.options.clearExisting}`);",
          "type": "template_data",
          "match": "logger.info(`Clear existing: ${this.options.clearExisting}`"
        },
        {
          "line": 245,
          "content": "this.logger.info(`Load existing tasks: ${this.options.loadExistingTasks}`);",
          "type": "template_data",
          "match": "logger.info(`Load existing tasks: ${this.options.loadExistingTasks}`"
        },
        {
          "line": 246,
          "content": "this.logger.info(`Task status filter: ${this.options.taskStatus || 'none'}`);",
          "type": "template_data",
          "match": "logger.info(`Task status filter: ${this.options.taskStatus || 'none'}`"
        },
        {
          "line": 275,
          "content": "this.logger.error('Test fix task generation failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Test fix task generation failed:', error.message"
        },
        {
          "line": 275,
          "content": "this.logger.error('Test fix task generation failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Test fix task generation failed:', error"
        },
        {
          "line": 275,
          "content": "this.logger.error('Test fix task generation failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Test fix task generation failed:', error"
        },
        {
          "line": 288,
          "content": "this.logger.info(`\\nSession ID: ${result.sessionId}`);",
          "type": "template_data",
          "match": "logger.info(`\\nSession ID: ${result.sessionId}`"
        },
        {
          "line": 289,
          "content": "this.logger.info(`Duration: ${result.duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`Duration: ${result.duration}ms`"
        },
        {
          "line": 290,
          "content": "this.logger.info(`Success: ${result.success ? 'Yes' : 'No'}`);",
          "type": "template_data",
          "match": "logger.info(`Success: ${result.success ? 'Yes' : 'No'}`"
        },
        {
          "line": 294,
          "content": "this.logger.debug(`  - Failing Tests: ${result.parsedData.failingTests.length}`);",
          "type": "template_data",
          "match": "logger.debug(`  - Failing Tests: ${result.parsedData.failingTests.length}`"
        },
        {
          "line": 295,
          "content": "this.logger.info(`  - Coverage Issues: ${result.parsedData.coverageIssues.length}`);",
          "type": "template_data",
          "match": "logger.info(`  - Coverage Issues: ${result.parsedData.coverageIssues.length}`"
        },
        {
          "line": 296,
          "content": "this.logger.debug(`  - Legacy Tests: ${result.parsedData.legacyTests.length}`);",
          "type": "template_data",
          "match": "logger.debug(`  - Legacy Tests: ${result.parsedData.legacyTests.length}`"
        },
        {
          "line": 300,
          "content": "this.logger.info(`\\nTasks Generated: ${result.tasksGenerated}`);",
          "type": "template_data",
          "match": "logger.info(`\\nTasks Generated: ${result.tasksGenerated}`"
        },
        {
          "line": 306,
          "content": "this.logger.info(`  - Total Tasks: ${pr.totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  - Total Tasks: ${pr.totalTasks}`"
        },
        {
          "line": 307,
          "content": "this.logger.info(`  - Completed: ${pr.completedTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  - Completed: ${pr.completedTasks}`"
        },
        {
          "line": 308,
          "content": "this.logger.info(`  - Failed: ${pr.failedTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  - Failed: ${pr.failedTasks}`"
        },
        {
          "line": 309,
          "content": "this.logger.info(`  - Success Rate: ${pr.totalTasks > 0 ? Math.round((pr.completedTasks / pr.totalTasks) * 100) : 0}%`);",
          "type": "template_data",
          "match": "logger.info(`  - Success Rate: ${pr.totalTasks > 0 ? Math.round((pr.completedTasks / pr.totalTasks) * 100) : 0}%`"
        },
        {
          "line": 315,
          "content": "this.logger.info(`  ${index + 1}. [${rec.priority.toUpperCase()}] ${rec.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ${index + 1}. [${rec.priority.toUpperCase()}] ${rec.message}`"
        },
        {
          "line": 337,
          "content": "this.logger.error('Cleanup failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Cleanup failed:', error.message"
        },
        {
          "line": 337,
          "content": "this.logger.error('Cleanup failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Cleanup failed:', error"
        },
        {
          "line": 337,
          "content": "this.logger.error('Cleanup failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('Cleanup failed:', error"
        },
        {
          "line": 349,
          "content": "cli.logger.error('Fatal error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Fatal error:', error.message"
        },
        {
          "line": 349,
          "content": "cli.logger.error('Fatal error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Fatal error:', error"
        },
        {
          "line": 349,
          "content": "cli.logger.error('Fatal error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Fatal error:', error"
        }
      ]
    },
    "./backend/scripts/test-management/coverage-to-md.js": {
      "totalFindings": 12,
      "byType": {
        "direct_data": 3,
        "variable_data": 3,
        "template_data": 5,
        "error_object": 1
      },
      "findings": [
        {
          "line": 255,
          "content": "logger.info('📁 Found LCOV file, parsing coverage data...');",
          "type": "direct_data",
          "match": "logger.info('📁 Found LCOV file, parsing coverage data...'"
        },
        {
          "line": 255,
          "content": "logger.info('📁 Found LCOV file, parsing coverage data...');",
          "type": "variable_data",
          "match": "logger.info('📁 Found LCOV file, parsing"
        },
        {
          "line": 259,
          "content": "logger.info('⚠️  LCOV file not found, checking for coverage.txt...');",
          "type": "direct_data",
          "match": "logger.info('⚠️  LCOV file not found, checking for coverage.txt...'"
        },
        {
          "line": 259,
          "content": "logger.info('⚠️  LCOV file not found, checking for coverage.txt...');",
          "type": "variable_data",
          "match": "logger.info('⚠️  LCOV file not found, checking"
        },
        {
          "line": 274,
          "content": "logger.info(`✅ Coverage report generated: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Coverage report generated: ${outputFile}`"
        },
        {
          "line": 277,
          "content": "logger.info(`📊 Overall coverage: ${coverageData.summary.overall}%`);",
          "type": "template_data",
          "match": "logger.info(`📊 Overall coverage: ${coverageData.summary.overall}%`"
        },
        {
          "line": 278,
          "content": "logger.info(`📁 Files analyzed: ${coverageData.summary.files}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Files analyzed: ${coverageData.summary.files}`"
        },
        {
          "line": 279,
          "content": "logger.info(`✅ Files with ≥80% coverage: ${coverageData.summary.covered}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Files with ≥80% coverage: ${coverageData.summary.covered}`"
        },
        {
          "line": 285,
          "content": "logger.error('❌ Error generating coverage report:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error generating coverage report:', error.message"
        },
        {
          "line": 285,
          "content": "logger.error('❌ Error generating coverage report:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error generating coverage report:', error"
        },
        {
          "line": 285,
          "content": "logger.error('❌ Error generating coverage report:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error generating coverage report:', error"
        },
        {
          "line": 291,
          "content": "logger.info(`✅ Fallback coverage report generated: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Fallback coverage report generated: ${outputFile}`"
        }
      ]
    },
    "./backend/scripts/test-management/legacy-detector.js": {
      "totalFindings": 22,
      "byType": {
        "template_data": 18,
        "direct_data": 3,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 61,
          "content": "logger.info(`🔍 Scanning directory: ${directory}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Scanning directory: ${directory}`"
        },
        {
          "line": 62,
          "content": "logger.info(`📋 File patterns: ${filePatterns.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`📋 File patterns: ${filePatterns.join(', '"
        },
        {
          "line": 62,
          "content": "logger.info(`📋 File patterns: ${filePatterns.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`📋 File patterns: ${filePatterns.join(', ')}`"
        },
        {
          "line": 63,
          "content": "logger.info(`🎯 Minimum legacy score: ${minScore}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Minimum legacy score: ${minScore}`"
        },
        {
          "line": 69,
          "content": "logger.debug(`📁 Found ${testFiles.length} test files`);",
          "type": "template_data",
          "match": "logger.debug(`📁 Found ${testFiles.length} test files`"
        },
        {
          "line": 97,
          "content": "logger.error(`❌ Error scanning directory: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error scanning directory: ${error.message}`"
        },
        {
          "line": 118,
          "content": "logger.warn(`Warning: Could not use find command, falling back to manual search`);",
          "type": "direct_data",
          "match": "logger.warn(`Warning: Could not use find command, falling back to manual search`"
        },
        {
          "line": 118,
          "content": "logger.warn(`Warning: Could not use find command, falling back to manual search`);",
          "type": "variable_data",
          "match": "logger.warn(`Warning: Could not use find command, falling"
        },
        {
          "line": 149,
          "content": "logger.warn(`Warning: Could not read directory ${directory}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Warning: Could not read directory ${directory}: ${error.message}`"
        },
        {
          "line": 207,
          "content": "logger.info(`⚠️  ${fileName} (Score: ${result.legacyScore})`);",
          "type": "template_data",
          "match": "logger.info(`⚠️  ${fileName} (Score: ${result.legacyScore})`"
        },
        {
          "line": 210,
          "content": "logger.info(`   - ${issue.description}: ${issue.occurrences} occurrences`);",
          "type": "template_data",
          "match": "logger.info(`   - ${issue.description}: ${issue.occurrences} occurrences`"
        },
        {
          "line": 217,
          "content": "logger.warn(`Warning: Could not analyze file ${filePath}: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Warning: Could not analyze file ${filePath}: ${error.message}`"
        },
        {
          "line": 346,
          "content": "logger.info(`📁 Total files scanned: ${results.scannedFiles}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Total files scanned: ${results.scannedFiles}`"
        },
        {
          "line": 347,
          "content": "logger.info(`⚠️  Legacy files found: ${results.legacyFiles}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️  Legacy files found: ${results.legacyFiles}`"
        },
        {
          "line": 348,
          "content": "logger.info(`🎯 Total legacy score: ${results.totalLegacyScore}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Total legacy score: ${results.totalLegacyScore}`"
        },
        {
          "line": 349,
          "content": "logger.info(`📈 Average legacy score: ${results.legacyFiles > 0 ? Math.round(results.totalLegacyScore / results.legacyFiles) : 0}`);",
          "type": "template_data",
          "match": "logger.info(`📈 Average legacy score: ${results.legacyFiles > 0 ? Math.round(results.totalLegacyScore / results.legacyFiles) : 0}`"
        },
        {
          "line": 355,
          "content": "logger.info(`${index + 1}. [${rec.type.toUpperCase()}] ${rec.message}`);",
          "type": "template_data",
          "match": "logger.info(`${index + 1}. [${rec.type.toUpperCase()}] ${rec.message}`"
        },
        {
          "line": 357,
          "content": "logger.info(`   Files: ${rec.files.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`   Files: ${rec.files.join(', '"
        },
        {
          "line": 357,
          "content": "logger.info(`   Files: ${rec.files.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`   Files: ${rec.files.join(', ')}`"
        },
        {
          "line": 378,
          "content": "logger.info(`📄 Results exported to: ${outputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Results exported to: ${outputPath}`"
        },
        {
          "line": 380,
          "content": "logger.error(`❌ Failed to export results: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to export results: ${error.message}`"
        },
        {
          "line": 438,
          "content": "logger.error(`❌ Error: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error: ${error.message}`"
        }
      ]
    },
    "./backend/scripts/test-management/adjust-import-paths.js": {
      "totalFindings": 8,
      "byType": {
        "template_data": 4,
        "direct_data": 2,
        "variable_data": 2
      },
      "findings": [
        {
          "line": 116,
          "content": "logger.info(`✅ Patched: ${path.relative(process.cwd(), filePath)}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Patched: ${path.relative(process.cwd(), filePath)}`"
        },
        {
          "line": 144,
          "content": "logger.info('🔍 Gefundene Aliase:', mappings.map(m => `${m.alias} -> ${m.absPath}`));",
          "type": "direct_data",
          "match": "logger.info('🔍 Gefundene Aliase:', mappings.map(m => `${m.alias} -> ${m.absPath}`"
        },
        {
          "line": 144,
          "content": "logger.info('🔍 Gefundene Aliase:', mappings.map(m => `${m.alias} -> ${m.absPath}`));",
          "type": "variable_data",
          "match": "logger.info('🔍 Gefundene Aliase:', mappings"
        },
        {
          "line": 145,
          "content": "logger.info('🎯 Ziel-Verzeichnisse:', TARGET_DIRS);",
          "type": "direct_data",
          "match": "logger.info('🎯 Ziel-Verzeichnisse:', TARGET_DIRS"
        },
        {
          "line": 145,
          "content": "logger.info('🎯 Ziel-Verzeichnisse:', TARGET_DIRS);",
          "type": "variable_data",
          "match": "logger.info('🎯 Ziel-Verzeichnisse:', TARGET_DIRS"
        },
        {
          "line": 149,
          "content": "logger.info(`\\n📁 Durchsuche: ${dir}`);",
          "type": "template_data",
          "match": "logger.info(`\\n📁 Durchsuche: ${dir}`"
        },
        {
          "line": 153,
          "content": "logger.info(`\\n📊 Ergebnis: ${report.patched.length} Dateien geändert`);",
          "type": "template_data",
          "match": "logger.info(`\\n📊 Ergebnis: ${report.patched.length} Dateien geändert`"
        },
        {
          "line": 166,
          "content": "logger.info(`\\n📄 Import-Adjust-Report geschrieben nach: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`\\n📄 Import-Adjust-Report geschrieben nach: ${reportPath}`"
        }
      ]
    },
    "./backend/scripts/test-management/test-status-tracker.js": {
      "totalFindings": 31,
      "byType": {
        "template_data": 30,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 80,
          "content": "logger.error(`❌ Error tracking test results: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error tracking test results: ${error.message}`"
        },
        {
          "line": 121,
          "content": "logger.warn(`⚠️  Failed to process test case: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`⚠️  Failed to process test case: ${error.message}`"
        },
        {
          "line": 188,
          "content": "logger.debug(`🚨 Previously stable test now failing: ${fileName} - ${testName}`);",
          "type": "template_data",
          "match": "logger.debug(`🚨 Previously stable test now failing: ${fileName} - ${testName}`"
        },
        {
          "line": 192,
          "content": "logger.debug(`✅ Previously failing test now passing: ${fileName} - ${testName}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Previously failing test now passing: ${fileName} - ${testName}`"
        },
        {
          "line": 197,
          "content": "logger.debug(`🐌 Slow test detected: ${fileName} - ${testName} (${Math.round(testMetadata.averageDuration)}ms avg)`);",
          "type": "template_data",
          "match": "logger.debug(`🐌 Slow test detected: ${fileName} - ${testName} (${Math.round(testMetadata.averageDuration)}ms avg)`"
        },
        {
          "line": 202,
          "content": "logger.debug(`⚠️  Legacy test failing: ${fileName} - ${testName}`);",
          "type": "template_data",
          "match": "logger.debug(`⚠️  Legacy test failing: ${fileName} - ${testName}`"
        },
        {
          "line": 288,
          "content": "logger.warn(`Warning: Could not generate summary: ${error.message}`);",
          "type": "template_data",
          "match": "logger.warn(`Warning: Could not generate summary: ${error.message}`"
        },
        {
          "line": 300,
          "content": "logger.debug(`📁 Total tests processed: ${trackingResults.totalTests}`);",
          "type": "template_data",
          "match": "logger.debug(`📁 Total tests processed: ${trackingResults.totalTests}`"
        },
        {
          "line": 301,
          "content": "logger.debug(`✅ Successfully tracked: ${trackingResults.trackedTests}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Successfully tracked: ${trackingResults.trackedTests}`"
        },
        {
          "line": 302,
          "content": "logger.debug(`🔄 Updated tests: ${trackingResults.updatedTests}`);",
          "type": "template_data",
          "match": "logger.debug(`🔄 Updated tests: ${trackingResults.updatedTests}`"
        },
        {
          "line": 303,
          "content": "logger.debug(`🆕 New tests: ${trackingResults.newTests}`);",
          "type": "template_data",
          "match": "logger.debug(`🆕 New tests: ${trackingResults.newTests}`"
        },
        {
          "line": 304,
          "content": "logger.info(`❌ Errors: ${trackingResults.errors}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Errors: ${trackingResults.errors}`"
        },
        {
          "line": 310,
          "content": "logger.debug(`📊 Total tests: ${summary.total || 0}`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Total tests: ${summary.total || 0}`"
        },
        {
          "line": 311,
          "content": "logger.info(`✅ Passing: ${summary.passing || 0}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passing: ${summary.passing || 0}`"
        },
        {
          "line": 312,
          "content": "logger.info(`❌ Failing: ${summary.failing || 0}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failing: ${summary.failing || 0}`"
        },
        {
          "line": 313,
          "content": "logger.info(`⏭️  Skipped: ${summary.skipped || 0}`);",
          "type": "template_data",
          "match": "logger.info(`⏭️  Skipped: ${summary.skipped || 0}`"
        },
        {
          "line": 314,
          "content": "logger.info(`⚠️  Legacy: ${summary.legacy || 0}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️  Legacy: ${summary.legacy || 0}`"
        },
        {
          "line": 315,
          "content": "logger.debug(`🐌 Slow tests: ${summary.slowTests?.length || 0}`);",
          "type": "template_data",
          "match": "logger.debug(`🐌 Slow tests: ${summary.slowTests?.length || 0}`"
        },
        {
          "line": 316,
          "content": "logger.debug(`🎲 Flaky tests: ${summary.flakyTests?.length || 0}`);",
          "type": "template_data",
          "match": "logger.debug(`🎲 Flaky tests: ${summary.flakyTests?.length || 0}`"
        },
        {
          "line": 317,
          "content": "logger.debug(`🛡️  Stable tests: ${summary.stableTests?.length || 0}`);",
          "type": "template_data",
          "match": "logger.debug(`🛡️  Stable tests: ${summary.stableTests?.length || 0}`"
        },
        {
          "line": 318,
          "content": "logger.info(`🚨 Recent failures: ${summary.recentFailures?.length || 0}`);",
          "type": "template_data",
          "match": "logger.info(`🚨 Recent failures: ${summary.recentFailures?.length || 0}`"
        },
        {
          "line": 324,
          "content": "logger.debug(`${index + 1}. ${path.basename(test.filePath)} - ${test.testName} (${Math.round(test.averageDuration)}ms)`);",
          "type": "template_data",
          "match": "logger.debug(`${index + 1}. ${path.basename(test.filePath)} - ${test.testName} (${Math.round(test.averageDuration)}ms)`"
        },
        {
          "line": 332,
          "content": "logger.debug(`${index + 1}. ${path.basename(test.filePath)} - ${test.testName} (${Math.round(test.failureRate)}% failure rate)`);",
          "type": "template_data",
          "match": "logger.debug(`${index + 1}. ${path.basename(test.filePath)} - ${test.testName} (${Math.round(test.failureRate)}% failure rate)`"
        },
        {
          "line": 364,
          "content": "logger.info(`📄 Tracking data exported to: ${outputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Tracking data exported to: ${outputPath}`"
        },
        {
          "line": 366,
          "content": "logger.error(`❌ Failed to export tracking data: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to export tracking data: ${error.message}`"
        },
        {
          "line": 491,
          "content": "logger.error(`❌ Error generating health report: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error generating health report: ${error.message}`"
        },
        {
          "line": 534,
          "content": "logger.info(`Health report generated: ${healthReport.testCounts.total} tests, ${healthReport.overallHealth}% overall health`);",
          "type": "direct_data",
          "match": "logger.info(`Health report generated: ${healthReport.testCounts.total} tests, ${healthReport.overallHealth}% overall health`"
        },
        {
          "line": 534,
          "content": "logger.info(`Health report generated: ${healthReport.testCounts.total} tests, ${healthReport.overallHealth}% overall health`);",
          "type": "template_data",
          "match": "logger.info(`Health report generated: ${healthReport.testCounts.total} tests, ${healthReport.overallHealth}% overall health`"
        },
        {
          "line": 551,
          "content": "logger.info(`Status history for ${args[2]}: ${history.length} entries`);",
          "type": "template_data",
          "match": "logger.info(`Status history for ${args[2]}: ${history.length} entries`"
        },
        {
          "line": 555,
          "content": "logger.error(`❌ Unknown command: ${command}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Unknown command: ${command}`"
        },
        {
          "line": 559,
          "content": "logger.error(`❌ Error: ${error.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error: ${error.message}`"
        }
      ]
    },
    "./backend/scripts/dev-setup.js": {
      "totalFindings": 41,
      "byType": {
        "direct_data": 11,
        "variable_data": 11,
        "error_object": 9,
        "template_data": 10
      },
      "findings": [
        {
          "line": 191,
          "content": "logger.error('❌ Database reset failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Database reset failed:', error.message"
        },
        {
          "line": 191,
          "content": "logger.error('❌ Database reset failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Database reset failed:', error"
        },
        {
          "line": 191,
          "content": "logger.error('❌ Database reset failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Database reset failed:', error"
        },
        {
          "line": 205,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Clear failed:', error.message"
        },
        {
          "line": 205,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Clear failed:', error"
        },
        {
          "line": 205,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Clear failed:', error"
        },
        {
          "line": 214,
          "content": "logger.info(`📁 Path: ${dbPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Path: ${dbPath}`"
        },
        {
          "line": 215,
          "content": "logger.info(`📏 Size: ${(stats.size / 1024).toFixed(2)} KB`);",
          "type": "template_data",
          "match": "logger.info(`📏 Size: ${(stats.size / 1024).toFixed(2)} KB`"
        },
        {
          "line": 216,
          "content": "logger.info(`📅 Modified: ${stats.mtime.toLocaleString()}`);",
          "type": "template_data",
          "match": "logger.info(`📅 Modified: ${stats.mtime.toLocaleString()}`"
        },
        {
          "line": 231,
          "content": "logger.error('❌ Failed to create test user:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to create test user:', error.message"
        },
        {
          "line": 231,
          "content": "logger.error('❌ Failed to create test user:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to create test user:', error"
        },
        {
          "line": 231,
          "content": "logger.error('❌ Failed to create test user:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to create test user:', error"
        },
        {
          "line": 278,
          "content": "logger.error('❌ Error creating user:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error creating user:', err.message"
        },
        {
          "line": 278,
          "content": "logger.error('❌ Error creating user:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error creating user:', err"
        },
        {
          "line": 282,
          "content": "logger.info(`📧 Email: ${email}`);",
          "type": "template_data",
          "match": "logger.info(`📧 Email: ${email}`"
        },
        {
          "line": 283,
          "content": "logger.info(`🔑 Password: ${password}`);",
          "type": "template_data",
          "match": "logger.info(`🔑 Password: ${password}`"
        },
        {
          "line": 284,
          "content": "if (username) logger.info(`👤 Username: ${username}`);",
          "type": "template_data",
          "match": "logger.info(`👤 Username: ${username}`"
        },
        {
          "line": 292,
          "content": "logger.error('❌ Failed to create user:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to create user:', error.message"
        },
        {
          "line": 292,
          "content": "logger.error('❌ Failed to create user:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to create user:', error"
        },
        {
          "line": 292,
          "content": "logger.error('❌ Failed to create user:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to create user:', error"
        },
        {
          "line": 306,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Clear failed:', error.message"
        },
        {
          "line": 306,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Clear failed:', error"
        },
        {
          "line": 306,
          "content": "logger.error('❌ Clear failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Clear failed:', error"
        },
        {
          "line": 320,
          "content": "logger.error('❌ Error listing users:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error listing users:', err.message"
        },
        {
          "line": 320,
          "content": "logger.error('❌ Error listing users:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error listing users:', err"
        },
        {
          "line": 331,
          "content": "logger.info(`${id} ${email} ${role} ${created}`);",
          "type": "template_data",
          "match": "logger.info(`${id} ${email} ${role} ${created}`"
        },
        {
          "line": 334,
          "content": "logger.info(`\\nTotal users: ${rows.length}`);",
          "type": "template_data",
          "match": "logger.info(`\\nTotal users: ${rows.length}`"
        },
        {
          "line": 339,
          "content": "logger.error('❌ Failed to list users:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to list users:', error.message"
        },
        {
          "line": 339,
          "content": "logger.error('❌ Failed to list users:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to list users:', error"
        },
        {
          "line": 339,
          "content": "logger.error('❌ Failed to list users:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to list users:', error"
        },
        {
          "line": 354,
          "content": "logger.error('❌ Failed to start backend:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to start backend:', error.message"
        },
        {
          "line": 354,
          "content": "logger.error('❌ Failed to start backend:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to start backend:', error"
        },
        {
          "line": 354,
          "content": "logger.error('❌ Failed to start backend:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to start backend:', error"
        },
        {
          "line": 369,
          "content": "logger.error('❌ Failed to start frontend:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to start frontend:', error.message"
        },
        {
          "line": 369,
          "content": "logger.error('❌ Failed to start frontend:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to start frontend:', error"
        },
        {
          "line": 369,
          "content": "logger.error('❌ Failed to start frontend:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to start frontend:', error"
        },
        {
          "line": 384,
          "content": "logger.error('❌ Failed to start services:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to start services:', error.message"
        },
        {
          "line": 384,
          "content": "logger.error('❌ Failed to start services:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to start services:', error"
        },
        {
          "line": 384,
          "content": "logger.error('❌ Failed to start services:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to start services:', error"
        },
        {
          "line": 444,
          "content": "logger.info(`✅ Database: ${(stats.size / 1024).toFixed(2)} KB`);",
          "type": "template_data",
          "match": "logger.info(`✅ Database: ${(stats.size / 1024).toFixed(2)} KB`"
        },
        {
          "line": 458,
          "content": "logger.info(`✅ Users: ${row.count} registered`);",
          "type": "template_data",
          "match": "logger.info(`✅ Users: ${row.count} registered`"
        }
      ]
    },
    "./backend/scripts/refactor-imports.js": {
      "totalFindings": 2,
      "byType": {
        "template_data": 2
      },
      "findings": [
        {
          "line": 121,
          "content": "logger.info(`✅ Updated ${filePath}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Updated ${filePath}`"
        },
        {
          "line": 124,
          "content": "logger.error(`❌ Error in ${filePath}: ${e.message}`);",
          "type": "template_data",
          "match": "logger.error(`❌ Error in ${filePath}: ${e.message}`"
        }
      ]
    },
    "./backend/scripts/fix-task-priorities.js": {
      "totalFindings": 25,
      "byType": {
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 6,
        "template_data": 7
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.error('❌ Failed to connect to database:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to connect to database:', error.message"
        },
        {
          "line": 33,
          "content": "logger.error('❌ Failed to connect to database:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to connect to database:', error"
        },
        {
          "line": 33,
          "content": "logger.error('❌ Failed to connect to database:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to connect to database:', error"
        },
        {
          "line": 43,
          "content": "logger.info(`🔍 Found ${rows.length} tasks with invalid priorities:`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Found ${rows.length} tasks with invalid priorities:`"
        },
        {
          "line": 45,
          "content": "logger.info(`  - ${row.id}: \"${row.title}\" (priority: ${row.priority})`);",
          "type": "template_data",
          "match": "logger.info(`  - ${row.id}: \"${row.title}\" (priority: ${row.priority})`"
        },
        {
          "line": 50,
          "content": "logger.error('❌ Failed to find invalid priorities:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to find invalid priorities:', error.message"
        },
        {
          "line": 50,
          "content": "logger.error('❌ Failed to find invalid priorities:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to find invalid priorities:', error"
        },
        {
          "line": 50,
          "content": "logger.error('❌ Failed to find invalid priorities:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to find invalid priorities:', error"
        },
        {
          "line": 61,
          "content": "logger.info(`✅ Fixed task ${taskId} priority to: ${newPriority}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Fixed task ${taskId} priority to: ${newPriority}`"
        },
        {
          "line": 63,
          "content": "logger.error(`❌ Failed to fix task ${taskId}:`, error.message);",
          "type": "direct_data",
          "match": "logger.error(`❌ Failed to fix task ${taskId}:`, error.message"
        },
        {
          "line": 63,
          "content": "logger.error(`❌ Failed to fix task ${taskId}:`, error.message);",
          "type": "variable_data",
          "match": "logger.error(`❌ Failed to fix task ${taskId}:`, error"
        },
        {
          "line": 63,
          "content": "logger.error(`❌ Failed to fix task ${taskId}:`, error.message);",
          "type": "template_data",
          "match": "logger.error(`❌ Failed to fix task ${taskId}:`"
        },
        {
          "line": 63,
          "content": "logger.error(`❌ Failed to fix task ${taskId}:`, error.message);",
          "type": "error_object",
          "match": "logger.error(`❌ Failed to fix task ${taskId}:`, error"
        },
        {
          "line": 77,
          "content": "logger.info(`\\n🔧 Fixing ${invalidTasks.length} tasks...`);",
          "type": "template_data",
          "match": "logger.info(`\\n🔧 Fixing ${invalidTasks.length} tasks...`"
        },
        {
          "line": 97,
          "content": "logger.info(`\\n✅ Successfully fixed ${invalidTasks.length} tasks`);",
          "type": "template_data",
          "match": "logger.info(`\\n✅ Successfully fixed ${invalidTasks.length} tasks`"
        },
        {
          "line": 99,
          "content": "logger.error('❌ Failed to fix invalid priorities:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Failed to fix invalid priorities:', error.message"
        },
        {
          "line": 99,
          "content": "logger.error('❌ Failed to fix invalid priorities:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Failed to fix invalid priorities:', error"
        },
        {
          "line": 99,
          "content": "logger.error('❌ Failed to fix invalid priorities:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Failed to fix invalid priorities:', error"
        },
        {
          "line": 112,
          "content": "logger.info(`⚠️  Validation warning: ${result.count} tasks still have invalid priorities`);",
          "type": "template_data",
          "match": "logger.info(`⚠️  Validation warning: ${result.count} tasks still have invalid priorities`"
        },
        {
          "line": 117,
          "content": "logger.error('❌ Validation failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Validation failed:', error.message"
        },
        {
          "line": 117,
          "content": "logger.error('❌ Validation failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Validation failed:', error"
        },
        {
          "line": 117,
          "content": "logger.error('❌ Validation failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Validation failed:', error"
        },
        {
          "line": 142,
          "content": "logger.error('\\n💥 Task priority fix failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('\\n💥 Task priority fix failed:', error.message"
        },
        {
          "line": 142,
          "content": "logger.error('\\n💥 Task priority fix failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('\\n💥 Task priority fix failed:', error"
        },
        {
          "line": 142,
          "content": "logger.error('\\n💥 Task priority fix failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('\\n💥 Task priority fix failed:', error"
        }
      ]
    },
    "./backend/scripts/generate-test-reports.js": {
      "totalFindings": 23,
      "byType": {
        "direct_data": 9,
        "variable_data": 8,
        "template_data": 4,
        "error_object": 2
      },
      "findings": [
        {
          "line": 28,
          "content": "logger.debug('⚠️ Some tests failed, but continuing with reports...');",
          "type": "direct_data",
          "match": "logger.debug('⚠️ Some tests failed, but continuing with reports...'"
        },
        {
          "line": 28,
          "content": "logger.debug('⚠️ Some tests failed, but continuing with reports...');",
          "type": "variable_data",
          "match": "logger.debug('⚠️ Some tests failed, but"
        },
        {
          "line": 37,
          "content": "logger.info('⚠️ Coverage generation had issues, but continuing...');",
          "type": "direct_data",
          "match": "logger.info('⚠️ Coverage generation had issues, but continuing...'"
        },
        {
          "line": 37,
          "content": "logger.info('⚠️ Coverage generation had issues, but continuing...');",
          "type": "variable_data",
          "match": "logger.info('⚠️ Coverage generation had issues, but"
        },
        {
          "line": 46,
          "content": "logger.debug('⚠️ Test export had issues, but continuing...');",
          "type": "direct_data",
          "match": "logger.debug('⚠️ Test export had issues, but continuing...'"
        },
        {
          "line": 46,
          "content": "logger.debug('⚠️ Test export had issues, but continuing...');",
          "type": "variable_data",
          "match": "logger.debug('⚠️ Test export had issues, but"
        },
        {
          "line": 55,
          "content": "logger.debug('⚠️ Test report generation had issues, but continuing...');",
          "type": "direct_data",
          "match": "logger.debug('⚠️ Test report generation had issues, but continuing...'"
        },
        {
          "line": 55,
          "content": "logger.debug('⚠️ Test report generation had issues, but continuing...');",
          "type": "variable_data",
          "match": "logger.debug('⚠️ Test report generation had issues, but"
        },
        {
          "line": 64,
          "content": "logger.debug('⚠️ Full test report generation had issues, but continuing...');",
          "type": "direct_data",
          "match": "logger.debug('⚠️ Full test report generation had issues, but continuing...'"
        },
        {
          "line": 64,
          "content": "logger.debug('⚠️ Full test report generation had issues, but continuing...');",
          "type": "variable_data",
          "match": "logger.debug('⚠️ Full test report generation had issues, but"
        },
        {
          "line": 73,
          "content": "logger.info('⚠️ Coverage markdown generation had issues, but continuing...');",
          "type": "direct_data",
          "match": "logger.info('⚠️ Coverage markdown generation had issues, but continuing...'"
        },
        {
          "line": 73,
          "content": "logger.info('⚠️ Coverage markdown generation had issues, but continuing...');",
          "type": "variable_data",
          "match": "logger.info('⚠️ Coverage markdown generation had issues, but"
        },
        {
          "line": 92,
          "content": "logger.info(`✅ ${file} exists`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${file} exists`"
        },
        {
          "line": 95,
          "content": "logger.info(`❌ ${file} missing`);",
          "type": "template_data",
          "match": "logger.info(`❌ ${file} missing`"
        },
        {
          "line": 100,
          "content": "logger.info(`✅ Generated: ${existingFiles.length}/${requiredFiles.length} files`);",
          "type": "template_data",
          "match": "logger.info(`✅ Generated: ${existingFiles.length}/${requiredFiles.length} files`"
        },
        {
          "line": 103,
          "content": "logger.info(`❌ Missing: ${missingFiles.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`❌ Missing: ${missingFiles.join(', '"
        },
        {
          "line": 103,
          "content": "logger.info(`❌ Missing: ${missingFiles.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Missing: ${missingFiles.join(', ')}`"
        },
        {
          "line": 115,
          "content": "logger.error('❌ Error generating test reports:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Error generating test reports:', error.message"
        },
        {
          "line": 115,
          "content": "logger.error('❌ Error generating test reports:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Error generating test reports:', error"
        },
        {
          "line": 115,
          "content": "logger.error('❌ Error generating test reports:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Error generating test reports:', error"
        },
        {
          "line": 123,
          "content": "logger.error('❌ Fatal error:', error);",
          "type": "direct_data",
          "match": "logger.error('❌ Fatal error:', error"
        },
        {
          "line": 123,
          "content": "logger.error('❌ Fatal error:', error);",
          "type": "variable_data",
          "match": "logger.error('❌ Fatal error:', error"
        },
        {
          "line": 123,
          "content": "logger.error('❌ Fatal error:', error);",
          "type": "error_object",
          "match": "logger.error('❌ Fatal error:', error"
        }
      ]
    },
    "./backend/scripts/clean-invalid-users.js": {
      "totalFindings": 5,
      "byType": {
        "direct_data": 2,
        "variable_data": 2,
        "template_data": 1
      },
      "findings": [
        {
          "line": 13,
          "content": "logger.error('❌ Fehler beim Öffnen der Datenbank:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Fehler beim Öffnen der Datenbank:', err.message"
        },
        {
          "line": 13,
          "content": "logger.error('❌ Fehler beim Öffnen der Datenbank:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Fehler beim Öffnen der Datenbank:', err"
        },
        {
          "line": 20,
          "content": "logger.error('❌ Fehler beim Löschen:', err.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Fehler beim Löschen:', err.message"
        },
        {
          "line": 20,
          "content": "logger.error('❌ Fehler beim Löschen:', err.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Fehler beim Löschen:', err"
        },
        {
          "line": 22,
          "content": "logger.info(`🗑️  Alle User gelöscht (${this.changes} Einträge entfernt).`);",
          "type": "template_data",
          "match": "logger.info(`🗑️  Alle User gelöscht (${this.changes} Einträge entfernt).`"
        }
      ]
    },
    "./backend/scripts/test-correction/auto-refactor-command.js": {
      "totalFindings": 7,
      "byType": {
        "direct_data": 3,
        "object_data": 2,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 50,
          "content": "logger.info('Forwarding auto-refactor task to KI-Agent', { endpoint: AGENT_ENDPOINT });",
          "type": "direct_data",
          "match": "logger.info('Forwarding auto-refactor task to KI-Agent', { endpoint: AGENT_ENDPOINT }"
        },
        {
          "line": 50,
          "content": "logger.info('Forwarding auto-refactor task to KI-Agent', { endpoint: AGENT_ENDPOINT });",
          "type": "object_data",
          "match": "logger.info('Forwarding auto-refactor task to KI-Agent', { endpoint: AGENT_ENDPOINT }"
        },
        {
          "line": 55,
          "content": "logger.error('Failed to forward auto-refactor task', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Failed to forward auto-refactor task', { error: error.message }"
        },
        {
          "line": 55,
          "content": "logger.error('Failed to forward auto-refactor task', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Failed to forward auto-refactor task', { error: error.message }"
        },
        {
          "line": 57,
          "content": "logger.error('Agent response:', error.response.data);",
          "type": "direct_data",
          "match": "logger.error('Agent response:', error.response.data"
        },
        {
          "line": 57,
          "content": "logger.error('Agent response:', error.response.data);",
          "type": "variable_data",
          "match": "logger.error('Agent response:', error"
        },
        {
          "line": 57,
          "content": "logger.error('Agent response:', error.response.data);",
          "type": "error_object",
          "match": "logger.error('Agent response:', error"
        }
      ]
    },
    "./backend/scripts/test-correction/coverage-improver.js": {
      "totalFindings": 30,
      "byType": {
        "template_data": 14,
        "direct_data": 9,
        "object_data": 2,
        "variable_data": 3,
        "error_object": 2
      },
      "findings": [
        {
          "line": 50,
          "content": "logger.info(`📊 Current Coverage: ${currentCoverage.toFixed(2)}%`);",
          "type": "template_data",
          "match": "logger.info(`📊 Current Coverage: ${currentCoverage.toFixed(2)}%`"
        },
        {
          "line": 53,
          "content": "logger.info(`✅ Target coverage (${this.options.targetCoverage}%) already achieved!`);",
          "type": "template_data",
          "match": "logger.info(`✅ Target coverage (${this.options.targetCoverage}%) already achieved!`"
        },
        {
          "line": 76,
          "content": "logger.info(`📈 Coverage improved from ${currentCoverage.toFixed(2)}% to ${finalCoverage.toFixed(2)}% (+${this.results.improvement.toFixed(2)}%)`);",
          "type": "template_data",
          "match": "logger.info(`📈 Coverage improved from ${currentCoverage.toFixed(2)}% to ${finalCoverage.toFixed(2)}% (+${this.results.improvement.toFixed(2)}%)`"
        },
        {
          "line": 86,
          "content": "logger.error('Coverage improvement failed', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Coverage improvement failed', { error: error.message }"
        },
        {
          "line": 86,
          "content": "logger.error('Coverage improvement failed', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Coverage improvement failed', { error: error.message }"
        },
        {
          "line": 87,
          "content": "logger.error('❌ Coverage Improvement Failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Coverage Improvement Failed:', error.message"
        },
        {
          "line": 87,
          "content": "logger.error('❌ Coverage Improvement Failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Coverage Improvement Failed:', error"
        },
        {
          "line": 87,
          "content": "logger.error('❌ Coverage Improvement Failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Coverage Improvement Failed:', error"
        },
        {
          "line": 129,
          "content": "logger.info('⚠️  Could not collect coverage, assuming 0%');",
          "type": "direct_data",
          "match": "logger.info('⚠️  Could not collect coverage, assuming 0%'"
        },
        {
          "line": 129,
          "content": "logger.info('⚠️  Could not collect coverage, assuming 0%');",
          "type": "variable_data",
          "match": "logger.info('⚠️  Could not collect coverage, assuming"
        },
        {
          "line": 171,
          "content": "logger.warn('Failed to analyze file for coverage', { file, error: error.message });",
          "type": "direct_data",
          "match": "logger.warn('Failed to analyze file for coverage', { file, error: error.message }"
        },
        {
          "line": 171,
          "content": "logger.warn('Failed to analyze file for coverage', { file, error: error.message });",
          "type": "object_data",
          "match": "logger.warn('Failed to analyze file for coverage', { file, error: error.message }"
        },
        {
          "line": 178,
          "content": "logger.info(`📋 Found ${coverageGaps.length} files with coverage gaps`);",
          "type": "template_data",
          "match": "logger.info(`📋 Found ${coverageGaps.length} files with coverage gaps`"
        },
        {
          "line": 199,
          "content": "logger.debug(`📝 Generating tests for ${gap.file} (coverage: ${gap.currentCoverage.toFixed(1)}%)`);",
          "type": "template_data",
          "match": "logger.debug(`📝 Generating tests for ${gap.file} (coverage: ${gap.currentCoverage.toFixed(1)}%)`"
        },
        {
          "line": 207,
          "content": "logger.debug(`✅ Generated ${testGenerationResult.testsGenerated} tests for ${gap.file}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Generated ${testGenerationResult.testsGenerated} tests for ${gap.file}`"
        },
        {
          "line": 210,
          "content": "logger.debug(`❌ Failed to generate tests for ${gap.file}: ${testGenerationResult.error}`);",
          "type": "template_data",
          "match": "logger.debug(`❌ Failed to generate tests for ${gap.file}: ${testGenerationResult.error}`"
        },
        {
          "line": 222,
          "content": "logger.error('Failed to generate tests for file', {",
          "type": "direct_data",
          "match": "logger.error('Failed to generate tests for file', {"
        },
        {
          "line": 238,
          "content": "logger.debug(`📊 Test Generation Results: ${results.successful} successful, ${results.failed} failed, ${results.testsGenerated} tests generated`);",
          "type": "direct_data",
          "match": "logger.debug(`📊 Test Generation Results: ${results.successful} successful, ${results.failed} failed, ${results.testsGenerated} tests generated`"
        },
        {
          "line": 238,
          "content": "logger.debug(`📊 Test Generation Results: ${results.successful} successful, ${results.failed} failed, ${results.testsGenerated} tests generated`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Test Generation Results: ${results.successful} successful, ${results.failed} failed, ${results.testsGenerated} tests generated`"
        },
        {
          "line": 436,
          "content": "logger.debug(`🔧 Improving ${testFile}`);",
          "type": "template_data",
          "match": "logger.debug(`🔧 Improving ${testFile}`"
        },
        {
          "line": 442,
          "content": "logger.debug(`✅ Improved ${testFile}`);",
          "type": "template_data",
          "match": "logger.debug(`✅ Improved ${testFile}`"
        },
        {
          "line": 445,
          "content": "logger.debug(`❌ Failed to improve ${testFile}: ${improvementResult.error}`);",
          "type": "template_data",
          "match": "logger.debug(`❌ Failed to improve ${testFile}: ${improvementResult.error}`"
        },
        {
          "line": 457,
          "content": "logger.error('Failed to improve test file', {",
          "type": "direct_data",
          "match": "logger.error('Failed to improve test file', {"
        },
        {
          "line": 473,
          "content": "logger.debug(`📊 Test Improvement Results: ${results.improved} improved, ${results.failed} failed`);",
          "type": "direct_data",
          "match": "logger.debug(`📊 Test Improvement Results: ${results.improved} improved, ${results.failed} failed`"
        },
        {
          "line": 473,
          "content": "logger.debug(`📊 Test Improvement Results: ${results.improved} improved, ${results.failed} failed`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Test Improvement Results: ${results.improved} improved, ${results.failed} failed`"
        },
        {
          "line": 677,
          "content": "logger.info(`   - ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`   - ${reportPath}`"
        },
        {
          "line": 678,
          "content": "logger.info(`   - ${markdownPath}`);",
          "type": "template_data",
          "match": "logger.info(`   - ${markdownPath}`"
        },
        {
          "line": 811,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Fatal error:', error.message"
        },
        {
          "line": 811,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Fatal error:', error"
        },
        {
          "line": 811,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Fatal error:', error"
        }
      ]
    },
    "./backend/scripts/test-correction/auto-fix-tests.js": {
      "totalFindings": 27,
      "byType": {
        "direct_data": 10,
        "object_data": 3,
        "variable_data": 4,
        "error_object": 2,
        "template_data": 8
      },
      "findings": [
        {
          "line": 82,
          "content": "logger.error('Auto fix process failed', { error: error.message });",
          "type": "direct_data",
          "match": "logger.error('Auto fix process failed', { error: error.message }"
        },
        {
          "line": 82,
          "content": "logger.error('Auto fix process failed', { error: error.message });",
          "type": "object_data",
          "match": "logger.error('Auto fix process failed', { error: error.message }"
        },
        {
          "line": 83,
          "content": "logger.error('❌ Auto Test Fix Process Failed:', error.message);",
          "type": "direct_data",
          "match": "logger.error('❌ Auto Test Fix Process Failed:', error.message"
        },
        {
          "line": 83,
          "content": "logger.error('❌ Auto Test Fix Process Failed:', error.message);",
          "type": "variable_data",
          "match": "logger.error('❌ Auto Test Fix Process Failed:', error"
        },
        {
          "line": 83,
          "content": "logger.error('❌ Auto Test Fix Process Failed:', error.message);",
          "type": "error_object",
          "match": "logger.error('❌ Auto Test Fix Process Failed:', error"
        },
        {
          "line": 113,
          "content": "logger.debug(`📈 Test Results: ${testResults.numPassedTests} passed, ${failing.length} failed`);",
          "type": "direct_data",
          "match": "logger.debug(`📈 Test Results: ${testResults.numPassedTests} passed, ${failing.length} failed`"
        },
        {
          "line": 113,
          "content": "logger.debug(`📈 Test Results: ${testResults.numPassedTests} passed, ${failing.length} failed`);",
          "type": "template_data",
          "match": "logger.debug(`📈 Test Results: ${testResults.numPassedTests} passed, ${failing.length} failed`"
        },
        {
          "line": 128,
          "content": "logger.debug('⚠️  Tests failed, attempting to parse results...');",
          "type": "direct_data",
          "match": "logger.debug('⚠️  Tests failed, attempting to parse results...'"
        },
        {
          "line": 128,
          "content": "logger.debug('⚠️  Tests failed, attempting to parse results...');",
          "type": "variable_data",
          "match": "logger.debug('⚠️  Tests failed, attempting"
        },
        {
          "line": 185,
          "content": "logger.info(`📋 Created ${corrections.length} correction tasks`);",
          "type": "template_data",
          "match": "logger.info(`📋 Created ${corrections.length} correction tasks`"
        },
        {
          "line": 199,
          "content": "logger.debug(`🔧 Applying fixes to ${corrections.length} tests...`);",
          "type": "template_data",
          "match": "logger.debug(`🔧 Applying fixes to ${corrections.length} tests...`"
        },
        {
          "line": 213,
          "content": "logger.info(`📈 Progress: ${progress.completed}/${progress.total} (${Math.round(progress.completed/progress.total*100)}%)`);",
          "type": "template_data",
          "match": "logger.info(`📈 Progress: ${progress.completed}/${progress.total} (${Math.round(progress.completed/progress.total*100)}%)`"
        },
        {
          "line": 218,
          "content": "logger.info(`✅ Fixes completed: ${successful} successful, ${failed} failed`);",
          "type": "direct_data",
          "match": "logger.info(`✅ Fixes completed: ${successful} successful, ${failed} failed`"
        },
        {
          "line": 218,
          "content": "logger.info(`✅ Fixes completed: ${successful} successful, ${failed} failed`);",
          "type": "template_data",
          "match": "logger.info(`✅ Fixes completed: ${successful} successful, ${failed} failed`"
        },
        {
          "line": 246,
          "content": "logger.debug(`📊 Verification Results: ${testResults.numPassedTests} passed, ${failing.length} failed`);",
          "type": "direct_data",
          "match": "logger.debug(`📊 Verification Results: ${testResults.numPassedTests} passed, ${failing.length} failed`"
        },
        {
          "line": 246,
          "content": "logger.debug(`📊 Verification Results: ${testResults.numPassedTests} passed, ${failing.length} failed`);",
          "type": "template_data",
          "match": "logger.debug(`📊 Verification Results: ${testResults.numPassedTests} passed, ${failing.length} failed`"
        },
        {
          "line": 256,
          "content": "logger.debug('⚠️  Verification failed, some tests may still be broken');",
          "type": "direct_data",
          "match": "logger.debug('⚠️  Verification failed, some tests may still be broken'"
        },
        {
          "line": 256,
          "content": "logger.debug('⚠️  Verification failed, some tests may still be broken');",
          "type": "variable_data",
          "match": "logger.debug('⚠️  Verification failed, some"
        },
        {
          "line": 365,
          "content": "logger.warn('Failed to analyze test file for legacy patterns', { file: testFile, error: error.message });",
          "type": "direct_data",
          "match": "logger.warn('Failed to analyze test file for legacy patterns', { file: testFile, error: error.message }"
        },
        {
          "line": 365,
          "content": "logger.warn('Failed to analyze test file for legacy patterns', { file: testFile, error: error.message });",
          "type": "object_data",
          "match": "logger.warn('Failed to analyze test file for legacy patterns', { file: testFile, error: error.message }"
        },
        {
          "line": 400,
          "content": "logger.warn('Failed to analyze test file for complexity', { file: testFile, error: error.message });",
          "type": "direct_data",
          "match": "logger.warn('Failed to analyze test file for complexity', { file: testFile, error: error.message }"
        },
        {
          "line": 400,
          "content": "logger.warn('Failed to analyze test file for complexity', { file: testFile, error: error.message });",
          "type": "object_data",
          "match": "logger.warn('Failed to analyze test file for complexity', { file: testFile, error: error.message }"
        },
        {
          "line": 466,
          "content": "logger.info(`   - ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`   - ${reportPath}`"
        },
        {
          "line": 467,
          "content": "logger.info(`   - ${markdownPath}`);",
          "type": "template_data",
          "match": "logger.info(`   - ${markdownPath}`"
        },
        {
          "line": 617,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "direct_data",
          "match": "logger.error('Fatal error:', error.message"
        },
        {
          "line": 617,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "variable_data",
          "match": "logger.error('Fatal error:', error"
        },
        {
          "line": 617,
          "content": "logger.error('Fatal error:', error.message);",
          "type": "error_object",
          "match": "logger.error('Fatal error:', error"
        }
      ]
    },
    "./frontend/src/hooks/useAnalysisCache.js": {
      "totalFindings": 44,
      "byType": {
        "direct_data": 15,
        "variable_data": 10,
        "error_object": 9,
        "object_data": 4,
        "template_data": 5,
        "configuration": 1
      },
      "findings": [
        {
          "line": 39,
          "content": "logger.error('Failed to update cache stats:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to update cache stats:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Failed to update cache stats:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to update cache stats:', error"
        },
        {
          "line": 39,
          "content": "logger.error('Failed to update cache stats:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to update cache stats:', error"
        },
        {
          "line": 56,
          "content": "logger.info(`Cache hit for ${dataType}:`, { projectId, filters });",
          "type": "direct_data",
          "match": "logger.info(`Cache hit for ${dataType}:`, { projectId, filters }"
        },
        {
          "line": 56,
          "content": "logger.info(`Cache hit for ${dataType}:`, { projectId, filters });",
          "type": "object_data",
          "match": "logger.info(`Cache hit for ${dataType}:`, { projectId, filters }"
        },
        {
          "line": 56,
          "content": "logger.info(`Cache hit for ${dataType}:`, { projectId, filters });",
          "type": "template_data",
          "match": "logger.info(`Cache hit for ${dataType}:`"
        },
        {
          "line": 58,
          "content": "logger.info(`Cache miss for ${dataType}:`, { projectId, filters });",
          "type": "direct_data",
          "match": "logger.info(`Cache miss for ${dataType}:`, { projectId, filters }"
        },
        {
          "line": 58,
          "content": "logger.info(`Cache miss for ${dataType}:`, { projectId, filters });",
          "type": "object_data",
          "match": "logger.info(`Cache miss for ${dataType}:`, { projectId, filters }"
        },
        {
          "line": 58,
          "content": "logger.info(`Cache miss for ${dataType}:`, { projectId, filters });",
          "type": "template_data",
          "match": "logger.info(`Cache miss for ${dataType}:`"
        },
        {
          "line": 63,
          "content": "logger.error('Failed to get cached data:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to get cached data:', error"
        },
        {
          "line": 63,
          "content": "logger.error('Failed to get cached data:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to get cached data:', error"
        },
        {
          "line": 63,
          "content": "logger.error('Failed to get cached data:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to get cached data:', error"
        },
        {
          "line": 82,
          "content": "logger.info(`Cached ${dataType}:`, {",
          "type": "direct_data",
          "match": "logger.info(`Cached ${dataType}:`, { "
        },
        {
          "line": 82,
          "content": "logger.info(`Cached ${dataType}:`, {",
          "type": "template_data",
          "match": "logger.info(`Cached ${dataType}:`"
        },
        {
          "line": 92,
          "content": "logger.error('Failed to set cached data:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to set cached data:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Failed to set cached data:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to set cached data:', error"
        },
        {
          "line": 92,
          "content": "logger.error('Failed to set cached data:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to set cached data:', error"
        },
        {
          "line": 108,
          "content": "logger.error('Failed to check cached data:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to check cached data:', error"
        },
        {
          "line": 108,
          "content": "logger.error('Failed to check cached data:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to check cached data:', error"
        },
        {
          "line": 108,
          "content": "logger.error('Failed to check cached data:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to check cached data:', error"
        },
        {
          "line": 124,
          "content": "logger.info(`Removed ${dataType} from cache:`, { projectId, filters });",
          "type": "direct_data",
          "match": "logger.info(`Removed ${dataType} from cache:`, { projectId, filters }"
        },
        {
          "line": 124,
          "content": "logger.info(`Removed ${dataType} from cache:`, { projectId, filters });",
          "type": "object_data",
          "match": "logger.info(`Removed ${dataType} from cache:`, { projectId, filters }"
        },
        {
          "line": 124,
          "content": "logger.info(`Removed ${dataType} from cache:`, { projectId, filters });",
          "type": "template_data",
          "match": "logger.info(`Removed ${dataType} from cache:`"
        },
        {
          "line": 127,
          "content": "logger.error('Failed to remove cached data:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to remove cached data:', error"
        },
        {
          "line": 127,
          "content": "logger.error('Failed to remove cached data:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to remove cached data:', error"
        },
        {
          "line": 127,
          "content": "logger.error('Failed to remove cached data:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to remove cached data:', error"
        },
        {
          "line": 145,
          "content": "logger.info(`Cleared cache for project:`, { projectId });",
          "type": "direct_data",
          "match": "logger.info(`Cleared cache for project:`, { projectId }"
        },
        {
          "line": 145,
          "content": "logger.info(`Cleared cache for project:`, { projectId });",
          "type": "object_data",
          "match": "logger.info(`Cleared cache for project:`, { projectId }"
        },
        {
          "line": 154,
          "content": "logger.error('Failed to clear cache:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to clear cache:', error"
        },
        {
          "line": 154,
          "content": "logger.error('Failed to clear cache:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to clear cache:', error"
        },
        {
          "line": 154,
          "content": "logger.error('Failed to clear cache:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to clear cache:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Failed to clear all cache:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to clear all cache:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Failed to clear all cache:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to clear all cache:', error"
        },
        {
          "line": 167,
          "content": "logger.error('Failed to clear all cache:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to clear all cache:', error"
        },
        {
          "line": 179,
          "content": "logger.info(`Cleaned up ${cleanedCount} expired entries`);",
          "type": "template_data",
          "match": "logger.info(`Cleaned up ${cleanedCount} expired entries`"
        },
        {
          "line": 184,
          "content": "logger.error('Failed to cleanup expired entries:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to cleanup expired entries:', error"
        },
        {
          "line": 184,
          "content": "logger.error('Failed to cleanup expired entries:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to cleanup expired entries:', error"
        },
        {
          "line": 184,
          "content": "logger.error('Failed to cleanup expired entries:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to cleanup expired entries:', error"
        },
        {
          "line": 204,
          "content": "logger.info('Updated cache configuration:', config);",
          "type": "direct_data",
          "match": "logger.info('Updated cache configuration:', config"
        },
        {
          "line": 204,
          "content": "logger.info('Updated cache configuration:', config);",
          "type": "variable_data",
          "match": "logger.info('Updated cache configuration:', config"
        },
        {
          "line": 204,
          "content": "logger.info('Updated cache configuration:', config);",
          "type": "configuration",
          "match": "logger.info('Updated cache configuration:', config"
        },
        {
          "line": 206,
          "content": "logger.error('Failed to update cache configuration:', error);",
          "type": "direct_data",
          "match": "logger.error('Failed to update cache configuration:', error"
        },
        {
          "line": 206,
          "content": "logger.error('Failed to update cache configuration:', error);",
          "type": "variable_data",
          "match": "logger.error('Failed to update cache configuration:', error"
        },
        {
          "line": 206,
          "content": "logger.error('Failed to update cache configuration:', error);",
          "type": "error_object",
          "match": "logger.error('Failed to update cache configuration:', error"
        }
      ]
    },
    "./scripts/vscode/coverage-validator.js": {
      "totalFindings": 4,
      "byType": {
        "template_data": 4
      },
      "findings": [
        {
          "line": 73,
          "content": "logger.info(`📁 Created VSCode coverage validation directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode coverage validation directory: ${this.outputDir}`"
        },
        {
          "line": 330,
          "content": "logger.info(`📊 Overall Coverage: ${coverage.summary.coveragePercentage.toFixed(1)}%`);",
          "type": "template_data",
          "match": "logger.info(`📊 Overall Coverage: ${coverage.summary.coveragePercentage.toFixed(1)}%`"
        },
        {
          "line": 331,
          "content": "logger.info(`🎯 Critical Coverage: ${coverage.summary.criticalCoveragePercentage.toFixed(1)}%`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Critical Coverage: ${coverage.summary.criticalCoveragePercentage.toFixed(1)}%`"
        },
        {
          "line": 332,
          "content": "logger.info(`📁 Results saved to: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Results saved to: ${this.outputDir}`"
        }
      ]
    },
    "./scripts/vscode/validate-streaming.js": {
      "totalFindings": 21,
      "byType": {
        "template_data": 18,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 35,
          "content": "logger.info(`📁 Created VSCode streaming validation directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode streaming validation directory: ${this.outputDir}`"
        },
        {
          "line": 56,
          "content": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`"
        },
        {
          "line": 90,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 91,
          "content": "logger.info(`🧪 Tests Run: ${this.results.tests.length}`);",
          "type": "template_data",
          "match": "logger.info(`🧪 Tests Run: ${this.results.tests.length}`"
        },
        {
          "line": 92,
          "content": "logger.info(`✅ Passed: ${this.results.tests.filter(t => t.passed).length}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passed: ${this.results.tests.filter(t => t.passed).length}`"
        },
        {
          "line": 93,
          "content": "logger.info(`❌ Failed: ${this.results.tests.filter(t => !t.passed).length}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${this.results.tests.filter(t => !t.passed).length}`"
        },
        {
          "line": 137,
          "content": "logger.info(`  ✅ Clicked VSCode New Chat button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicked VSCode New Chat button: ${selector}`"
        },
        {
          "line": 228,
          "content": "logger.info(`  ✅ Clicking VSCode New Chat modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicking VSCode New Chat modal button: ${text || ariaLabel}`"
        },
        {
          "line": 245,
          "content": "logger.info(`  ⚠️ Clicking any VSCode modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ Clicking any VSCode modal button: ${text || ariaLabel}`"
        },
        {
          "line": 260,
          "content": "logger.info(`  ⚠️ VSCode New Chat modal handling failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ VSCode New Chat modal handling failed: ${error.message}`"
        },
        {
          "line": 296,
          "content": "logger.info(`  ✅ Found VSCode chat input: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found VSCode chat input: ${selector}`"
        },
        {
          "line": 317,
          "content": "logger.info(`  ✅ Typed test message: \"${testMessage}\"`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Typed test message: \"${testMessage}\"`"
        },
        {
          "line": 335,
          "content": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`"
        },
        {
          "line": 398,
          "content": "logger.info(`  ✅ Found VSCode AI response: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found VSCode AI response: ${selector}`"
        },
        {
          "line": 424,
          "content": "logger.info(`  ✅ Found VSCode loading indicator: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found VSCode loading indicator: ${selector}`"
        },
        {
          "line": 486,
          "content": "logger.info(`  ✅ VSCode streaming detected across ${states.length} states`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ VSCode streaming detected across ${states.length} states`"
        },
        {
          "line": 664,
          "content": "logger.info(`📄 VSCode streaming validation saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode streaming validation saved: ${outputFile}`"
        },
        {
          "line": 665,
          "content": "logger.info(`📄 VSCode streaming summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode streaming summary saved: ${summaryFile}`"
        },
        {
          "line": 713,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error.message"
        },
        {
          "line": 713,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error"
        },
        {
          "line": 713,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error"
        }
      ]
    },
    "./scripts/vscode/modal-analyzer.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 13,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 28,
          "content": "logger.info(`📁 Created VSCode modal analysis directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode modal analysis directory: ${this.outputDir}`"
        },
        {
          "line": 40,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 40,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using"
        },
        {
          "line": 40,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 56,
          "content": "logger.info(`📁 VSCode Modal Analysis Source: ${sourcePath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 VSCode Modal Analysis Source: ${sourcePath}`"
        },
        {
          "line": 57,
          "content": "logger.info(`📄 Found ${filesToAnalyze.length} VSCode DOM files for modal analysis`);",
          "type": "template_data",
          "match": "logger.info(`📄 Found ${filesToAnalyze.length} VSCode DOM files for modal analysis`"
        },
        {
          "line": 66,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML elements`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML elements`"
        },
        {
          "line": 114,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 115,
          "content": "logger.info(`🎯 Modal Types Found: ${Object.keys(this.results.modals).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Modal Types Found: ${Object.keys(this.results.modals).length}`"
        },
        {
          "line": 116,
          "content": "logger.info(`🔍 Modal Issues: ${this.results.modalIssues.length}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Modal Issues: ${this.results.modalIssues.length}`"
        },
        {
          "line": 117,
          "content": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`);",
          "type": "template_data",
          "match": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`"
        },
        {
          "line": 132,
          "content": "logger.info(`🔍 Analyzing VSCode modal features in ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing VSCode modal features in ${sourceFile}...`"
        },
        {
          "line": 303,
          "content": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`"
        },
        {
          "line": 666,
          "content": "logger.info(`📄 VSCode modal analysis saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode modal analysis saved: ${outputFile}`"
        },
        {
          "line": 667,
          "content": "logger.info(`📄 VSCode modal summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode modal summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/vscode/dom-analyzer.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 13,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 24,
          "content": "logger.info(`📁 Created VSCode DOM analysis directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode DOM analysis directory: ${this.outputDir}`"
        },
        {
          "line": 35,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${autoCollectedPath}`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${autoCollectedPath}`"
        },
        {
          "line": 35,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${autoCollectedPath}`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using"
        },
        {
          "line": 35,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${autoCollectedPath}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${autoCollectedPath}`"
        },
        {
          "line": 45,
          "content": "logger.info(`📁 VSCode DOM Analysis Source: ${sourcePath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 VSCode DOM Analysis Source: ${sourcePath}`"
        },
        {
          "line": 46,
          "content": "logger.info(`📄 Found ${allFiles.length} VSCode DOM files`);",
          "type": "template_data",
          "match": "logger.info(`📄 Found ${allFiles.length} VSCode DOM files`"
        },
        {
          "line": 55,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML elements`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML elements`"
        },
        {
          "line": 80,
          "content": "logger.info(`🔍 Analyzing VSCode DOM in ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing VSCode DOM in ${sourceFile}...`"
        },
        {
          "line": 83,
          "content": "logger.info(`  └─ ${allElements.length} DOM elements found`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${allElements.length} DOM elements found`"
        },
        {
          "line": 373,
          "content": "logger.info(`  └─ ${totalElements} VSCode feature elements detected`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${totalElements} VSCode feature elements detected`"
        },
        {
          "line": 548,
          "content": "logger.info(`📁 Sources processed: ${successCount}/${Object.keys(sources).length}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Sources processed: ${successCount}/${Object.keys(sources).length}`"
        },
        {
          "line": 549,
          "content": "logger.info(`🔍 Total elements analyzed: ${stats.totalElements}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Total elements analyzed: ${stats.totalElements}`"
        },
        {
          "line": 550,
          "content": "logger.info(`🎯 Features detected: ${Object.keys(stats.featureCounts).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Features detected: ${Object.keys(stats.featureCounts).length}`"
        },
        {
          "line": 551,
          "content": "logger.info(`🔧 Selectors generated: ${Object.keys(optimizedSelectors).length}`);",
          "type": "template_data",
          "match": "logger.info(`🔧 Selectors generated: ${Object.keys(optimizedSelectors).length}`"
        },
        {
          "line": 582,
          "content": "logger.info(`📁 Results saved to: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Results saved to: ${this.outputDir}`"
        }
      ]
    },
    "./scripts/vscode/test-enhanced-coverage.js": {
      "totalFindings": 14,
      "byType": {
        "template_data": 14
      },
      "findings": [
        {
          "line": 25,
          "content": "logger.info(`📁 Created VSCode test coverage directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode test coverage directory: ${this.outputDir}`"
        },
        {
          "line": 45,
          "content": "logger.info(`📁 Enhanced VSCode collection: ${enhancedFiles.length} files`);",
          "type": "template_data",
          "match": "logger.info(`📁 Enhanced VSCode collection: ${enhancedFiles.length} files`"
        },
        {
          "line": 60,
          "content": "logger.info(`📁 Auto VSCode collection: ${autoFiles.length} files`);",
          "type": "template_data",
          "match": "logger.info(`📁 Auto VSCode collection: ${autoFiles.length} files`"
        },
        {
          "line": 67,
          "content": "logger.info(`📄 Total VSCode DOM files for testing: ${Object.keys(sources).length}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Total VSCode DOM files for testing: ${Object.keys(sources).length}`"
        },
        {
          "line": 108,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 109,
          "content": "logger.info(`🧪 Tests Run: ${report.summary.totalTests}`);",
          "type": "template_data",
          "match": "logger.info(`🧪 Tests Run: ${report.summary.totalTests}`"
        },
        {
          "line": 110,
          "content": "logger.info(`✅ Passed: ${report.summary.passedTests}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passed: ${report.summary.passedTests}`"
        },
        {
          "line": 111,
          "content": "logger.info(`❌ Failed: ${report.summary.failedTests}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${report.summary.failedTests}`"
        },
        {
          "line": 112,
          "content": "logger.info(`📈 Coverage Score: ${report.summary.coverageScore}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Coverage Score: ${report.summary.coverageScore}%`"
        },
        {
          "line": 416,
          "content": "logger.info(`  ✅ Passed: ${results.summary.passedTests} VSCode tests`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Passed: ${results.summary.passedTests} VSCode tests`"
        },
        {
          "line": 417,
          "content": "logger.info(`  ❌ Failed: ${results.summary.failedTests} VSCode tests`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ Failed: ${results.summary.failedTests} VSCode tests`"
        },
        {
          "line": 418,
          "content": "logger.info(`  📊 Coverage: ${results.coverage.overall}%`);",
          "type": "template_data",
          "match": "logger.info(`  📊 Coverage: ${results.coverage.overall}%`"
        },
        {
          "line": 639,
          "content": "logger.info(`📄 VSCode test coverage saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode test coverage saved: ${outputFile}`"
        },
        {
          "line": 640,
          "content": "logger.info(`📄 VSCode test summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode test summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/vscode/enhanced-chat-analyzer.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 13,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 26,
          "content": "logger.info(`📁 Created VSCode chat analysis directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode chat analysis directory: ${this.outputDir}`"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 48,
          "content": "logger.info(`📁 VSCode Chat Analysis Source: ${sourcePath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 VSCode Chat Analysis Source: ${sourcePath}`"
        },
        {
          "line": 49,
          "content": "logger.info(`📄 Found ${allFiles.length} VSCode DOM files`);",
          "type": "template_data",
          "match": "logger.info(`📄 Found ${allFiles.length} VSCode DOM files`"
        },
        {
          "line": 58,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML elements`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML elements`"
        },
        {
          "line": 106,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 107,
          "content": "logger.info(`🎯 Chat Features Found: ${Object.keys(this.results.chatFeatures).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Chat Features Found: ${Object.keys(this.results.chatFeatures).length}`"
        },
        {
          "line": 108,
          "content": "logger.info(`🔍 Issues Identified: ${this.results.chatIssues.length}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Issues Identified: ${this.results.chatIssues.length}`"
        },
        {
          "line": 109,
          "content": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`);",
          "type": "template_data",
          "match": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`"
        },
        {
          "line": 124,
          "content": "logger.info(`🔍 Analyzing VSCode chat features in ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing VSCode chat features in ${sourceFile}...`"
        },
        {
          "line": 308,
          "content": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`"
        },
        {
          "line": 680,
          "content": "logger.info(`📄 VSCode analysis saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode analysis saved: ${outputFile}`"
        },
        {
          "line": 681,
          "content": "logger.info(`📄 VSCode summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/vscode/validate-streaming-simple.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 5
      },
      "findings": [
        {
          "line": 43,
          "content": "logger.info(`✅ ${file}`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${file}`"
        },
        {
          "line": 46,
          "content": "logger.info(`❌ ${file} - File not found`);",
          "type": "template_data",
          "match": "logger.info(`❌ ${file} - File not found`"
        },
        {
          "line": 52,
          "content": "logger.info(`✅ Files Found: ${passed}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Files Found: ${passed}`"
        },
        {
          "line": 53,
          "content": "logger.info(`❌ Files Missing: ${failed}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Files Missing: ${failed}`"
        },
        {
          "line": 54,
          "content": "logger.info(`📈 Success Rate: ${Math.round((passed / (passed + failed)) * 100)}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Success Rate: ${Math.round((passed / (passed + failed)) * 100)}%`"
        }
      ]
    },
    "./scripts/vscode/bulk-dom-analyzer.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 11
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info(`📁 Auto-collected directory: ${collectedPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Auto-collected directory: ${collectedPath}`"
        },
        {
          "line": 31,
          "content": "logger.info(`📄 Found DOM files: ${allFiles.length}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Found DOM files: ${allFiles.length}`"
        },
        {
          "line": 39,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML elements`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML elements`"
        },
        {
          "line": 65,
          "content": "logger.info(`🔍 Analyzing ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing ${sourceFile}...`"
        },
        {
          "line": 68,
          "content": "logger.info(`  └─ ${allElements.length} DOM elements found`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${allElements.length} DOM elements found`"
        },
        {
          "line": 365,
          "content": "logger.info(`  └─ ${totalElements} feature elements detected`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${totalElements} feature elements detected`"
        },
        {
          "line": 540,
          "content": "logger.info(`📁 Sources processed: ${successCount}/${Object.keys(sources).length}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Sources processed: ${successCount}/${Object.keys(sources).length}`"
        },
        {
          "line": 541,
          "content": "logger.info(`🔍 Total elements analyzed: ${stats.totalElements}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Total elements analyzed: ${stats.totalElements}`"
        },
        {
          "line": 542,
          "content": "logger.info(`🎯 Features detected: ${Object.keys(stats.featureCounts).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Features detected: ${Object.keys(stats.featureCounts).length}`"
        },
        {
          "line": 543,
          "content": "logger.info(`🔧 Selectors generated: ${Object.keys(optimizedSelectors).length}`);",
          "type": "template_data",
          "match": "logger.info(`🔧 Selectors generated: ${Object.keys(optimizedSelectors).length}`"
        },
        {
          "line": 579,
          "content": "logger.info(`📁 Results saved to: ${outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Results saved to: ${outputDir}`"
        }
      ]
    },
    "./scripts/vscode/run-enhanced-coverage.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 12
      },
      "findings": [
        {
          "line": 27,
          "content": "logger.info(`📁 Created VSCode enhanced coverage directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode enhanced coverage directory: ${this.outputDir}`"
        },
        {
          "line": 47,
          "content": "logger.info(`📁 Enhanced VSCode collection: ${enhancedFiles.length} files`);",
          "type": "template_data",
          "match": "logger.info(`📁 Enhanced VSCode collection: ${enhancedFiles.length} files`"
        },
        {
          "line": 62,
          "content": "logger.info(`📁 Auto VSCode collection: ${autoFiles.length} files`);",
          "type": "template_data",
          "match": "logger.info(`📁 Auto VSCode collection: ${autoFiles.length} files`"
        },
        {
          "line": 69,
          "content": "logger.info(`📄 Total VSCode DOM files: ${Object.keys(sources).length}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Total VSCode DOM files: ${Object.keys(sources).length}`"
        },
        {
          "line": 110,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 111,
          "content": "logger.info(`🎯 Coverage Score: ${report.summary.coverageScore}%`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Coverage Score: ${report.summary.coverageScore}%`"
        },
        {
          "line": 112,
          "content": "logger.info(`❌ Missing Features: ${report.summary.missingFeatures}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Missing Features: ${report.summary.missingFeatures}`"
        },
        {
          "line": 113,
          "content": "logger.info(`💡 Recommendations: ${report.summary.recommendations}`);",
          "type": "template_data",
          "match": "logger.info(`💡 Recommendations: ${report.summary.recommendations}`"
        },
        {
          "line": 357,
          "content": "logger.info(`  ✅ Found: ${coverage.stats.foundFeatures} VSCode features`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found: ${coverage.stats.foundFeatures} VSCode features`"
        },
        {
          "line": 358,
          "content": "logger.info(`  ❌ Missing: ${coverage.stats.missingFeatures} VSCode features`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ Missing: ${coverage.stats.missingFeatures} VSCode features`"
        },
        {
          "line": 597,
          "content": "logger.info(`📄 VSCode enhanced coverage saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode enhanced coverage saved: ${outputFile}`"
        },
        {
          "line": 598,
          "content": "logger.info(`📄 VSCode coverage summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 VSCode coverage summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/vscode/selector-generator.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 6
      },
      "findings": [
        {
          "line": 17,
          "content": "logger.info(`📁 Created VSCode generated directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode generated directory: ${this.outputDir}`"
        },
        {
          "line": 38,
          "content": "logger.info(`📁 Generated files in: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Generated files in: ${this.outputDir}`"
        },
        {
          "line": 39,
          "content": "logger.info(`🎯 Total VSCode selectors: ${Object.keys(optimizedSelectors).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Total VSCode selectors: ${Object.keys(optimizedSelectors).length}`"
        },
        {
          "line": 70,
          "content": "logger.info(`  ✅ ${filename}: ${Object.keys(data.optimizedSelectors || {}).length} selectors`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${filename}: ${Object.keys(data.optimizedSelectors || {}).length} selectors`"
        },
        {
          "line": 75,
          "content": "logger.info(`  ⚠️ ${filename}: Not found`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ ${filename}: Not found`"
        },
        {
          "line": 452,
          "content": "logger.info(`  ✅ Generated ${Object.keys(optimizedSelectors).length} VSCode selectors`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Generated ${Object.keys(optimizedSelectors).length} VSCode selectors`"
        }
      ]
    },
    "./scripts/vscode/enhanced-dom-collector.js": {
      "totalFindings": 17,
      "byType": {
        "template_data": 14,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 166,
          "content": "logger.info(`📁 Created enhanced VSCode collection directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created enhanced VSCode collection directory: ${this.outputDir}`"
        },
        {
          "line": 187,
          "content": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`"
        },
        {
          "line": 199,
          "content": "logger.info(`\\n🎯 Collecting ${this.enhancedStateConfigs.length} enhanced VSCode IDE states...\\n`);",
          "type": "template_data",
          "match": "logger.info(`\\n🎯 Collecting ${this.enhancedStateConfigs.length} enhanced VSCode IDE states...\\n`"
        },
        {
          "line": 203,
          "content": "logger.info(`📄 [${index + 1}/${this.enhancedStateConfigs.length}] ${config.name}`);",
          "type": "template_data",
          "match": "logger.info(`📄 [${index + 1}/${this.enhancedStateConfigs.length}] ${config.name}`"
        },
        {
          "line": 204,
          "content": "logger.info(`   ${config.description}`);",
          "type": "template_data",
          "match": "logger.info(`   ${config.description}`"
        },
        {
          "line": 494,
          "content": "logger.info(`  ✅ Clicking VSCode New Chat modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicking VSCode New Chat modal button: ${text || ariaLabel}`"
        },
        {
          "line": 511,
          "content": "logger.info(`  ⚠️ Clicking any VSCode modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ Clicking any VSCode modal button: ${text || ariaLabel}`"
        },
        {
          "line": 526,
          "content": "logger.info(`  ⚠️ VSCode New Chat modal handling failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ VSCode New Chat modal handling failed: ${error.message}`"
        },
        {
          "line": 554,
          "content": "logger.info(`  ✅ Found VSCode chat input with selector: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found VSCode chat input with selector: ${selector}`"
        },
        {
          "line": 585,
          "content": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`"
        },
        {
          "line": 846,
          "content": "logger.info(`📁 Directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Directory: ${this.outputDir}`"
        },
        {
          "line": 847,
          "content": "logger.info(`📄 Files: ${this.collectedStates.size}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Files: ${this.collectedStates.size}`"
        },
        {
          "line": 848,
          "content": "logger.info(`📊 Report: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`📊 Report: ${reportPath}`"
        },
        {
          "line": 854,
          "content": "logger.info(`  ✅ ${type}: ${count} files`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${type}: ${count} files`"
        },
        {
          "line": 871,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error.message"
        },
        {
          "line": 871,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error"
        },
        {
          "line": 871,
          "content": "logger.info('⚠️ VSCode cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ VSCode cleanup warning:', error"
        }
      ]
    },
    "./scripts/vscode/auto-dom-collector.js": {
      "totalFindings": 37,
      "byType": {
        "template_data": 8,
        "direct_data": 14,
        "variable_data": 14,
        "error_object": 1
      },
      "findings": [
        {
          "line": 117,
          "content": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to VSCode IDE on port ${vscodeIDE.port}`"
        },
        {
          "line": 129,
          "content": "logger.info(`\\n🎯 Collecting ${this.stateConfigs.length} different VSCode IDE states...\\n`);",
          "type": "template_data",
          "match": "logger.info(`\\n🎯 Collecting ${this.stateConfigs.length} different VSCode IDE states...\\n`"
        },
        {
          "line": 133,
          "content": "logger.info(`📄 [${index + 1}/${this.stateConfigs.length}] ${config.name}`);",
          "type": "template_data",
          "match": "logger.info(`📄 [${index + 1}/${this.stateConfigs.length}] ${config.name}`"
        },
        {
          "line": 134,
          "content": "logger.info(`   ${config.description}`);",
          "type": "template_data",
          "match": "logger.info(`   ${config.description}`"
        },
        {
          "line": 261,
          "content": "logger.info('   ⚠️ Chat activation failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Chat activation failed, continuing...'"
        },
        {
          "line": 261,
          "content": "logger.info('   ⚠️ Chat activation failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Chat activation failed, continuing"
        },
        {
          "line": 273,
          "content": "logger.info('   ⚠️ Command palette failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Command palette failed, continuing...'"
        },
        {
          "line": 273,
          "content": "logger.info('   ⚠️ Command palette failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Command palette failed, continuing"
        },
        {
          "line": 285,
          "content": "logger.info('   ⚠️ Quick open failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Quick open failed, continuing...'"
        },
        {
          "line": 285,
          "content": "logger.info('   ⚠️ Quick open failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Quick open failed, continuing"
        },
        {
          "line": 297,
          "content": "logger.info('   ⚠️ Global search failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Global search failed, continuing...'"
        },
        {
          "line": 297,
          "content": "logger.info('   ⚠️ Global search failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Global search failed, continuing"
        },
        {
          "line": 309,
          "content": "logger.info('   ⚠️ Extensions panel failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Extensions panel failed, continuing...'"
        },
        {
          "line": 309,
          "content": "logger.info('   ⚠️ Extensions panel failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Extensions panel failed, continuing"
        },
        {
          "line": 321,
          "content": "logger.info('   ⚠️ Debug panel failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Debug panel failed, continuing...'"
        },
        {
          "line": 321,
          "content": "logger.info('   ⚠️ Debug panel failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Debug panel failed, continuing"
        },
        {
          "line": 333,
          "content": "logger.info('   ⚠️ Terminal failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Terminal failed, continuing...'"
        },
        {
          "line": 333,
          "content": "logger.info('   ⚠️ Terminal failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Terminal failed, continuing"
        },
        {
          "line": 345,
          "content": "logger.info('   ⚠️ Problems panel failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Problems panel failed, continuing...'"
        },
        {
          "line": 345,
          "content": "logger.info('   ⚠️ Problems panel failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Problems panel failed, continuing"
        },
        {
          "line": 357,
          "content": "logger.info('   ⚠️ Output panel failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Output panel failed, continuing...'"
        },
        {
          "line": 357,
          "content": "logger.info('   ⚠️ Output panel failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Output panel failed, continuing"
        },
        {
          "line": 369,
          "content": "logger.info('   ⚠️ Settings failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Settings failed, continuing...'"
        },
        {
          "line": 369,
          "content": "logger.info('   ⚠️ Settings failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Settings failed, continuing"
        },
        {
          "line": 381,
          "content": "logger.info('   ⚠️ File explorer failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ File explorer failed, continuing...'"
        },
        {
          "line": 381,
          "content": "logger.info('   ⚠️ File explorer failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ File explorer failed, continuing"
        },
        {
          "line": 393,
          "content": "logger.info('   ⚠️ Source control failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Source control failed, continuing...'"
        },
        {
          "line": 393,
          "content": "logger.info('   ⚠️ Source control failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Source control failed, continuing"
        },
        {
          "line": 405,
          "content": "logger.info('   ⚠️ Run and debug failed, continuing...');",
          "type": "direct_data",
          "match": "logger.info('   ⚠️ Run and debug failed, continuing...'"
        },
        {
          "line": 405,
          "content": "logger.info('   ⚠️ Run and debug failed, continuing...');",
          "type": "variable_data",
          "match": "logger.info('   ⚠️ Run and debug failed, continuing"
        },
        {
          "line": 434,
          "content": "logger.info(`   📁 Directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`   📁 Directory: ${this.outputDir}`"
        },
        {
          "line": 435,
          "content": "logger.info(`   📄 States collected: ${this.collectedStates.size}/${this.stateConfigs.length}`);",
          "type": "template_data",
          "match": "logger.info(`   📄 States collected: ${this.collectedStates.size}/${this.stateConfigs.length}`"
        },
        {
          "line": 436,
          "content": "logger.info(`   🔢 Total elements: ${report.summary.totalElements}`);",
          "type": "template_data",
          "match": "logger.info(`   🔢 Total elements: ${report.summary.totalElements}`"
        },
        {
          "line": 437,
          "content": "logger.info(`   📊 Average per state: ${Math.round(report.summary.averageElementsPerState)}`);",
          "type": "template_data",
          "match": "logger.info(`   📊 Average per state: ${Math.round(report.summary.averageElementsPerState)}`"
        },
        {
          "line": 445,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 445,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 445,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        }
      ]
    },
    "./scripts/vscode/vscode-chat-handler.js": {
      "totalFindings": 42,
      "byType": {
        "template_data": 29,
        "direct_data": 6,
        "variable_data": 6,
        "error_object": 1
      },
      "findings": [
        {
          "line": 19,
          "content": "logger.info(`📁 Created VSCode chat directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created VSCode chat directory: ${this.outputDir}`"
        },
        {
          "line": 40,
          "content": "logger.info(`🔍 Found VSCode IDE on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Found VSCode IDE on port ${port}`"
        },
        {
          "line": 44,
          "content": "logger.info(`✅ Connected to VSCode CDP on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to VSCode CDP on port ${port}`"
        },
        {
          "line": 48,
          "content": "logger.info(`✅ VSCode app page ready: ${this.page.url()}`);",
          "type": "template_data",
          "match": "logger.info(`✅ VSCode app page ready: ${this.page.url()}`"
        },
        {
          "line": 59,
          "content": "logger.info(`  🌐 Initial page URL: ${url}`);",
          "type": "template_data",
          "match": "logger.info(`  🌐 Initial page URL: ${url}`"
        },
        {
          "line": 71,
          "content": "logger.info(`  🌐 After navigation: ${url}`);",
          "type": "template_data",
          "match": "logger.info(`  🌐 After navigation: ${url}`"
        },
        {
          "line": 73,
          "content": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message);",
          "type": "direct_data",
          "match": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message"
        },
        {
          "line": 73,
          "content": "logger.info('  ⚠️ Navigation to VSCode app failed:', e.message);",
          "type": "variable_data",
          "match": "logger.info('  ⚠️ Navigation to VSCode app failed:', e"
        },
        {
          "line": 92,
          "content": "logger.info(`📝 Sending VSCode chat message: \"${message}\"`);",
          "type": "template_data",
          "match": "logger.info(`📝 Sending VSCode chat message: \"${message}\"`"
        },
        {
          "line": 112,
          "content": "logger.info(`  ✅ Found chat input: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found chat input: ${selector}`"
        },
        {
          "line": 122,
          "content": "logger.info(`  🔍 Found chat container, clicking to focus...`);",
          "type": "direct_data",
          "match": "logger.info(`  🔍 Found chat container, clicking to focus...`"
        },
        {
          "line": 122,
          "content": "logger.info(`  🔍 Found chat container, clicking to focus...`);",
          "type": "variable_data",
          "match": "logger.info(`  🔍 Found chat container, clicking"
        },
        {
          "line": 131,
          "content": "logger.info(`  ✅ Found chat input after container click: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found chat input after container click: ${selector}`"
        },
        {
          "line": 191,
          "content": "logger.info(`Failed with selector ${selector}:`, e.message);",
          "type": "direct_data",
          "match": "logger.info(`Failed with selector ${selector}:`, e.message"
        },
        {
          "line": 191,
          "content": "logger.info(`Failed with selector ${selector}:`, e.message);",
          "type": "variable_data",
          "match": "logger.info(`Failed with selector ${selector}:`, e"
        },
        {
          "line": 191,
          "content": "logger.info(`Failed with selector ${selector}:`, e.message);",
          "type": "template_data",
          "match": "logger.info(`Failed with selector ${selector}:`"
        },
        {
          "line": 203,
          "content": "logger.info(`  📝 Typed message via JavaScript: \"${message}\"`);",
          "type": "template_data",
          "match": "logger.info(`  📝 Typed message via JavaScript: \"${message}\"`"
        },
        {
          "line": 207,
          "content": "logger.info(`  ⚠️ JavaScript method failed, trying keyboard method: ${error.message}`);",
          "type": "direct_data",
          "match": "logger.info(`  ⚠️ JavaScript method failed, trying keyboard method: ${error.message}`"
        },
        {
          "line": 207,
          "content": "logger.info(`  ⚠️ JavaScript method failed, trying keyboard method: ${error.message}`);",
          "type": "variable_data",
          "match": "logger.info(`  ⚠️ JavaScript method failed, trying"
        },
        {
          "line": 207,
          "content": "logger.info(`  ⚠️ JavaScript method failed, trying keyboard method: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ JavaScript method failed, trying keyboard method: ${error.message}`"
        },
        {
          "line": 222,
          "content": "logger.info(`  📝 Typed message via keyboard: \"${message}\"`);",
          "type": "template_data",
          "match": "logger.info(`  📝 Typed message via keyboard: \"${message}\"`"
        },
        {
          "line": 244,
          "content": "logger.info(`  ✅ Clicked send button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicked send button: ${selector}`"
        },
        {
          "line": 253,
          "content": "logger.info(`  ⚠️ Send button not found, trying Enter key...`);",
          "type": "direct_data",
          "match": "logger.info(`  ⚠️ Send button not found, trying Enter key...`"
        },
        {
          "line": 253,
          "content": "logger.info(`  ⚠️ Send button not found, trying Enter key...`);",
          "type": "variable_data",
          "match": "logger.info(`  ⚠️ Send button not found, trying"
        },
        {
          "line": 320,
          "content": "logger.info(`  📄 Page title: ${title}`);",
          "type": "template_data",
          "match": "logger.info(`  📄 Page title: ${title}`"
        },
        {
          "line": 321,
          "content": "logger.info(`  🌐 URL: ${url}`);",
          "type": "template_data",
          "match": "logger.info(`  🌐 URL: ${url}`"
        },
        {
          "line": 346,
          "content": "logger.info(`    Chat Input: ${vscodeElements.hasChatInput ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Chat Input: ${vscodeElements.hasChatInput ? '✅' : '❌'}`"
        },
        {
          "line": 347,
          "content": "logger.info(`    Chat Container: ${vscodeElements.hasChatContainer ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Chat Container: ${vscodeElements.hasChatContainer ? '✅' : '❌'}`"
        },
        {
          "line": 348,
          "content": "logger.info(`    Send Button: ${vscodeElements.hasSendButton ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Send Button: ${vscodeElements.hasSendButton ? '✅' : '❌'}`"
        },
        {
          "line": 349,
          "content": "logger.info(`    Monaco Editor: ${vscodeElements.hasMonacoEditor ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Monaco Editor: ${vscodeElements.hasMonacoEditor ? '✅' : '❌'}`"
        },
        {
          "line": 350,
          "content": "logger.info(`    Chat Input Container: ${vscodeElements.hasChatInputContainer ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Chat Input Container: ${vscodeElements.hasChatInputContainer ? '✅' : '❌'}`"
        },
        {
          "line": 351,
          "content": "logger.info(`    Interactive Input: ${vscodeElements.hasInteractiveInput ? '✅' : '❌'}`);",
          "type": "template_data",
          "match": "logger.info(`    Interactive Input: ${vscodeElements.hasInteractiveInput ? '✅' : '❌'}`"
        },
        {
          "line": 352,
          "content": "logger.info(`    VSCode Elements: ${vscodeElements.vscodeElementCount}`);",
          "type": "template_data",
          "match": "logger.info(`    VSCode Elements: ${vscodeElements.vscodeElementCount}`"
        },
        {
          "line": 365,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 365,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 365,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 388,
          "content": "logger.info(`📋 Found ${history.length} chat messages`);",
          "type": "template_data",
          "match": "logger.info(`📋 Found ${history.length} chat messages`"
        },
        {
          "line": 392,
          "content": "logger.info(`Type:      ${msg.type}`);",
          "type": "template_data",
          "match": "logger.info(`Type:      ${msg.type}`"
        },
        {
          "line": 393,
          "content": "logger.info(`Username:  ${msg.username}`);",
          "type": "template_data",
          "match": "logger.info(`Username:  ${msg.username}`"
        },
        {
          "line": 394,
          "content": "logger.info(`Text:      ${msg.text}`);",
          "type": "template_data",
          "match": "logger.info(`Text:      ${msg.text}`"
        },
        {
          "line": 395,
          "content": "logger.info(`Selector:  ${msg.selector}`);",
          "type": "template_data",
          "match": "logger.info(`Selector:  ${msg.selector}`"
        },
        {
          "line": 396,
          "content": "logger.info(`RowIndex:  ${msg.rowIndex}`);",
          "type": "template_data",
          "match": "logger.info(`RowIndex:  ${msg.rowIndex}`"
        }
      ]
    },
    "./scripts/workflows/idea-to-execution.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 9,
        "direct_data": 3
      },
      "findings": [
        {
          "line": 62,
          "content": "logger.info(`💡 Processing idea: \"${idea}\"`);",
          "type": "template_data",
          "match": "logger.info(`💡 Processing idea: \"${idea}\"`"
        },
        {
          "line": 128,
          "content": "logger.info(`   Original Idea: ${result.originalIdea}`);",
          "type": "template_data",
          "match": "logger.info(`   Original Idea: ${result.originalIdea}`"
        },
        {
          "line": 129,
          "content": "logger.info(`   Task ID: ${result.taskId}`);",
          "type": "template_data",
          "match": "logger.info(`   Task ID: ${result.taskId}`"
        },
        {
          "line": 130,
          "content": "logger.info(`   Subtasks Created: ${result.splitTasks.length}`);",
          "type": "template_data",
          "match": "logger.info(`   Subtasks Created: ${result.splitTasks.length}`"
        },
        {
          "line": 131,
          "content": "logger.info(`   Execution Results: ${result.executionResults.length}`);",
          "type": "template_data",
          "match": "logger.info(`   Execution Results: ${result.executionResults.length}`"
        },
        {
          "line": 137,
          "content": "logger.info(`   Successful: ${successful}`);",
          "type": "template_data",
          "match": "logger.info(`   Successful: ${successful}`"
        },
        {
          "line": 138,
          "content": "logger.info(`   Failed: ${failed}`);",
          "type": "template_data",
          "match": "logger.info(`   Failed: ${failed}`"
        },
        {
          "line": 139,
          "content": "logger.info(`   Success Rate: ${((successful / result.executionResults.length) * 100).toFixed(1)}%`);",
          "type": "template_data",
          "match": "logger.info(`   Success Rate: ${((successful / result.executionResults.length) * 100).toFixed(1)}%`"
        },
        {
          "line": 147,
          "content": "logger.info(`   - Subtask ${r.subtaskId}: ${r.error}`);",
          "type": "template_data",
          "match": "logger.info(`   - Subtask ${r.subtaskId}: ${r.error}`"
        },
        {
          "line": 164,
          "content": "logger.info('  --interactive, -i    Run in interactive mode');",
          "type": "direct_data",
          "match": "logger.info('  --interactive, -i    Run in interactive mode'"
        },
        {
          "line": 165,
          "content": "logger.info('  --file, -f <file>    Read idea from file');",
          "type": "direct_data",
          "match": "logger.info('  --file, -f <file>    Read idea from file'"
        },
        {
          "line": 166,
          "content": "logger.info('  --help, -h           Show this help');",
          "type": "direct_data",
          "match": "logger.info('  --help, -h           Show this help'"
        }
      ]
    },
    "./scripts/cleanup-logging.js": {
      "totalFindings": 1,
      "byType": {
        "template_data": 1
      },
      "findings": [
        {
          "line": 33,
          "content": "logger.info(`${colors[color]}${message}${colors.reset}`);",
          "type": "template_data",
          "match": "logger.info(`${colors[color]}${message}${colors.reset}`"
        }
      ]
    },
    "./scripts/validate-logging-migration.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 12
      },
      "findings": [
        {
          "line": 250,
          "content": "logger.info(`📁 Total Files: ${report.summary.totalFiles}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Total Files: ${report.summary.totalFiles}`"
        },
        {
          "line": 251,
          "content": "logger.info(`✅ Compliant Files: ${report.validation.valid}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Compliant Files: ${report.validation.valid}`"
        },
        {
          "line": 252,
          "content": "logger.info(`❌ Non-Compliant Files: ${report.validation.invalid}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Non-Compliant Files: ${report.validation.invalid}`"
        },
        {
          "line": 253,
          "content": "logger.info(`📈 Compliance Rate: ${report.validation.complianceRate}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Compliance Rate: ${report.validation.complianceRate}%`"
        },
        {
          "line": 254,
          "content": "logger.info(`🎯 Status: ${report.summary.status}\\n`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Status: ${report.summary.status}\\n`"
        },
        {
          "line": 260,
          "content": "logger.info(`   - console.log: ${report.scan.consoleLog} files`);",
          "type": "template_data",
          "match": "logger.info(`   - console.log: ${report.scan.consoleLog} files`"
        },
        {
          "line": 263,
          "content": "logger.info(`   - logger.info: ${report.scan.loggerLog} files`);",
          "type": "template_data",
          "match": "logger.info(`   - logger.info: ${report.scan.loggerLog} files`"
        },
        {
          "line": 270,
          "content": "logger.info(`   - Legacy imports: ${report.scan.legacyImport} files`);",
          "type": "template_data",
          "match": "logger.info(`   - Legacy imports: ${report.scan.legacyImport} files`"
        },
        {
          "line": 289,
          "content": "logger.info(`\\n   ${type}:`);",
          "type": "template_data",
          "match": "logger.info(`\\n   ${type}:`"
        },
        {
          "line": 291,
          "content": "logger.info(`     - ${file}`);",
          "type": "template_data",
          "match": "logger.info(`     - ${file}`"
        },
        {
          "line": 294,
          "content": "logger.info(`     ... and ${files.length - 5} more files`);",
          "type": "template_data",
          "match": "logger.info(`     ... and ${files.length - 5} more files`"
        },
        {
          "line": 320,
          "content": "logger.info(`\\n📄 Detailed report saved to: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`\\n📄 Detailed report saved to: ${reportPath}`"
        }
      ]
    },
    "./scripts/enhanced-logging-migration.js": {
      "totalFindings": 41,
      "byType": {
        "direct_data": 10,
        "object_data": 2,
        "variable_data": 6,
        "request_response": 1,
        "database_result": 1,
        "template_data": 16,
        "file_content": 5
      },
      "findings": [
        {
          "line": 46,
          "content": "logger.info('🚀 Starting Enhanced Logging Migration', { dryRun, backup, validate });",
          "type": "direct_data",
          "match": "logger.info('🚀 Starting Enhanced Logging Migration', { dryRun, backup, validate }"
        },
        {
          "line": 46,
          "content": "logger.info('🚀 Starting Enhanced Logging Migration', { dryRun, backup, validate });",
          "type": "object_data",
          "match": "logger.info('🚀 Starting Enhanced Logging Migration', { dryRun, backup, validate }"
        },
        {
          "line": 101,
          "content": "logger.info('📊 Codebase scan completed', results.total);",
          "type": "direct_data",
          "match": "logger.info('📊 Codebase scan completed', results.total"
        },
        {
          "line": 101,
          "content": "logger.info('📊 Codebase scan completed', results.total);",
          "type": "variable_data",
          "match": "logger.info('📊 Codebase scan completed', results"
        },
        {
          "line": 101,
          "content": "logger.info('📊 Codebase scan completed', results.total);",
          "type": "request_response",
          "match": "logger.info('📊 Codebase scan completed', res"
        },
        {
          "line": 101,
          "content": "logger.info('📊 Codebase scan completed', results.total);",
          "type": "database_result",
          "match": "logger.info('📊 Codebase scan completed', result"
        },
        {
          "line": 122,
          "content": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`, { dryRun, backup });",
          "type": "direct_data",
          "match": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`, { dryRun, backup }"
        },
        {
          "line": 122,
          "content": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`, { dryRun, backup });",
          "type": "object_data",
          "match": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`, { dryRun, backup }"
        },
        {
          "line": 122,
          "content": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`, { dryRun, backup });",
          "type": "template_data",
          "match": "logger.info(`🔧 Migrating ${uniqueFiles.length} files...`"
        },
        {
          "line": 141,
          "content": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "direct_data",
          "match": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 141,
          "content": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "variable_data",
          "match": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 141,
          "content": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "template_data",
          "match": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath)}`"
        },
        {
          "line": 141,
          "content": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "file_content",
          "match": "logger.debug(`✅ Migrated: ${path.relative(this.projectRoot, file"
        },
        {
          "line": 146,
          "content": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "direct_data",
          "match": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 146,
          "content": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "variable_data",
          "match": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 146,
          "content": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "template_data",
          "match": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath)}`"
        },
        {
          "line": 146,
          "content": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "file_content",
          "match": "logger.warn(`❌ Failed to migrate: ${path.relative(this.projectRoot, file"
        },
        {
          "line": 156,
          "content": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "direct_data",
          "match": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 156,
          "content": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "variable_data",
          "match": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 156,
          "content": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "template_data",
          "match": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath)}`"
        },
        {
          "line": 156,
          "content": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "file_content",
          "match": "logger.error(`💥 Error migrating: ${path.relative(this.projectRoot, file"
        },
        {
          "line": 162,
          "content": "logger.info('🔧 Migration completed', {",
          "type": "direct_data",
          "match": "logger.info('🔧 Migration completed', {"
        },
        {
          "line": 182,
          "content": "logger.info(`✅ Validating ${allMigratedFiles.length} migrated files...`);",
          "type": "template_data",
          "match": "logger.info(`✅ Validating ${allMigratedFiles.length} migrated files...`"
        },
        {
          "line": 192,
          "content": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "direct_data",
          "match": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 192,
          "content": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "variable_data",
          "match": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 192,
          "content": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "template_data",
          "match": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath)}`"
        },
        {
          "line": 192,
          "content": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "file_content",
          "match": "logger.warn(`⚠️ Validation issues in: ${path.relative(this.projectRoot, file"
        },
        {
          "line": 202,
          "content": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "direct_data",
          "match": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 202,
          "content": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "variable_data",
          "match": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath"
        },
        {
          "line": 202,
          "content": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "template_data",
          "match": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath)}`"
        },
        {
          "line": 202,
          "content": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, filePath)}`, {",
          "type": "file_content",
          "match": "logger.error(`💥 Validation error in: ${path.relative(this.projectRoot, file"
        },
        {
          "line": 208,
          "content": "logger.info('✅ Validation completed', {",
          "type": "direct_data",
          "match": "logger.info('✅ Validation completed', {"
        },
        {
          "line": 289,
          "content": "logger.info(`📄 Migration report saved to: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Migration report saved to: ${reportPath}`"
        },
        {
          "line": 364,
          "content": "logger.info(`📝 Manual review TODOs saved to: ${todosPath}`);",
          "type": "template_data",
          "match": "logger.info(`📝 Manual review TODOs saved to: ${todosPath}`"
        },
        {
          "line": 537,
          "content": "logger.info(`Total Files: ${results.summary.scan.totalFiles}`);",
          "type": "template_data",
          "match": "logger.info(`Total Files: ${results.summary.scan.totalFiles}`"
        },
        {
          "line": 538,
          "content": "logger.info(`Files Needing Migration: ${results.summary.scan.filesNeedingMigration}`);",
          "type": "template_data",
          "match": "logger.info(`Files Needing Migration: ${results.summary.scan.filesNeedingMigration}`"
        },
        {
          "line": 539,
          "content": "logger.info(`Migration Success Rate: ${results.summary.migration.successRate}%`);",
          "type": "template_data",
          "match": "logger.info(`Migration Success Rate: ${results.summary.migration.successRate}%`"
        },
        {
          "line": 540,
          "content": "logger.info(`Overall Progress: ${results.summary.overall.migrationProgress}%`);",
          "type": "template_data",
          "match": "logger.info(`Overall Progress: ${results.summary.overall.migrationProgress}%`"
        },
        {
          "line": 541,
          "content": "logger.info(`Status: ${results.summary.overall.status}`);",
          "type": "template_data",
          "match": "logger.info(`Status: ${results.summary.overall.status}`"
        },
        {
          "line": 544,
          "content": "logger.info(`\\n⚠️  ${results.summary.migration.failed} files failed to migrate.`);",
          "type": "template_data",
          "match": "logger.info(`\\n⚠️  ${results.summary.migration.failed} files failed to migrate.`"
        },
        {
          "line": 549,
          "content": "logger.info(`\\n⚠️  ${results.summary.validation.invalid} files have validation issues.`);",
          "type": "template_data",
          "match": "logger.info(`\\n⚠️  ${results.summary.validation.invalid} files have validation issues.`"
        }
      ]
    },
    "./scripts/fix-logging.js": {
      "totalFindings": 1,
      "byType": {
        "template_data": 1
      },
      "findings": [
        {
          "line": 20,
          "content": "logger.info(`${colors[color]}${message}${colors.reset}`);",
          "type": "template_data",
          "match": "logger.info(`${colors[color]}${message}${colors.reset}`"
        }
      ]
    },
    "./scripts/task-organizer.js": {
      "totalFindings": 16,
      "byType": {
        "direct_data": 5,
        "template_data": 11
      },
      "findings": [
        {
          "line": 57,
          "content": "logger.info('❌ No action specified. Use --organize, --validate, or --report');",
          "type": "direct_data",
          "match": "logger.info('❌ No action specified. Use --organize, --validate, or --report'"
        },
        {
          "line": 74,
          "content": "logger.info(`📁 Processing category: ${category} (${taskList.length} tasks)`);",
          "type": "template_data",
          "match": "logger.info(`📁 Processing category: ${category} (${taskList.length} tasks)`"
        },
        {
          "line": 78,
          "content": "logger.info(`   ✅ Moved: ${path.basename(task)} → ${category}/`);",
          "type": "template_data",
          "match": "logger.info(`   ✅ Moved: ${path.basename(task)} → ${category}/`"
        },
        {
          "line": 96,
          "content": "logger.info(`⚠️  ${path.basename(task)}:`);",
          "type": "template_data",
          "match": "logger.info(`⚠️  ${path.basename(task)}:`"
        },
        {
          "line": 97,
          "content": "issues.forEach(issue => logger.info(`   - ${issue}`));",
          "type": "template_data",
          "match": "logger.info(`   - ${issue}`"
        },
        {
          "line": 125,
          "content": "logger.info(`\\n${category.toUpperCase()} (${taskList.length} tasks, ${categoryHours}h):`);",
          "type": "template_data",
          "match": "logger.info(`\\n${category.toUpperCase()} (${taskList.length} tasks, ${categoryHours}h):`"
        },
        {
          "line": 126,
          "content": "logger.info(`  ${this.categories[category] || 'Uncategorized'}`);",
          "type": "template_data",
          "match": "logger.info(`  ${this.categories[category] || 'Uncategorized'}`"
        },
        {
          "line": 130,
          "content": "logger.info(`  - ${path.basename(task)} (${taskInfo.hours}h, ${taskInfo.priority})`);",
          "type": "template_data",
          "match": "logger.info(`  - ${path.basename(task)} (${taskInfo.hours}h, ${taskInfo.priority})`"
        },
        {
          "line": 135,
          "content": "logger.info(`  Total Tasks: ${totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  Total Tasks: ${totalTasks}`"
        },
        {
          "line": 136,
          "content": "logger.info(`  Total Hours: ${totalHours}`);",
          "type": "template_data",
          "match": "logger.info(`  Total Hours: ${totalHours}`"
        },
        {
          "line": 137,
          "content": "logger.info(`  Categories: ${Object.keys(organized).filter(cat => organized[cat].length > 0).length}`);",
          "type": "template_data",
          "match": "logger.info(`  Categories: ${Object.keys(organized).filter(cat => organized[cat].length > 0).length}`"
        },
        {
          "line": 292,
          "content": "logger.info('  --organize, -o    Organize tasks into categories');",
          "type": "direct_data",
          "match": "logger.info('  --organize, -o    Organize tasks into categories'"
        },
        {
          "line": 293,
          "content": "logger.info('  --validate, -v    Validate task structure');",
          "type": "direct_data",
          "match": "logger.info('  --validate, -v    Validate task structure'"
        },
        {
          "line": 294,
          "content": "logger.info('  --report, -r      Generate task report');",
          "type": "direct_data",
          "match": "logger.info('  --report, -r      Generate task report'"
        },
        {
          "line": 295,
          "content": "logger.info('  --help, -h        Show this help');",
          "type": "direct_data",
          "match": "logger.info('  --help, -h        Show this help'"
        },
        {
          "line": 299,
          "content": "logger.info(`  ${category}: ${description}`);",
          "type": "template_data",
          "match": "logger.info(`  ${category}: ${description}`"
        }
      ]
    },
    "./scripts/performance-test-pidea-agent.js": {
      "totalFindings": 24,
      "byType": {
        "template_data": 24
      },
      "findings": [
        {
          "line": 126,
          "content": "logger.info(`\\n🚀 Testing ${endpointName} endpoint...`);",
          "type": "template_data",
          "match": "logger.info(`\\n🚀 Testing ${endpointName} endpoint...`"
        },
        {
          "line": 193,
          "content": "logger.info(`✅ ${endpointName} test completed`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${endpointName} test completed`"
        },
        {
          "line": 203,
          "content": "logger.info(`Testing with ${concurrency} concurrent requests...`);",
          "type": "template_data",
          "match": "logger.info(`Testing with ${concurrency} concurrent requests...`"
        },
        {
          "line": 278,
          "content": "logger.info(`Total Requests: ${results.summary.totalRequests}`);",
          "type": "template_data",
          "match": "logger.info(`Total Requests: ${results.summary.totalRequests}`"
        },
        {
          "line": 279,
          "content": "logger.info(`Successful: ${results.summary.successfulRequests}`);",
          "type": "template_data",
          "match": "logger.info(`Successful: ${results.summary.successfulRequests}`"
        },
        {
          "line": 280,
          "content": "logger.info(`Failed: ${results.summary.failedRequests}`);",
          "type": "template_data",
          "match": "logger.info(`Failed: ${results.summary.failedRequests}`"
        },
        {
          "line": 281,
          "content": "logger.info(`Success Rate: ${((results.summary.successfulRequests / results.summary.totalRequests) * 100).toFixed(2)}%`);",
          "type": "template_data",
          "match": "logger.info(`Success Rate: ${((results.summary.successfulRequests / results.summary.totalRequests) * 100).toFixed(2)}%`"
        },
        {
          "line": 287,
          "content": "logger.info(`\\n${endpoint}:`);",
          "type": "template_data",
          "match": "logger.info(`\\n${endpoint}:`"
        },
        {
          "line": 288,
          "content": "logger.info(`  Average: ${formatDuration(data.stats.average)}`);",
          "type": "template_data",
          "match": "logger.info(`  Average: ${formatDuration(data.stats.average)}`"
        },
        {
          "line": 289,
          "content": "logger.info(`  Min: ${formatDuration(data.stats.min)}`);",
          "type": "template_data",
          "match": "logger.info(`  Min: ${formatDuration(data.stats.min)}`"
        },
        {
          "line": 290,
          "content": "logger.info(`  Max: ${formatDuration(data.stats.max)}`);",
          "type": "template_data",
          "match": "logger.info(`  Max: ${formatDuration(data.stats.max)}`"
        },
        {
          "line": 291,
          "content": "logger.info(`  P50: ${formatDuration(data.stats.p50)}`);",
          "type": "template_data",
          "match": "logger.info(`  P50: ${formatDuration(data.stats.p50)}`"
        },
        {
          "line": 292,
          "content": "logger.info(`  P95: ${formatDuration(data.stats.p95)}`);",
          "type": "template_data",
          "match": "logger.info(`  P95: ${formatDuration(data.stats.p95)}`"
        },
        {
          "line": 293,
          "content": "logger.info(`  P99: ${formatDuration(data.stats.p99)}`);",
          "type": "template_data",
          "match": "logger.info(`  P99: ${formatDuration(data.stats.p99)}`"
        },
        {
          "line": 294,
          "content": "logger.info(`  Success Rate: ${((data.successfulRequests / data.totalRequests) * 100).toFixed(2)}%`);",
          "type": "template_data",
          "match": "logger.info(`  Success Rate: ${((data.successfulRequests / data.totalRequests) * 100).toFixed(2)}%`"
        },
        {
          "line": 307,
          "content": "logger.info(`${status} ${endpoint} P95: ${formatDuration(p95)} (target: ${CONFIG.performance.maxResponseTime}ms)`);",
          "type": "template_data",
          "match": "logger.info(`${status} ${endpoint} P95: ${formatDuration(p95)} (target: ${CONFIG.performance.maxResponseTime}ms)`"
        },
        {
          "line": 322,
          "content": "logger.info(`  ${error} (${count} times)`);",
          "type": "template_data",
          "match": "logger.info(`  ${error} (${count} times)`"
        },
        {
          "line": 326,
          "content": "logger.info(`\\n${allPassed ? '🎉 All performance targets met!' : '⚠️  Some performance targets not met'}`);",
          "type": "template_data",
          "match": "logger.info(`\\n${allPassed ? '🎉 All performance targets met!' : '⚠️  Some performance targets not met'}`"
        },
        {
          "line": 336,
          "content": "logger.info(`Base URL: ${CONFIG.baseURL}`);",
          "type": "template_data",
          "match": "logger.info(`Base URL: ${CONFIG.baseURL}`"
        },
        {
          "line": 337,
          "content": "logger.info(`Test Duration: ${CONFIG.performance.testDuration / 1000}s`);",
          "type": "template_data",
          "match": "logger.info(`Test Duration: ${CONFIG.performance.testDuration / 1000}s`"
        },
        {
          "line": 338,
          "content": "logger.info(`Max Response Time: ${CONFIG.performance.maxResponseTime}ms`);",
          "type": "template_data",
          "match": "logger.info(`Max Response Time: ${CONFIG.performance.maxResponseTime}ms`"
        },
        {
          "line": 356,
          "content": "logger.info(`${concurrency} concurrent: ${data.throughput.toFixed(2)} req/s, ${formatDuration(data.averageResponseTime)} avg`);",
          "type": "template_data",
          "match": "logger.info(`${concurrency} concurrent: ${data.throughput.toFixed(2)} req/s, ${formatDuration(data.averageResponseTime)} avg`"
        },
        {
          "line": 362,
          "content": "logger.info(`Max Requests: ${stressResults.maxRequests}`);",
          "type": "template_data",
          "match": "logger.info(`Max Requests: ${stressResults.maxRequests}`"
        },
        {
          "line": 364,
          "content": "logger.info(`Breaking Point: ${stressResults.breakingPoint} requests`);",
          "type": "template_data",
          "match": "logger.info(`Breaking Point: ${stressResults.breakingPoint} requests`"
        }
      ]
    },
    "./scripts/cursor/coverage-validator.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 14,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 81,
          "content": "logger.info(`📁 Created directory: ${outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created directory: ${outputDir}`"
        },
        {
          "line": 87,
          "content": "logger.info(`⚠️ Analysis file not found: ${this.analysisFile}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Analysis file not found: ${this.analysisFile}`"
        },
        {
          "line": 248,
          "content": "logger.info(`📊 Analysiere ${selectorCount} gefundene Features`);",
          "type": "template_data",
          "match": "logger.info(`📊 Analysiere ${selectorCount} gefundene Features`"
        },
        {
          "line": 285,
          "content": "logger.info(`📄 Coverage Report: ${this.outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Coverage Report: ${this.outputFile}`"
        },
        {
          "line": 296,
          "content": "logger.info(`Status: ${summary.status}`);",
          "type": "template_data",
          "match": "logger.info(`Status: ${summary.status}`"
        },
        {
          "line": 297,
          "content": "logger.info(`Progress: ${summary.progress}`);",
          "type": "template_data",
          "match": "logger.info(`Progress: ${summary.progress}`"
        },
        {
          "line": 298,
          "content": "logger.info(`Ready for Production: ${summary.readyForProduction ? '✅ YES' : '❌ NO'}`);",
          "type": "template_data",
          "match": "logger.info(`Ready for Production: ${summary.readyForProduction ? '✅ YES' : '❌ NO'}`"
        },
        {
          "line": 304,
          "content": "logger.info(`  ${status} ${category}: ${results.found.length}/${results.total} (${results.percentage}%)`);",
          "type": "template_data",
          "match": "logger.info(`  ${status} ${category}: ${results.found.length}/${results.total} (${results.percentage}%)`"
        },
        {
          "line": 310,
          "content": "logger.info(`  ❌ ${missing.feature} (${missing.category})`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ ${missing.feature} (${missing.category})`"
        },
        {
          "line": 314,
          "content": "logger.info(`  ... und ${coverage.missingFeatures.length - 10} weitere`);",
          "type": "template_data",
          "match": "logger.info(`  ... und ${coverage.missingFeatures.length - 10} weitere`"
        },
        {
          "line": 319,
          "content": "logger.info(`  ${i + 1}. ${rec.category}: ${rec.missingFeatures.length} Features`);",
          "type": "template_data",
          "match": "logger.info(`  ${i + 1}. ${rec.category}: ${rec.missingFeatures.length} Features`"
        },
        {
          "line": 321,
          "content": "logger.info(`     • ${action}`);",
          "type": "template_data",
          "match": "logger.info(`     • ${action}`"
        },
        {
          "line": 340,
          "content": "logger.info(`Coverage: ${coverage.overall.percentage}% (${coverage.overall.found}/${coverage.overall.total})`);",
          "type": "template_data",
          "match": "logger.info(`Coverage: ${coverage.overall.percentage}% (${coverage.overall.found}/${coverage.overall.total})`"
        },
        {
          "line": 344,
          "content": "logger.info(`Missing: ${missing.join(', ')}${coverage.missingFeatures.length > 5 ? '...' : ''}`);",
          "type": "direct_data",
          "match": "logger.info(`Missing: ${missing.join(', '"
        },
        {
          "line": 344,
          "content": "logger.info(`Missing: ${missing.join(', ')}${coverage.missingFeatures.length > 5 ? '...' : ''}`);",
          "type": "template_data",
          "match": "logger.info(`Missing: ${missing.join(', ')}${coverage.missingFeatures.length > 5 ? '...' : ''}`"
        }
      ]
    },
    "./scripts/cursor/validate-streaming.js": {
      "totalFindings": 5,
      "byType": {
        "template_data": 5
      },
      "findings": [
        {
          "line": 48,
          "content": "logger.info(`✅ ${name}`);",
          "type": "template_data",
          "match": "logger.info(`✅ ${name}`"
        },
        {
          "line": 51,
          "content": "logger.info(`❌ ${name}: ${error}`);",
          "type": "template_data",
          "match": "logger.info(`❌ ${name}: ${error}`"
        },
        {
          "line": 197,
          "content": "logger.info(`✅ Passed: ${results.passed}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passed: ${results.passed}`"
        },
        {
          "line": 198,
          "content": "logger.info(`❌ Failed: ${results.failed}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${results.failed}`"
        },
        {
          "line": 199,
          "content": "logger.info(`📈 Success Rate: ${Math.round((results.passed / (results.passed + results.failed)) * 100)}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Success Rate: ${Math.round((results.passed / (results.passed + results.failed)) * 100)}%`"
        }
      ]
    },
    "./scripts/cursor/modal-analyzer.js": {
      "totalFindings": 3,
      "byType": {
        "template_data": 3
      },
      "findings": [
        {
          "line": 77,
          "content": "logger.info(`🔍 Analyzing modals in ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing modals in ${sourceFile}...`"
        },
        {
          "line": 284,
          "content": "logger.info(`📄 Modal analysis saved: ${analysisFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Modal analysis saved: ${analysisFile}`"
        },
        {
          "line": 285,
          "content": "logger.info(`📄 Summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/cursor/dom-analyzer.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 9,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 31,
          "content": "logger.info(`📁 Verwende komplette DOM-Source: ${completeFile}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Verwende komplette DOM-Source: ${completeFile}`"
        },
        {
          "line": 35,
          "content": "logger.info(`📁 Fallback zu individuellen Dateien: ${sourceFiles.length} gefunden`);",
          "type": "template_data",
          "match": "logger.info(`📁 Fallback zu individuellen Dateien: ${sourceFiles.length} gefunden`"
        },
        {
          "line": 38,
          "content": "logger.info(`📁 Analyse-Dateien: ${sourceFiles.length}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Analyse-Dateien: ${sourceFiles.length}`"
        },
        {
          "line": 45,
          "content": "logger.info(`📄 ${file}: ${htmlContent.length} Zeichen HTML`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${htmlContent.length} Zeichen HTML`"
        },
        {
          "line": 123,
          "content": "logger.info(`🔍 Analyzing ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing ${sourceFile}...`"
        },
        {
          "line": 127,
          "content": "logger.info(`  └─ ${allElements.length} DOM-Elemente gefunden`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${allElements.length} DOM-Elemente gefunden`"
        },
        {
          "line": 494,
          "content": "logger.info(`  ✅ ${featureName}: ${elements.length} Elemente`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${featureName}: ${elements.length} Elemente`"
        },
        {
          "line": 697,
          "content": "logger.info(`📁 Output: ${outputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${outputPath}`"
        },
        {
          "line": 698,
          "content": "logger.info(`📈 Stats: ${stats.totalElements} Elemente, ${stats.featuresFound} Features`);",
          "type": "direct_data",
          "match": "logger.info(`📈 Stats: ${stats.totalElements} Elemente, ${stats.featuresFound} Features`"
        },
        {
          "line": 698,
          "content": "logger.info(`📈 Stats: ${stats.totalElements} Elemente, ${stats.featuresFound} Features`);",
          "type": "template_data",
          "match": "logger.info(`📈 Stats: ${stats.totalElements} Elemente, ${stats.featuresFound} Features`"
        }
      ]
    },
    "./scripts/cursor/test-enhanced-coverage.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 10
      },
      "findings": [
        {
          "line": 309,
          "content": "logger.info(`  ✅ ${testName}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${testName}`"
        },
        {
          "line": 313,
          "content": "logger.info(`  ❌ ${testName}${details ? `: ${details}` : ''}`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ ${testName}${details ? `: ${details}`"
        },
        {
          "line": 317,
          "content": "logger.info(`  ⚠️ ${testName}${details ? `: ${details}` : ''}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ ${testName}${details ? `: ${details}`"
        },
        {
          "line": 330,
          "content": "logger.info(`✅ Passed: ${this.testResults.passed}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Passed: ${this.testResults.passed}`"
        },
        {
          "line": 331,
          "content": "logger.info(`❌ Failed: ${this.testResults.failed}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Failed: ${this.testResults.failed}`"
        },
        {
          "line": 332,
          "content": "logger.info(`⚠️ Warnings: ${this.testResults.warnings}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Warnings: ${this.testResults.warnings}`"
        },
        {
          "line": 333,
          "content": "logger.info(`📈 Success Rate: ${successRate}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Success Rate: ${successRate}%`"
        },
        {
          "line": 340,
          "content": "logger.info(`  - ${result.test}: ${result.details}`);",
          "type": "template_data",
          "match": "logger.info(`  - ${result.test}: ${result.details}`"
        },
        {
          "line": 349,
          "content": "logger.info(`  - ${result.test}: ${result.details}`);",
          "type": "template_data",
          "match": "logger.info(`  - ${result.test}: ${result.details}`"
        },
        {
          "line": 356,
          "content": "logger.info(`\\n📄 Detailed report saved: ${reportFile}`);",
          "type": "template_data",
          "match": "logger.info(`\\n📄 Detailed report saved: ${reportFile}`"
        }
      ]
    },
    "./scripts/cursor/enhanced-chat-analyzer.js": {
      "totalFindings": 15,
      "byType": {
        "template_data": 13,
        "direct_data": 1,
        "variable_data": 1
      },
      "findings": [
        {
          "line": 26,
          "content": "logger.info(`📁 Created chat analysis directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created chat analysis directory: ${this.outputDir}`"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "direct_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "variable_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using"
        },
        {
          "line": 38,
          "content": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Enhanced collection not found, using fallback: ${fallbackPath}`"
        },
        {
          "line": 48,
          "content": "logger.info(`📁 Chat Analysis Source: ${sourcePath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Chat Analysis Source: ${sourcePath}`"
        },
        {
          "line": 49,
          "content": "logger.info(`📄 Found ${allFiles.length} DOM files`);",
          "type": "template_data",
          "match": "logger.info(`📄 Found ${allFiles.length} DOM files`"
        },
        {
          "line": 58,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML elements`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML elements`"
        },
        {
          "line": 106,
          "content": "logger.info(`📁 Output: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${this.outputDir}`"
        },
        {
          "line": 107,
          "content": "logger.info(`🎯 Chat Features Found: ${Object.keys(this.results.chatFeatures).length}`);",
          "type": "template_data",
          "match": "logger.info(`🎯 Chat Features Found: ${Object.keys(this.results.chatFeatures).length}`"
        },
        {
          "line": 108,
          "content": "logger.info(`🔍 Issues Identified: ${this.results.chatIssues.length}`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Issues Identified: ${this.results.chatIssues.length}`"
        },
        {
          "line": 109,
          "content": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`);",
          "type": "template_data",
          "match": "logger.info(`💡 Recommendations: ${this.results.recommendations.length}`"
        },
        {
          "line": 124,
          "content": "logger.info(`🔍 Analyzing chat features in ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing chat features in ${sourceFile}...`"
        },
        {
          "line": 306,
          "content": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${featureName}: ${elements.length} elements`"
        },
        {
          "line": 678,
          "content": "logger.info(`📄 Analysis saved: ${outputFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Analysis saved: ${outputFile}`"
        },
        {
          "line": 679,
          "content": "logger.info(`📄 Summary saved: ${summaryFile}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Summary saved: ${summaryFile}`"
        }
      ]
    },
    "./scripts/cursor/bulk-dom-analyzer.js": {
      "totalFindings": 10,
      "byType": {
        "template_data": 10
      },
      "findings": [
        {
          "line": 30,
          "content": "logger.info(`📁 Auto-collected Verzeichnis: ${collectedPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Auto-collected Verzeichnis: ${collectedPath}`"
        },
        {
          "line": 31,
          "content": "logger.info(`📄 Gefundene DOM-Dateien: ${allFiles.length}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Gefundene DOM-Dateien: ${allFiles.length}`"
        },
        {
          "line": 39,
          "content": "logger.info(`📄 ${file}: ${elementCount} HTML-Elemente`);",
          "type": "template_data",
          "match": "logger.info(`📄 ${file}: ${elementCount} HTML-Elemente`"
        },
        {
          "line": 65,
          "content": "logger.info(`🔍 Analyzing ${sourceFile}...`);",
          "type": "template_data",
          "match": "logger.info(`🔍 Analyzing ${sourceFile}...`"
        },
        {
          "line": 68,
          "content": "logger.info(`  └─ ${allElements.length} DOM-Elemente gefunden`);",
          "type": "template_data",
          "match": "logger.info(`  └─ ${allElements.length} DOM-Elemente gefunden`"
        },
        {
          "line": 168,
          "content": "logger.info(`  ✅ ${featureName}: ${elements.length} Elemente`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${featureName}: ${elements.length} Elemente`"
        },
        {
          "line": 326,
          "content": "logger.info(`📁 Output: ${outputPath}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Output: ${outputPath}`"
        },
        {
          "line": 327,
          "content": "logger.info(`📈 Features gefunden: ${stats.totalFeatures}`);",
          "type": "template_data",
          "match": "logger.info(`📈 Features gefunden: ${stats.totalFeatures}`"
        },
        {
          "line": 328,
          "content": "logger.info(`📄 Dateien analysiert: ${Object.keys(sources).length}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Dateien analysiert: ${Object.keys(sources).length}`"
        },
        {
          "line": 335,
          "content": "logger.info(`  ✅ ${feature}: ${totalElements} Elemente`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${feature}: ${totalElements} Elemente`"
        }
      ]
    },
    "./scripts/cursor/run-enhanced-coverage.js": {
      "totalFindings": 34,
      "byType": {
        "direct_data": 4,
        "variable_data": 4,
        "template_data": 25,
        "error_object": 1
      },
      "findings": [
        {
          "line": 29,
          "content": "logger.info('⏰ Started:', new Date().toISOString());",
          "type": "direct_data",
          "match": "logger.info('⏰ Started:', new Date("
        },
        {
          "line": 29,
          "content": "logger.info('⏰ Started:', new Date().toISOString());",
          "type": "variable_data",
          "match": "logger.info('⏰ Started:', new"
        },
        {
          "line": 79,
          "content": "logger.info(`  ✅ ${dep} - Available`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${dep} - Available`"
        },
        {
          "line": 81,
          "content": "logger.info(`  ❌ ${dep} - Missing`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ ${dep} - Missing`"
        },
        {
          "line": 97,
          "content": "logger.info(`  ✅ ${file} - Found`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${file} - Found`"
        },
        {
          "line": 99,
          "content": "logger.info(`  ❌ ${file} - Missing`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ ${file} - Missing`"
        },
        {
          "line": 115,
          "content": "logger.info(`  📁 ${dir} - Created`);",
          "type": "template_data",
          "match": "logger.info(`  📁 ${dir} - Created`"
        },
        {
          "line": 117,
          "content": "logger.info(`  ✅ ${dir} - Exists`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${dir} - Exists`"
        },
        {
          "line": 129,
          "content": "logger.info(`  ✅ Pre-flight checks completed in ${phaseTime}ms\\n`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Pre-flight checks completed in ${phaseTime}ms\\n`"
        },
        {
          "line": 155,
          "content": "logger.info(`  📋 Collecting ${collector.enhancedStateConfigs.length} IDE states`);",
          "type": "template_data",
          "match": "logger.info(`  📋 Collecting ${collector.enhancedStateConfigs.length} IDE states`"
        },
        {
          "line": 168,
          "content": "logger.info(`  ✅ Enhanced DOM collection completed in ${phaseTime}ms\\n`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Enhanced DOM collection completed in ${phaseTime}ms\\n`"
        },
        {
          "line": 208,
          "content": "logger.info(`  ✅ Chat analysis completed in ${phaseTime}ms`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Chat analysis completed in ${phaseTime}ms`"
        },
        {
          "line": 209,
          "content": "logger.info(`  📈 Coverage: ${analysis.summary.coverage}%`);",
          "type": "template_data",
          "match": "logger.info(`  📈 Coverage: ${analysis.summary.coverage}%`"
        },
        {
          "line": 210,
          "content": "logger.info(`  🎯 Features: ${Object.keys(analysis.optimizedSelectors).length}`);",
          "type": "template_data",
          "match": "logger.info(`  🎯 Features: ${Object.keys(analysis.optimizedSelectors).length}`"
        },
        {
          "line": 211,
          "content": "logger.info(`  ⚠️ Issues: ${analysis.issues.length}\\n`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ Issues: ${analysis.issues.length}\\n`"
        },
        {
          "line": 252,
          "content": "logger.info(`  ✅ Coverage validation completed in ${phaseTime}ms`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Coverage validation completed in ${phaseTime}ms`"
        },
        {
          "line": 253,
          "content": "logger.info(`  📊 Overall Coverage: ${validation.coverage.overall.percentage}%`);",
          "type": "template_data",
          "match": "logger.info(`  📊 Overall Coverage: ${validation.coverage.overall.percentage}%`"
        },
        {
          "line": 254,
          "content": "logger.info(`  🎯 Features: ${validation.coverage.overall.found}/${validation.coverage.overall.total}\\n`);",
          "type": "template_data",
          "match": "logger.info(`  🎯 Features: ${validation.coverage.overall.found}/${validation.coverage.overall.total}\\n`"
        },
        {
          "line": 294,
          "content": "logger.info(`  ✅ Testing completed in ${phaseTime}ms`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Testing completed in ${phaseTime}ms`"
        },
        {
          "line": 295,
          "content": "logger.info(`  ✅ Passed: ${tester.testResults.passed}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Passed: ${tester.testResults.passed}`"
        },
        {
          "line": 296,
          "content": "logger.info(`  ❌ Failed: ${tester.testResults.failed}`);",
          "type": "template_data",
          "match": "logger.info(`  ❌ Failed: ${tester.testResults.failed}`"
        },
        {
          "line": 297,
          "content": "logger.info(`  ⚠️ Warnings: ${tester.testResults.warnings}\\n`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ Warnings: ${tester.testResults.warnings}\\n`"
        },
        {
          "line": 341,
          "content": "logger.info('  📄 Detailed report saved:', reportFile);",
          "type": "direct_data",
          "match": "logger.info('  📄 Detailed report saved:', reportFile"
        },
        {
          "line": 341,
          "content": "logger.info('  📄 Detailed report saved:', reportFile);",
          "type": "variable_data",
          "match": "logger.info('  📄 Detailed report saved:', reportFile"
        },
        {
          "line": 342,
          "content": "logger.info('  📄 Summary report saved:', markdownFile);",
          "type": "direct_data",
          "match": "logger.info('  📄 Summary report saved:', markdownFile"
        },
        {
          "line": 342,
          "content": "logger.info('  📄 Summary report saved:', markdownFile);",
          "type": "variable_data",
          "match": "logger.info('  📄 Summary report saved:', markdownFile"
        },
        {
          "line": 348,
          "content": "logger.info(`⏱️ Total Duration: ${Math.round(totalTime / 1000)}s`);",
          "type": "template_data",
          "match": "logger.info(`⏱️ Total Duration: ${Math.round(totalTime / 1000)}s`"
        },
        {
          "line": 349,
          "content": "logger.info(`✅ Successful Phases: ${successfulPhases}/${totalPhases}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Successful Phases: ${successfulPhases}/${totalPhases}`"
        },
        {
          "line": 350,
          "content": "logger.info(`📈 Success Rate: ${this.results.summary.successRate}%`);",
          "type": "template_data",
          "match": "logger.info(`📈 Success Rate: ${this.results.summary.successRate}%`"
        },
        {
          "line": 351,
          "content": "logger.info(`❌ Errors: ${this.results.errors.length}`);",
          "type": "template_data",
          "match": "logger.info(`❌ Errors: ${this.results.errors.length}`"
        },
        {
          "line": 352,
          "content": "logger.info(`⚠️ Warnings: ${this.results.warnings.length}`);",
          "type": "template_data",
          "match": "logger.info(`⚠️ Warnings: ${this.results.warnings.length}`"
        },
        {
          "line": 431,
          "content": "logger.info('  ⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('  ⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 431,
          "content": "logger.info('  ⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('  ⚠️ Cleanup warning:', error"
        },
        {
          "line": 431,
          "content": "logger.info('  ⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('  ⚠️ Cleanup warning:', error"
        }
      ]
    },
    "./scripts/cursor/selector-generator.js": {
      "totalFindings": 6,
      "byType": {
        "template_data": 6
      },
      "findings": [
        {
          "line": 18,
          "content": "logger.info(`📁 Created directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created directory: ${this.outputDir}`"
        },
        {
          "line": 262,
          "content": "logger.info(`📊 Using ${Object.keys(selectors).length} features from analysis`);",
          "type": "template_data",
          "match": "logger.info(`📊 Using ${Object.keys(selectors).length} features from analysis`"
        },
        {
          "line": 272,
          "content": "logger.info(`✅ Generated: ${filename}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Generated: ${filename}`"
        },
        {
          "line": 275,
          "content": "logger.info(`\\n🎉 Generated ${Object.keys(files).length} files in ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`\\n🎉 Generated ${Object.keys(files).length} files in ${this.outputDir}`"
        },
        {
          "line": 278,
          "content": "logger.info(`📈 Total Features: ${featureCount}`);",
          "type": "template_data",
          "match": "logger.info(`📈 Total Features: ${featureCount}`"
        },
        {
          "line": 291,
          "content": "logger.info(`  🎯 ${category}: ${count} features`);",
          "type": "template_data",
          "match": "logger.info(`  🎯 ${category}: ${count} features`"
        }
      ]
    },
    "./scripts/cursor/enhanced-dom-collector.js": {
      "totalFindings": 20,
      "byType": {
        "template_data": 17,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 166,
          "content": "logger.info(`📁 Created enhanced collection directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Created enhanced collection directory: ${this.outputDir}`"
        },
        {
          "line": 183,
          "content": "logger.info(`✅ Connected to Cursor IDE on port ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Connected to Cursor IDE on port ${activePort}`"
        },
        {
          "line": 195,
          "content": "logger.info(`\\n🎯 Collecting ${this.enhancedStateConfigs.length} enhanced IDE states...\\n`);",
          "type": "template_data",
          "match": "logger.info(`\\n🎯 Collecting ${this.enhancedStateConfigs.length} enhanced IDE states...\\n`"
        },
        {
          "line": 199,
          "content": "logger.info(`📄 [${index + 1}/${this.enhancedStateConfigs.length}] ${config.name}`);",
          "type": "template_data",
          "match": "logger.info(`📄 [${index + 1}/${this.enhancedStateConfigs.length}] ${config.name}`"
        },
        {
          "line": 200,
          "content": "logger.info(`   ${config.description}`);",
          "type": "template_data",
          "match": "logger.info(`   ${config.description}`"
        },
        {
          "line": 490,
          "content": "logger.info(`  ✅ Clicking New Chat modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicking New Chat modal button: ${text || ariaLabel}`"
        },
        {
          "line": 507,
          "content": "logger.info(`  ⚠️ Clicking any modal button: ${text || ariaLabel}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ Clicking any modal button: ${text || ariaLabel}`"
        },
        {
          "line": 522,
          "content": "logger.info(`  ⚠️ New Chat modal handling failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ New Chat modal handling failed: ${error.message}`"
        },
        {
          "line": 560,
          "content": "logger.info(`  ✅ Found chat input with selector: ${selector} (${ideType})`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Found chat input with selector: ${selector} (${ideType})`"
        },
        {
          "line": 568,
          "content": "logger.info(`  ⚠️ No chat input found for ${ideType}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️ No chat input found for ${ideType}`"
        },
        {
          "line": 599,
          "content": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Clicked VSCode send button: ${selector}`"
        },
        {
          "line": 846,
          "content": "logger.info(`📝 Sending VSCode chat message: \"${message}\"`);",
          "type": "template_data",
          "match": "logger.info(`📝 Sending VSCode chat message: \"${message}\"`"
        },
        {
          "line": 871,
          "content": "logger.info(`  ✅ Message sent via VSCode send button: ${selector}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Message sent via VSCode send button: ${selector}`"
        },
        {
          "line": 917,
          "content": "logger.info(`📁 Directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Directory: ${this.outputDir}`"
        },
        {
          "line": 918,
          "content": "logger.info(`📄 Files: ${this.collectedStates.size}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Files: ${this.collectedStates.size}`"
        },
        {
          "line": 919,
          "content": "logger.info(`📊 Report: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`📊 Report: ${reportPath}`"
        },
        {
          "line": 925,
          "content": "logger.info(`  ✅ ${type}: ${count} files`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${type}: ${count} files`"
        },
        {
          "line": 942,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 942,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 942,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        }
      ]
    },
    "./scripts/cursor/auto-dom-collector.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 8,
        "direct_data": 1,
        "variable_data": 1,
        "error_object": 1
      },
      "findings": [
        {
          "line": 99,
          "content": "logger.info(`✅ Verbunden mit Cursor IDE auf Port ${activePort}`);",
          "type": "template_data",
          "match": "logger.info(`✅ Verbunden mit Cursor IDE auf Port ${activePort}`"
        },
        {
          "line": 111,
          "content": "logger.info(`\\n🎯 Sammle ${this.stateConfigs.length} verschiedene IDE-Zustände...\\n`);",
          "type": "template_data",
          "match": "logger.info(`\\n🎯 Sammle ${this.stateConfigs.length} verschiedene IDE-Zustände...\\n`"
        },
        {
          "line": 115,
          "content": "logger.info(`📄 [${index + 1}/${this.stateConfigs.length}] ${config.name}`);",
          "type": "template_data",
          "match": "logger.info(`📄 [${index + 1}/${this.stateConfigs.length}] ${config.name}`"
        },
        {
          "line": 116,
          "content": "logger.info(`   ${config.description}`);",
          "type": "template_data",
          "match": "logger.info(`   ${config.description}`"
        },
        {
          "line": 332,
          "content": "logger.info(`📁 Verzeichnis: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`📁 Verzeichnis: ${this.outputDir}`"
        },
        {
          "line": 333,
          "content": "logger.info(`📄 Dateien: ${this.collectedStates.size}`);",
          "type": "template_data",
          "match": "logger.info(`📄 Dateien: ${this.collectedStates.size}`"
        },
        {
          "line": 334,
          "content": "logger.info(`📊 Report: ${reportPath}`);",
          "type": "template_data",
          "match": "logger.info(`📊 Report: ${reportPath}`"
        },
        {
          "line": 339,
          "content": "logger.info(`  ✅ ${data.filename} (${data.elementCount} Elemente)`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ ${data.filename} (${data.elementCount} Elemente)`"
        },
        {
          "line": 347,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "direct_data",
          "match": "logger.info('⚠️ Cleanup warning:', error.message"
        },
        {
          "line": 347,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "variable_data",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        },
        {
          "line": 347,
          "content": "logger.info('⚠️ Cleanup warning:', error.message);",
          "type": "error_object",
          "match": "logger.info('⚠️ Cleanup warning:', error"
        }
      ]
    },
    "./scripts/test-advanced-analysis.js": {
      "totalFindings": 42,
      "byType": {
        "direct_data": 5,
        "variable_data": 2,
        "template_data": 33,
        "database_result": 2
      },
      "findings": [
        {
          "line": 23,
          "content": "info: (message, data) => logger.info(`${message}`, data || ''),",
          "type": "direct_data",
          "match": "logger.info(`${message}`, data || ''"
        },
        {
          "line": 23,
          "content": "info: (message, data) => logger.info(`${message}`, data || ''),",
          "type": "variable_data",
          "match": "logger.info(`${message}`, data"
        },
        {
          "line": 23,
          "content": "info: (message, data) => logger.info(`${message}`, data || ''),",
          "type": "template_data",
          "match": "logger.info(`${message}`"
        },
        {
          "line": 23,
          "content": "info: (message, data) => logger.info(`${message}`, data || ''),",
          "type": "database_result",
          "match": "logger.info(`${message}`, data"
        },
        {
          "line": 70,
          "content": "logger.info(`  ✓ Command ID: ${validCommand.commandId}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Command ID: ${validCommand.commandId}`"
        },
        {
          "line": 71,
          "content": "logger.info(`  ✓ Project Path: ${validCommand.projectPath}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Project Path: ${validCommand.projectPath}`"
        },
        {
          "line": 72,
          "content": "logger.info(`  ✓ Requested By: ${validCommand.requestedBy}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Requested By: ${validCommand.requestedBy}`"
        },
        {
          "line": 76,
          "content": "logger.info(`  ✓ Validation: ${validation.isValid ? 'PASSED' : 'FAILED'}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Validation: ${validation.isValid ? 'PASSED' : 'FAILED'}`"
        },
        {
          "line": 79,
          "content": "logger.info(`  ✗ Errors: ${validation.errors.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`  ✗ Errors: ${validation.errors.join(', '"
        },
        {
          "line": 79,
          "content": "logger.info(`  ✗ Errors: ${validation.errors.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`  ✗ Errors: ${validation.errors.join(', ')}`"
        },
        {
          "line": 82,
          "content": "logger.info(`  ⚠ Warnings: ${validation.warnings.join(', ')}`);",
          "type": "direct_data",
          "match": "logger.info(`  ⚠ Warnings: ${validation.warnings.join(', '"
        },
        {
          "line": 82,
          "content": "logger.info(`  ⚠ Warnings: ${validation.warnings.join(', ')}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠ Warnings: ${validation.warnings.join(', ')}`"
        },
        {
          "line": 91,
          "content": "logger.info(`  ✓ Invalid command validation: ${invalidValidation.isValid ? 'FAILED' : 'PASSED'}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Invalid command validation: ${invalidValidation.isValid ? 'FAILED' : 'PASSED'}`"
        },
        {
          "line": 109,
          "content": "logger.info(`  📁 Testing with project: ${projectPath}`);",
          "type": "template_data",
          "match": "logger.info(`  📁 Testing with project: ${projectPath}`"
        },
        {
          "line": 119,
          "content": "logger.info(`  ✓ Overall Score: ${result.metrics.overallScore}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Overall Score: ${result.metrics.overallScore}`"
        },
        {
          "line": 120,
          "content": "logger.info(`  ✓ Layer Score: ${result.metrics.layerScore}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Layer Score: ${result.metrics.layerScore}`"
        },
        {
          "line": 121,
          "content": "logger.info(`  ✓ Logic Score: ${result.metrics.logicScore}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Logic Score: ${result.metrics.logicScore}`"
        },
        {
          "line": 122,
          "content": "logger.info(`  ✓ Overall Valid: ${result.overall}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Overall Valid: ${result.overall}`"
        },
        {
          "line": 123,
          "content": "logger.info(`  ✓ Total Violations: ${(result.layerValidation.violations || []).length + (result.logicValidation.violations || []).length}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Total Violations: ${(result.layerValidation.violations || []).length + (result.logicValidation.violations || []).length}`"
        },
        {
          "line": 124,
          "content": "logger.info(`  ✓ Insights Generated: ${result.integratedInsights.length}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Insights Generated: ${result.integratedInsights.length}`"
        },
        {
          "line": 125,
          "content": "logger.info(`  ✓ Recommendations Generated: ${result.recommendations.length}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Recommendations Generated: ${result.recommendations.length}`"
        },
        {
          "line": 130,
          "content": "logger.info(`  ✓ Report Summary: ${report.summary.overallScore}/100 score, ${report.summary.totalViolations} violations`);",
          "type": "direct_data",
          "match": "logger.info(`  ✓ Report Summary: ${report.summary.overallScore}/100 score, ${report.summary.totalViolations} violations`"
        },
        {
          "line": 130,
          "content": "logger.info(`  ✓ Report Summary: ${report.summary.overallScore}/100 score, ${report.summary.totalViolations} violations`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Report Summary: ${report.summary.overallScore}/100 score, ${report.summary.totalViolations} violations`"
        },
        {
          "line": 133,
          "content": "logger.info(`  ⚠ Analysis failed (this might be expected for some projects): ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠ Analysis failed (this might be expected for some projects): ${error.message}`"
        },
        {
          "line": 145,
          "content": "logger.info(`  📡 Event: ${event}`, data ? `(${Object.keys(data).length} properties)` : '');",
          "type": "direct_data",
          "match": "logger.info(`  📡 Event: ${event}`, data ? `(${Object.keys(data"
        },
        {
          "line": 145,
          "content": "logger.info(`  📡 Event: ${event}`, data ? `(${Object.keys(data).length} properties)` : '');",
          "type": "variable_data",
          "match": "logger.info(`  📡 Event: ${event}`, data"
        },
        {
          "line": 145,
          "content": "logger.info(`  📡 Event: ${event}`, data ? `(${Object.keys(data).length} properties)` : '');",
          "type": "template_data",
          "match": "logger.info(`  📡 Event: ${event}`"
        },
        {
          "line": 145,
          "content": "logger.info(`  📡 Event: ${event}`, data ? `(${Object.keys(data).length} properties)` : '');",
          "type": "database_result",
          "match": "logger.info(`  📡 Event: ${event}`, data"
        },
        {
          "line": 151,
          "content": "logger.info(`  💾 Task saved: ${task.title}`);",
          "type": "template_data",
          "match": "logger.info(`  💾 Task saved: ${task.title}`"
        },
        {
          "line": 158,
          "content": "logger.info(`  💾 Execution saved: ${execution.id}`);",
          "type": "template_data",
          "match": "logger.info(`  💾 Execution saved: ${execution.id}`"
        },
        {
          "line": 188,
          "content": "logger.info(`  ✓ Execution ID: ${result.executionId}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Execution ID: ${result.executionId}`"
        },
        {
          "line": 189,
          "content": "logger.info(`  ✓ Duration: ${result.duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Duration: ${result.duration}ms`"
        },
        {
          "line": 190,
          "content": "logger.info(`  ✓ Success: ${result.success}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Success: ${result.success}`"
        },
        {
          "line": 193,
          "content": "logger.info(`  ⚠ Handler workflow failed (this might be expected): ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠ Handler workflow failed (this might be expected): ${error.message}`"
        },
        {
          "line": 224,
          "content": "logger.info(`  📁 Testing with created project: ${testProjectPath}`);",
          "type": "template_data",
          "match": "logger.info(`  📁 Testing with created project: ${testProjectPath}`"
        },
        {
          "line": 229,
          "content": "logger.info(`  ✓ Overall Score: ${result.analysis.metrics.overallScore}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Overall Score: ${result.analysis.metrics.overallScore}`"
        },
        {
          "line": 230,
          "content": "logger.info(`  ✓ Analysis Duration: ${result.duration}ms`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Analysis Duration: ${result.duration}ms`"
        },
        {
          "line": 231,
          "content": "logger.info(`  ✓ Report Generated: ${result.report ? 'Yes' : 'No'}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Report Generated: ${result.report ? 'Yes' : 'No'}`"
        },
        {
          "line": 237,
          "content": "logger.info(`  ⚠ End-to-end test failed: ${error.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠ End-to-end test failed: ${error.message}`"
        },
        {
          "line": 243,
          "content": "logger.info(`  ⚠ Cleanup failed: ${cleanupError.message}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠ Cleanup failed: ${cleanupError.message}`"
        },
        {
          "line": 318,
          "content": "logger.info(`  ✓ Test project created at: ${projectPath}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Test project created at: ${projectPath}`"
        },
        {
          "line": 328,
          "content": "logger.info(`  ✓ Test project cleaned up: ${projectPath}`);",
          "type": "template_data",
          "match": "logger.info(`  ✓ Test project cleaned up: ${projectPath}`"
        }
      ]
    },
    "./scripts/ide/auto-dom-collector.js": {
      "totalFindings": 11,
      "byType": {
        "template_data": 10,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 63,
          "content": "logger.info(`Output directory: ${this.outputDir}`);",
          "type": "template_data",
          "match": "logger.info(`Output directory: ${this.outputDir}`"
        },
        {
          "line": 77,
          "content": "logger.info(`Detecting ${config.name}...`);",
          "type": "template_data",
          "match": "logger.info(`Detecting ${config.name}...`"
        },
        {
          "line": 87,
          "content": "logger.info(`Found ${config.name} on port ${port}`);",
          "type": "template_data",
          "match": "logger.info(`Found ${config.name} on port ${port}`"
        },
        {
          "line": 129,
          "content": "logger.info(`Collecting DOM from ${config.name} on port ${port}...`);",
          "type": "template_data",
          "match": "logger.info(`Collecting DOM from ${config.name} on port ${port}...`"
        },
        {
          "line": 159,
          "content": "logger.info(`DOM collected from ${config.name}: ${filepath}`);",
          "type": "template_data",
          "match": "logger.info(`DOM collected from ${config.name}: ${filepath}`"
        },
        {
          "line": 222,
          "content": "logger.info(`No successful DOM collections for ${ideType}`);",
          "type": "template_data",
          "match": "logger.info(`No successful DOM collections for ${ideType}`"
        },
        {
          "line": 247,
          "content": "logger.info(`Selectors saved: ${selectorFile}`);",
          "type": "template_data",
          "match": "logger.info(`Selectors saved: ${selectorFile}`"
        },
        {
          "line": 306,
          "content": "logger.info(`Coverage report saved: ${coverageFile}`);",
          "type": "template_data",
          "match": "logger.info(`Coverage report saved: ${coverageFile}`"
        },
        {
          "line": 329,
          "content": "logger.info(`Found ${runningIDEs.length} running IDE(s)`);",
          "type": "template_data",
          "match": "logger.info(`Found ${runningIDEs.length} running IDE(s)`"
        },
        {
          "line": 345,
          "content": "logger.info(`Summary: ${coverageReport.successfulCollections} successful, ${coverageReport.failedCollections} failed`);",
          "type": "direct_data",
          "match": "logger.info(`Summary: ${coverageReport.successfulCollections} successful, ${coverageReport.failedCollections} failed`"
        },
        {
          "line": 345,
          "content": "logger.info(`Summary: ${coverageReport.successfulCollections} successful, ${coverageReport.failedCollections} failed`);",
          "type": "template_data",
          "match": "logger.info(`Summary: ${coverageReport.successfulCollections} successful, ${coverageReport.failedCollections} failed`"
        }
      ]
    },
    "./scripts/task-category-migration.js": {
      "totalFindings": 12,
      "byType": {
        "template_data": 11,
        "direct_data": 1
      },
      "findings": [
        {
          "line": 48,
          "content": "logger.info(`Mode: ${isDryRun ? 'DRY RUN' : shouldUpdate ? 'UPDATE' : 'ANALYSIS'}`);",
          "type": "template_data",
          "match": "logger.info(`Mode: ${isDryRun ? 'DRY RUN' : shouldUpdate ? 'UPDATE' : 'ANALYSIS'}`"
        },
        {
          "line": 54,
          "content": "logger.info(`📁 Found ${taskFiles.length} task files`);",
          "type": "template_data",
          "match": "logger.info(`📁 Found ${taskFiles.length} task files`"
        },
        {
          "line": 167,
          "content": "logger.info(`\\n${category.toUpperCase()} (${taskList.length} tasks):`);",
          "type": "template_data",
          "match": "logger.info(`\\n${category.toUpperCase()} (${taskList.length} tasks):`"
        },
        {
          "line": 168,
          "content": "logger.info(`  ${this.categories[category] || 'Uncategorized'}`);",
          "type": "template_data",
          "match": "logger.info(`  ${this.categories[category] || 'Uncategorized'}`"
        },
        {
          "line": 172,
          "content": "logger.info(`  - ${relativePath}`);",
          "type": "template_data",
          "match": "logger.info(`  - ${relativePath}`"
        },
        {
          "line": 177,
          "content": "logger.info(`  Total Tasks: ${totalTasks}`);",
          "type": "template_data",
          "match": "logger.info(`  Total Tasks: ${totalTasks}`"
        },
        {
          "line": 178,
          "content": "logger.info(`  Categories Used: ${Object.keys(categorizedTasks).filter(cat => categorizedTasks[cat].length > 0).length}`);",
          "type": "template_data",
          "match": "logger.info(`  Categories Used: ${Object.keys(categorizedTasks).filter(cat => categorizedTasks[cat].length > 0).length}`"
        },
        {
          "line": 191,
          "content": "logger.info(`\\n📁 Processing ${category} (${taskList.length} tasks):`);",
          "type": "template_data",
          "match": "logger.info(`\\n📁 Processing ${category} (${taskList.length} tasks):`"
        },
        {
          "line": 209,
          "content": "logger.info(`  ✅ Updated: ${relativePath} → ${category}`);",
          "type": "template_data",
          "match": "logger.info(`  ✅ Updated: ${relativePath} → ${category}`"
        },
        {
          "line": 212,
          "content": "logger.info(`  ⚠️  No changes needed: ${relativePath}`);",
          "type": "template_data",
          "match": "logger.info(`  ⚠️  No changes needed: ${relativePath}`"
        },
        {
          "line": 267,
          "content": "logger.info('  --help, -h   Show this help');",
          "type": "direct_data",
          "match": "logger.info('  --help, -h   Show this help'"
        },
        {
          "line": 271,
          "content": "logger.info(`  ${category}: ${description}`);",
          "type": "template_data",
          "match": "logger.info(`  ${category}: ${description}`"
        }
      ]
    }
  }
}